transfer-inference:
  confidence: DISABLE # ,DISABLE,HIGH
  scope: APP      # ,APP_LIB,ALL
  appPackages: [ org.apache.rocketmq ]

sources:
#  - { kind: param, method: "<org.apache.rocketmq.namesrv.processor.DefaultRequestProcessor: org.apache.rocketmq.remoting.protocol.RemotingCommand processRequest(io.netty.channel.ChannelHandlerContext,org.apache.rocketmq.remoting.protocol.RemotingCommand)>", index: 1 }
  - { kind: call, method: "<Server: byte getTaint()>", index: result }
#  - { kind: call, method: "<Server: byte[] getSource()>", index: result }

sinks:
  - { method: "<org.apache.rocketmq.common.utils.IOTinyUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>", index: "1.value[*]" }
#  - { method: "<Server: void sink(byte)>", index: 0 }

transfers:
#  - { method: "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>", from: 0, to: "2", type: "byte" }
#  - { method: "<java.nio.HeapByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>", from: base.hb, to: "0", type: "byte[]" }
#  - { method: "<java.nio.HeapByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>", from: 0, to: "0[*]", type: "byte" }
#  - { method: "<java.lang.String: void <init>(byte[],java.lang.String)>", from: "0[*]", to: base, type: "java.lang.String" }
#  - { method: "<java.lang.String: byte[] getBytes(java.lang.String)>", from: "0", to: "result[*]", type: "byte" }
#  - { method: "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>", from: "0", to: "base", type: "java.lang.StringBuilder" }
#  - { method: "<java.lang.StringBuilder: java.lang.String toString()>", from: "base", to: "result", type: "java.lang.String" }
#  - { method: "<java.io.ByteArrayInputStream: int read(byte[],int,int)>", from: base.buf, to: 0, type: "byte[]" }
#  - { method: "<java.io.ByteArrayInputStream: int read(byte[],int,int)>", from: 0, to: "0[*]", type: "byte" }

#  - { method: "<java.util.Properties: java.lang.String loadConvert(char[],int,int,char[])>", from: "0[*]", to: result, type: "java.lang.String" }
#  - { method: "<org.apache.rocketmq.remoting.Configuration: void mergeIfExist(java.util.Properties,java.util.Properties)>", from: 0, to: 1 }
#  - { method: "<org.apache.rocketmq.remoting.protocol.RemotingCommand: byte[] getBody()>", from: base, to: result }
#  - { method: "<org.apache.rocketmq.common.MixAll: java.util.Properties string2Properties(java.lang.String)>", from: 0, to: result }
#  - { method: "<java.lang.String: void <init>(byte[],java.lang.String)>", from: 0, to: base, type: java.lang.String }
#  - { method: "<org.apache.rocketmq.common.MixAll: java.lang.String properties2String(java.util.Properties,boolean)>", from: 0, to: result, type: java.lang.String }
#  - { method: "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>", from: 0, to: base, type: java.lang.StringBuilder }
#  - { method: "<java.lang.StringBuilder: java.lang.String toString()>", from: base, to: result, type: java.lang.String }
