digraph G {
  node [];
  edge [];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r54}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.logging.PlatformLogger: void redirectToJavaLoggerProxy()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.ExpiringCache$Entry: void <init>(long,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Signature: void initVerify(java.security.PublicKey,java.security.spec.AlgorithmParameterSpec)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: void initialize()>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$FileLoader: void <init>(java.net.URL)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.time.Instant: java.time.Instant from(java.time.temporal.TemporalAccessor)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringJoiner: java.lang.StringBuilder prepareBuilder()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath: sun.misc.Resource getResource(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle findBundleInCache(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle$Control)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: void initialize()>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<javax.crypto.JarVerifier: void verify()>[11@L81] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.GeneralName: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(long)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: void <init>(java.util.ArrayList,sun.security.util.ManifestDigester,java.lang.String,byte[])>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringCoding: void warnUnsupportedCharset(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String next()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.calendar.CalendarSystem: java.util.Properties getCalendarProperties()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.GregorianCalendar: void computeTime()>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r61}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.StringWriter: void write(java.lang.String,int,int)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI$Parser: void failExpecting(java.lang.String,int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[0@L427] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String codeBase>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DateFormat: java.util.Date parse(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>/r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r47}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String,int)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.zip.ZipCoder: java.lang.String toString(byte[],int)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>[26@L1769] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27853}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void append(java.lang.StringBuffer,java.text.CharacterIterator)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.StringWriter: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerInputStream: int getLength(int,java.io.InputStream)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.LinkedList: void checkElementIndex(int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.BufferedReader: java.lang.String readLine(boolean)>/r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>/r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r60}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void access$600(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object)>/x1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/%taint-temp-8402}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.net.URI: void <init>(java.lang.String)>[10@L588] new java.net.URI$Parser}.<java.net.URI$Parser: java.lang.String input>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>[0@L1028] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String pattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.calendar.CalendarSystem: java.util.Properties getCalendarProperties()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.StringWriter: void write(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.EmptyByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,java.nio.ByteOrder)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r62}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: void <init>(java.lang.String,int)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS9Attributes: byte[] decode(sun.security.util.DerInputStream)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL[] parseClassPath(java.net.URL,java.lang.String)>[11@L1246] new java.net.URL}.<java.net.URL: java.lang.String host>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.Throwable: java.lang.String getLocalizedMessage()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<sun.misc.JarIndex: void read(java.io.InputStream)>[29@L327] newarray java.lang.String[$i0]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<io.netty.channel.ChannelOutboundBuffer: void addMessage(java.lang.Object,int,io.netty.channel.ChannelPromise)>/msg}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: void getIP()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkExternalForm(java.net.URL)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: java.lang.String name()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CRLImpl: void <init>(sun.security.util.DerValue)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.Attributes$Name: void <init>(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig: void <init>(java.lang.String,java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager: void checkExit(int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.SecurityPermission: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Vector: java.lang.Object elementAt(int)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency$2: java.io.File run()>[21@L409] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.lang.CharSequence getSubSequence(int,int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission: void init(int)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigInteger: void implMulAddCheck(int[],int[],int,int,int)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r45}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyFactory: void <init>(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>[23@L1048] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r52}" [fillcolor=deepskyblue,shape=doubleoctagon,style=filled];
  "VarNode{<java.io.FilePermissionCollection: void add(java.security.Permission)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$RBClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r44}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.SPILocaleProviderAdapter$1: java.util.spi.LocaleServiceProvider run()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayList: boolean add(java.lang.Object)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI$Parser: int parseServer(int,int)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: boolean validatePromise(io.netty.channel.ChannelPromise,boolean)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.lang.NoSuchFieldException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/r87}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253Name()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannel: java.lang.Object filterOutboundMessage(java.lang.Object)>/msg}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r90}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.util.concurrent.AbstractEventExecutor: java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable,java.lang.Object)>[0@L106] new io.netty.util.concurrent.PromiseTask}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: int checkVariants(java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: java.lang.String getActions()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$c2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.reflect.Reflection: boolean isSameClassPackage(java.lang.ClassLoader,java.lang.String,java.lang.ClassLoader,java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>[159@L413] new sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint}.<sun.security.util.DisabledAlgorithmConstraints$Constraint: java.lang.String algorithm>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.OIDName: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission: void init(int)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.ObjectStreamField: java.lang.String getClassSignature(java.lang.Class)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>/r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/%taint-temp-7226}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r48}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253String(boolean)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[3@L127] newarray java.lang.Object[%intconst0]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: java.util.Enumeration getBootstrapResources(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String authority>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r40}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[127@L1505] new java.text.SimpleDateFormat}.<java.text.SimpleDateFormat: char[] compiledPattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.text.normalizer.RuleCharacterIterator: int next(int)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String access$702(java.net.URI,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void byteArrayAppend(java.lang.StringBuffer,byte[])>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void write(java.lang.Object,boolean,io.netty.channel.ChannelPromise)>/msg}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: void applyPatternImpl(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.UnpooledUnsafeDirectByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,int,int)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$Node group0()>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.util.ManifestEntryVerifier: sun.security.util.JarConstraintsParameters getParams(java.util.Map,java.util.Map)>[19@L278] new sun.security.util.JarConstraintsParameters}.<sun.security.util.JarConstraintsParameters: java.lang.String message>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TreeMap$Entry: java.lang.Object setValue(java.lang.Object)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r68}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>[1@L77] new java.net.URI}.<java.net.URI: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String convertOldISOCodes(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r43}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[18@L196] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.ref.Reference: void <init>(java.lang.Object)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannel$AbstractUnsafe: void write(java.lang.Object,io.netty.channel.ChannelPromise)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: void <init>(java.util.ArrayList,sun.security.util.ManifestDigester,java.lang.String,byte[])>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: java.lang.StringBuilder appendFullRequest(java.lang.StringBuilder,io.netty.handler.codec.http.FullHttpRequest)>/req}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.PrintWriter: void println(java.lang.Object)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.util.regex.PatternSyntaxException error(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig$3: java.lang.String run()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.EDIPartyName: java.lang.String toString()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r52}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[9@L51] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.Debug: void <clinit>()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<io.netty.util.ResourceLeakDetector: void reportLeak(io.netty.util.ResourceLeakDetector$Level)>[63@L259] newarray java.lang.Object[%intconst6]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r56}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253String(boolean)>/r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>[26@L2571] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: long lastModified()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String)>[14@L184] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Collections: void swap(java.util.List,int,int)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r51}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.NormalizerBase$NFKCMode: java.lang.String normalize(java.lang.String,int)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>[117@L1543] new java.security.UnresolvedPermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>[30@L1210] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{MergedObj{<Merged java.lang.InternalError>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[81@L308] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r61}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.NormalizerImpl: void <clinit>()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarFile: java.util.zip.ZipEntry getEntry(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.GregorianCalendar: int computeFields(int,int)>/$r62}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.AbstractByteBufAllocator: void validate(int,int)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Provider: void addEngine(java.lang.String,boolean,java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[21@L199] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String privateuse>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.calendar.CalendarSystem: java.util.Properties getCalendarProperties()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509AttributeName: java.lang.String getPrefix()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Timestamp: java.lang.String toString()>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String getCallerInfo()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Timestamp: java.lang.String toString()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.security.auth.x500.X500Principal: java.lang.String getName()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>[18@L699] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String prefix>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String getLanguage()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.text.AttributedString$AttributeMap: java.util.Set entrySet()>[34@L1082] new java.text.AttributeEntry}.<java.text.AttributeEntry: java.lang.Object value>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>/$r36}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.calendar.CalendarSystem$1: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.lang.Exception>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.AccessControlContext$1: java.lang.Void run()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.lang.String getParent()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.LinkedList: void linkLast(java.lang.Object)>[1@L142] new java.util.LinkedList$Node}.<java.util.LinkedList$Node: java.lang.Object item>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r54}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayList: void subListRangeCheck(int,int,int)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.JapaneseImperialCalendar: java.util.Map getDisplayNames(int,int,java.util.Locale)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r84}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r53}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r38}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String getDateTimePattern(int,int,java.util.Calendar)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253String(java.util.Map)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.AbstractByteBufAllocator: void validate(int,int)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>[28@L1051] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigInteger,java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.rsa.RSAUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.security.AlgorithmParameters)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.StringTokenIterator: void <init>(java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r42}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void doubleArrayAppend(java.lang.StringBuffer,double[])>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermissionCollection: void add(java.security.Permission)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.IPAddressName: void <init>(java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r47}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1784] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object value>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.security.Signature: java.security.Signature getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>/r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[21@L199] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String language>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.URI: void appendFragment(java.lang.StringBuffer,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: boolean exists()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,boolean)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[79@L228] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName0(java.lang.String,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Signature$Delegate: java.security.SignatureSpi newInstance(java.security.Provider$Service)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.PropertyPermissionCollection: void add(java.security.Permission)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager: void checkDelete(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r70}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,boolean)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormatSymbols: java.lang.String getCurrencySymbol()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(long,java.util.Locale)>/$r39}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.util.concurrent.EventExecutor,java.lang.String,boolean,boolean)>/name}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$FileLoader: void <init>(java.net.URL)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.security.ProviderException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.CurveDB: java.lang.String[] getNamesByOID(java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyFactory: void <init>(java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.lang.Package definePackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerValue: byte[] getBitString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r48}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r44}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.UnknownHostException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuffer: java.lang.AbstractStringBuilder append(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: java.lang.CharSequence toCharSequence(java.lang.Object)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/r57}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: void <clinit>()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(sun.security.util.DerInputStream)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Inet6Address: java.lang.String numericToTextFormat(byte[])>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>/r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/r50}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$c5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: void parse(sun.security.util.DerValue)>[26@L649] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String dn>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CRLImpl: void parse(sun.security.util.DerValue)>[104@L1116] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r45}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerValue: sun.security.util.BitArray getUnalignedBitString(boolean)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.UnresolvedPermissionCollection: void add(java.security.Permission)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r40}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r59}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.lang.String getCanonicalPath()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.SignatureException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.JarConstraintsParameters: java.lang.String toString()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC1779String(java.util.Map)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>[18@L1511] newarray java.lang.String[%intconst1]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r46}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.util.ArrayDeque: void <init>()>[2@L193] newarray java.lang.Object[%intconst0]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[17@L63] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253Name(java.util.Map)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.CharSequence subSequence(int,int)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r43}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$Flags: java.util.Formatter$Flags parse(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.String substring(int)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: void <clinit>()>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$1: boolean next()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>[1@L1569] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String language>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Hashtable$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.Hashtable$Entry)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toUpperString(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager: java.lang.String[] getPackages(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/r38}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PropertyExpander$ExpandException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r71}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.BasicPermissionCollection: void add(java.security.Permission)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkUserInfo(java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher$Transform: int supportsPadding(java.security.Provider$Service)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission: java.lang.String getActions()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{MultiArrayObj{alloc=r29 = newmultiarray java.lang.String[%intconst1][%intconst2],type=java.lang.String[] in <sun.security.provider.PolicyFile: java.lang.String[][] getPrincipalInfo(sun.security.provider.PolicyParser$PrincipalEntry,java.security.Principal[])>}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/r72}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarFieldValueNameGetter: java.lang.String getObject(java.util.spi.CalendarNameProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask: void write(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.SPILocaleProviderAdapter$1: java.util.spi.LocaleServiceProvider run()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>[35@L1238] new sun.security.util.ObjectIdentifier}.<sun.security.util.ObjectIdentifier: java.lang.String stringForm>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.JdkLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void booleanArrayAppend(java.lang.StringBuffer,boolean[])>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.time.DateTimeException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.MissingFormatArgumentException: java.lang.String getMessage()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r48}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.URIName: sun.security.x509.URIName nameConstraint(sun.security.util.DerValue)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r49}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>[43@L1264] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String,java.lang.Class)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r38}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.logging.PlatformLogger: void config(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.net.URI toURI()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L256] new java.util.LinkedHashMap$Entry}.<java.util.HashMap$Node: java.lang.Object key>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.calendar.CalendarSystem$1: java.util.Properties run()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[17@L446] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String mode>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$2: void <init>(sun.misc.URLClassPath,java.lang.String,boolean)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.JceSecurityManager: javax.crypto.CryptoPermission getCryptoPermission(java.lang.String)>/r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r58}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r46}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Package$1: void <init>(java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.NetPermission: void <init>(java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r44}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void checkNumeric()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: int[] parsePort(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultChannelPipeline$TailContext: void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)>/msg}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.io.EOFException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[47@L196] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Arrays: void rangeCheck(int,int,int)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r73}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.calendar.CalendarSystem: java.util.Properties getCalendarProperties()>[17@L195] new sun.util.calendar.CalendarSystem$1}.<sun.util.calendar.CalendarSystem$1: java.lang.String val$fname>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.zip.ZipFile: void <init>(java.io.File,int,java.nio.charset.Charset)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Signature: void initVerify(java.security.PublicKey,java.security.spec.AlgorithmParameterSpec)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.SimpleTimeZone: void decodeStartRule()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DateFormat: java.util.Date parse(java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigInteger: void <init>(java.lang.String,int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r40}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r49}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CRLEntryImpl: void <init>(sun.security.util.DerValue)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.SignerInfo: java.util.Set verifyAlgorithms(sun.security.pkcs.SignerInfo[],sun.security.util.JarConstraintsParameters,java.lang.String)>/r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[13@L58] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.DecimalFormat: void expandAffixes()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionDependency$2: java.io.File run()>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: int subParse(java.lang.String,int,int,int,boolean,boolean[],java.text.ParsePosition,boolean,java.text.CalendarBuilder)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>/msg}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData$2: void <init>(java.lang.String,java.util.Locale)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress$Cache: java.net.InetAddress$Cache put(java.lang.String,java.net.InetAddress[])>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuffer: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: void config(java.lang.Class,java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.util.regex.PatternSyntaxException error(java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.lang.String[] normalizedList()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r47}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.ParseException: void <init>(java.lang.String,int)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.pkcs.SignerInfo: void <init>(sun.security.util.DerInputStream,boolean)>[19@L153] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r36}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r39}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager$LoggerContext$1: java.lang.Void run()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r47}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.SerialNumber: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask: io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask access$1600(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/x1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: void defineString()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r49}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r45}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.time.temporal.ValueRange: int checkValidIntValue(long,java.time.temporal.TemporalField)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.rsa.RSAUtil$KeyType: sun.security.rsa.RSAUtil$KeyType lookup(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[140@L447] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r77}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.ChannelPipelineException: void <init>(java.lang.String)>/message}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath: java.util.Enumeration getResources(java.lang.String,boolean)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: void checkMultiplicity(io.netty.channel.ChannelHandler)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC1779Name(java.util.Map)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>[88@L642] new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString}.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String str>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.nio.Buffer: void <init>(int,int,int,int)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.MessageDigest: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC1779DN(java.util.Map)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[55@L296] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.DateFormatProviderImpl: java.text.DateFormat getInstance(int,int,java.util.Locale)>[4@L150] new java.text.SimpleDateFormat}.<java.text.SimpleDateFormat: char[] compiledPattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.Log4JLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[0@L71] new java.security.AllPermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[77@L148] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.logging.LogManager$SystemLoggerContext: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void initPolicyFile(sun.security.provider.PolicyFile$PolicyInfo,java.net.URL)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl: void throwAccessCheckException(java.lang.Object)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r71}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/$r63}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r48}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC1779Name(java.util.Map)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.RuntimePermission: void <init>(java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[40@L682] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{MergedObj{<Merged java.lang.IllegalStateException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r41}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r53}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>[50@L631] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector: void <init>(java.lang.String,int,long)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.PrintWriter: void write(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceConfigurationError: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.spec.EllipticCurve: void checkValidity(java.security.spec.ECField,java.math.BigInteger,java.lang.String)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/$c3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable$WrappedPrintStream: void println(java.lang.Object)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r66}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r115}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>[15@L1110] new java.net.URL}.<java.net.URL: java.lang.String file>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.InetAddressCachePolicy$1: java.lang.Integer run()>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission: void init(int)>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHostString(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r36}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void <init>(java.lang.String,int,int,int)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.TimeZoneNameProviderImpl: java.lang.String getDisplayName(java.lang.String,boolean,int,java.util.Locale)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannel: java.lang.String toString()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.zip.ZipInputStream: void readEnd(java.util.zip.ZipEntry)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[4@L990] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.MissingFormatArgumentException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r69}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.String expandAffix(java.lang.String,java.lang.StringBuffer)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>/r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DigitList: void set(boolean,java.math.BigInteger,int)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: void <clinit>()>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: java.lang.String removePrivateuseVariant(java.lang.String)>[0@L542] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.BaseLocale$1)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.IdentityHashMap: void <init>(int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: boolean parsePrivateuse(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayList: java.util.ListIterator listIterator(int)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CertificateExtensions: sun.security.x509.Extension get(java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>/%native-arraycopy-temp44}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[140@L447] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String hostname>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.ChoiceFormat: void applyPattern(java.lang.String)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r44}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r81}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>[0@L311] new sun.util.locale.BaseLocale}.<sun.util.locale.BaseLocale: java.lang.String script>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r67}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: int checkVariants(java.lang.String,java.lang.String)>[0@L574] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r54}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.nio.charset.CoderMalfunctionError>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{MergedObj{<Merged java.net.URISyntaxException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.Debug: java.lang.String marshal(java.lang.String)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/r85}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged sun.security.provider.PolicyParser$ParsingException>}.<sun.security.provider.PolicyParser$ParsingException: java.lang.String i18nMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.DateFormatProviderImpl: java.text.DateFormat getInstance(int,int,java.util.Locale)>[4@L150] new java.text.SimpleDateFormat}.<java.text.SimpleDateFormat: java.lang.String pattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Formatter: java.util.Formatter$FormatString[] parse(java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Set createLanguageTagSet(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.lang.String,java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r50}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Integer: int parseInt(java.lang.String,int)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String access$2402(java.net.URI,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkWrite(java.lang.String)>[0@L979] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.DerValue: java.lang.String getT61String()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.UCharacterIterator: sun.text.normalizer.UCharacterIterator getInstance(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.util.Calendar,char,java.util.Locale)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253String(boolean)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: void checkDuplicateName(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Collections: void swap(java.util.List,int,int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LocaleExtensions: java.lang.String toID(java.util.SortedMap)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.AlgorithmParameters: java.lang.String getAlgorithm()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.zip.ZipInputStream: int read(byte[],int,int)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.rsa.RSAUtil$KeyType: sun.security.rsa.RSAUtil$KeyType lookup(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.IllegalReferenceCountException: void <init>(int,int)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r55}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable,int)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.MalformedURLException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.FormatFlagsConversionMismatchException: void <init>(java.lang.String,char)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Error: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: void cacheAddresses(java.lang.String,java.net.InetAddress[],boolean)>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Package$1: java.lang.Package run()>/r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TreeMap$Entry: java.lang.Object getKey()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestDigester: void <init>(byte[])>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI$Parser: int parseServer(int,int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC2253DN(java.util.Map)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean match(java.lang.String,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[99@L720] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r57}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[4@L1369] new java.net.URL}.<java.net.URL: java.lang.String file>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.misc.ExtensionDependency$2: java.io.File run()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.io.File)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.String toPattern(boolean)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigInteger: java.lang.String toString(int)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String)>/reasonPhrase}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Policy: java.security.Policy getPolicyNoCheck()>/r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.AssertionError: void <init>(java.lang.Object)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[59@L704] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.FileURLMapper: boolean exists()>[4@L77] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.io.FilePermission: void init(int)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager$LoggerContext$1: void <init>(java.util.logging.LogManager$LoggerContext,java.util.logging.Logger,java.util.logging.LogManager,java.lang.String)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency$CurrencyNameGetter: java.lang.String getObject(java.util.spi.CurrencyNameProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHostString(java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r46}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureUtil: java.lang.String checkName(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.CryptoPolicyParser: java.lang.String match(java.lang.String)>/$r38}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r40}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringCoding: char[] decode(byte[],int,int)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.lang.String getParent()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.TypeParameterMatcher: java.lang.Class fail(java.lang.Class,java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>[31@L84] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[22@L684] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName(boolean)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: void initialize()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.JarConstraintsParameters: java.lang.String extendedExceptionMsg()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r58}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission: void init(int)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.IllegalReferenceCountException: void <init>(int)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: void decodeParams()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Base64$Decoder: int decode0(byte[],int,int,byte[])>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: int getHexDigit(java.lang.String,int)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName0(java.lang.Class)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>[0@L739] new io.netty.channel.DefaultChannelPromise}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.security.Provider)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r63}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: void initialize()>/$r49}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509Key: byte[] getEncodedInternal()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.Currency: java.util.Currency getInstance(java.lang.String,int,int)>[62@L352] new java.util.Currency}.<java.util.Currency: java.lang.String currencyCode>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.zip.ZipError: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.io.File: java.lang.String[] normalizedList()>[16@L1155] newarray java.lang.String[$i0]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<sun.security.pkcs.PKCS7: void parse(sun.security.util.DerInputStream,boolean)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.util.ResourceLeakDetector: void <init>(java.lang.String,int,long)>[1@L147] new io.netty.util.ResourceLeakDetector$DefaultResourceLeak}.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String creationRecord>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.io.File: java.io.File getParentFile()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.util.IllegalFormatFlagsException>}.<java.util.IllegalFormatFlagsException: java.lang.String flags>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/r75}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath: sun.misc.Resource getResource(java.lang.String,boolean)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String match(java.lang.String)>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty charPropertyNodeFor(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void checkText()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r40}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Object: java.lang.String toString()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.WeakHashMap$Entry: java.lang.Object getValue()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.AccessControlContext$1: java.lang.Void run()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: void parse(sun.security.util.DerValue)>[26@L649] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class,java.lang.ClassLoader)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.GregorianCalendar: int computeFields(int,int)>/$r40}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$c3}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.util.jar.JarException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.System: java.lang.String getProperty(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.PropertyPermissionCollection: void add(java.security.Permission)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.IllformedLocaleException: void <init>(java.lang.String,int)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Signature: boolean isSpi(java.security.Provider$Service)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: int checkVariants(java.lang.String,java.lang.String)>[0@L574] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveNonFile(java.net.URL,java.lang.String)>[6@L1309] new java.net.URL}.<java.net.URL: java.lang.String file>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.time.DateTimeException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.IPAddressName: void <init>(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.StringTokenIterator: sun.util.locale.StringTokenIterator setStart(int)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String next()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.embedded.EmbeddedChannel: boolean writeInbound(java.lang.Object[])>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.String cannotCastMsg(java.lang.Object)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager$LoggerContext$1: java.lang.Void run()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[64@L698] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.URI$Parser: void <init>(java.net.URI,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendInitialLine(java.lang.StringBuilder,io.netty.handler.codec.http.HttpRequest)>/req}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Date: java.lang.String toString()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Parts: void <init>(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r49}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.OtherName: java.lang.String toString()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.GregorianCalendar: void setWeekDate(int,int,int)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderName(java.lang.CharSequence)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.PooledByteBufAllocator: int validateAndCalculatePageShifts(int)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.AssertionError: void <init>(java.lang.Object)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.PrintWriter: void print(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.lang.CharSequence getSubSequence(int,int)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringCoding: char[] decode(byte[],int,int)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,boolean)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager: void checkRead(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FileURLMapper: java.lang.String getPath()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.SignatureException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: java.lang.String getHost()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.JarIndex: void addMapping(java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager$LoggerContext: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.security.PermissionCollection getPermissions(java.security.Permissions,java.security.ProtectionDomain)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Policy$2: java.security.Policy run()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.action.GetPropertyAction: java.lang.String run()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.RegisteredDomain: java.lang.String getRegisteredDomain(java.lang.String)>/$r48}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$RBClassLoader: java.net.URL getResource(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.AbstractMap: void putAll(java.util.Map)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher$Transform: int supports(java.security.Provider$Service,java.lang.String,java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$c14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkExit(int)>[0@L761] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName0(java.lang.String,java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.util.LinkedList: java.lang.Object[] toArray()>[1@L1050] newarray java.lang.Object[$i0]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale$Builder: java.util.Locale$Builder setLocale(java.util.Locale)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.AttributedString$AttributedStringIterator: java.util.Set getAllAttributeKeys()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.cert.CertificateException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.System: java.lang.String getenv(java.lang.String)>[2@L896] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.jar.JarException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r107}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: java.lang.String getLocalizedMessage()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r74}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.calendar.ZoneInfoFile$1: java.lang.Object run()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r46}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r60}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/$r44}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.AccessController: void checkPermission(java.security.Permission)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.StringTokenIterator: sun.util.locale.StringTokenIterator setStart(int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-542}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: sun.security.jca.ProviderList getJarList(java.lang.String[])>[6@L206] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String className>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.security.Security: void initialize()>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.security.CodeSigner[] getSigners(sun.security.pkcs.SignerInfo[],sun.security.pkcs.PKCS7)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerValue: byte[] getOctetString()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayList: void <init>(int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.util.MissingFormatArgumentException>}.<java.util.MissingFormatArgumentException: java.lang.String s>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: java.lang.String toPoolName(java.lang.Class)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI$Parser: int parseAuthority(int,int)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[21@L199] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String script>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.X509CRLImpl: void parse(sun.security.util.DerValue)>/$r64}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.security.cert.CertificateEncodingException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String getDateTimePattern(java.lang.String,int,int,java.lang.String)>/r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.Extension: void setValue(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.lang.ClassCastException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/i14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.WrappedByteBuf: java.lang.String toString()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: int getHexDigit(java.lang.String,int)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[76@L706] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringCoding: char[] decode(byte[],int,int)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[160@L880] newarray java.lang.Object[%intconst11]}}" [fillcolor=khaki1,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.lang.StringIndexOutOfBoundsException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Locale: java.util.Locale initDefault()>/r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[99@L1481] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String negativePrefix>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.ByteBufUtil: void <clinit>()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.reflect.Modifier: java.lang.String toString(int)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String getDateTimePattern(java.lang.String,java.lang.String,int,java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: java.util.HashMap computeOidTable()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: void initialize()>/$r65}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void <init>(java.util.Formatter,java.util.regex.Matcher)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuthority(java.net.URL)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpVersion: void <clinit>()>[13@L45] new io.netty.handler.codec.http.HttpVersion}.<io.netty.handler.codec.http.HttpVersion: java.lang.String text>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.security.MessageDigest getDigest(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.UnresolvedPermission: void <init>(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate[])>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[40@L1229] newarray java.lang.String[%intconst1]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r61}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.calendar.CalendarDate: java.lang.String toString()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TreeMap: void deleteEntry(java.util.TreeMap$Entry)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.calendar.CalendarUtils: java.lang.StringBuffer sprintf0d(java.lang.StringBuffer,int,int)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r68}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKey(java.lang.String,int,int,boolean)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: boolean setSuccess0(java.lang.Object)>/result}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>/r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getScript()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void charArrayAppend(java.lang.StringBuffer,char[])>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Package: java.lang.Package defineSystemPackage(java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[22@L684] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[33@L87] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.cert.Certificate[] getCertificates(java.security.KeyStore,java.lang.String,sun.security.provider.PolicyFile$PolicyInfo)>[1@L1014] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: void callHandlerAdded0(io.netty.channel.AbstractChannelHandlerContext)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurityManager: javax.crypto.CryptoPermission getCryptoPermission(java.lang.String)>[91@L186] new javax.crypto.CryptoPermission}.<javax.crypto.CryptoPermission: java.lang.String alg>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String examineAliases(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,java.lang.String,int,java.util.Map)>/r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>[15@L1110] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r63}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.NumberFormatException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r75}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext$WriteTask: io.netty.channel.AbstractChannelHandlerContext$WriteTask access$1700(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/x1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.CodeSigner: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.security.PermissionCollection getPermissions(java.security.Permissions,java.security.ProtectionDomain)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.UnicodeLocaleExtension: void <clinit>()>[0@L48] new sun.util.locale.UnicodeLocaleExtension}.<sun.util.locale.Extension: java.lang.String value>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r68}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>[17@L436] new java.util.Hashtable$Entry}.<java.util.Hashtable$Entry: java.lang.Object value>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Locale: java.lang.String getUnicodeLocaleType(java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.util.Map parseProperties(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r58}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getTimeZoneNames(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: int getHexDigit(java.lang.String,int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>[6@L313] newarray java.lang.String[%intconst1]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.Launcher: void <init>()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>[0@L1032] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String codeBase>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.AbstractCollection: boolean addAll(java.util.Collection)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleProviderAdapter: boolean isSupportedLocale(java.util.Locale,sun.util.locale.provider.LocaleProviderAdapter$Type,java.util.Set)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r52}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$JarLoader: java.net.URL findResource(java.lang.String,boolean)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r53}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r36}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.UnresolvedPermissionCollection: void add(java.security.Permission)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>[23@L1048] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.io.FilePermission: void init(int)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency: java.util.Currency getInstance(java.util.Locale)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency: java.util.Currency getInstance(java.lang.String,int,int)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: java.lang.Object[] getImpl(java.lang.String,java.lang.String,java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>[25@L609] new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString}.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String str>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.SignatureFileVerifier: void <init>(java.util.ArrayList,sun.security.util.ManifestDigester,java.lang.String,byte[])>/r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.io.File getParentFile()>/r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/%taint-temp-23668}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.SignerInfo: java.util.Set verifyAlgorithms(sun.security.pkcs.SignerInfo[],sun.security.util.JarConstraintsParameters,java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>/$r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.StringWriter: java.lang.String toString()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27849}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseScript(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27937}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.zip.ZipCoder: byte[] getBytes(java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI$Parser: void parse(boolean)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: void <init>(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate[])>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>/r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: int end(int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getCalendarNames(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData: void setSupplementary(sun.util.resources.ParallelListResourceBundle)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.MessageDigest: java.lang.String toString()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FileURLMapper: java.lang.String getPath()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$c10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.security.cert.Certificate[] getCertificates(java.security.KeyStore,java.lang.String,sun.security.provider.PolicyFile$PolicyInfo)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void <init>(java.lang.String,int,int,int)>/$r41}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC1779DN(java.util.Map)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String getQuery()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringJoiner: java.lang.StringBuilder prepareBuilder()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1779] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object key>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.InternalError: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionDependency$2: java.io.File run()>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PolicyUtil: java.io.InputStream getInputStream(java.net.URL)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission: void <init>(java.lang.String,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DateFormat: java.text.DateFormat get(int,int,int,java.util.Locale)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509Key: java.security.PublicKey parse(sun.security.util.DerValue)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/r86}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>[21@L897] new sun.security.action.GetPropertyAction}.<sun.security.action.GetPropertyAction: java.lang.String defaultVal>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r56}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.UniqueName: void <init>(java.util.concurrent.ConcurrentMap,java.lang.String,java.lang.Object[])>/name}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.WeakHashMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue,int,java.util.WeakHashMap$Entry)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r64}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void checkGeneral()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.security.InvalidKeyException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[55@L458] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.HashMap$KeyIterator: java.lang.Object next()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.MessageDigest: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigInteger: void implSquareToLenChecks(int[],int,int[],int)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Signature$Delegate: void tryOperation(java.security.SignatureSpi,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r43}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.io.FilePermission$1: java.lang.String run()>[30@L248] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.JapaneseImperialCalendar: void computeTime()>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String)>[10@L1406] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[36@L452] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String pad>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>[20@L1417] newarray java.lang.Object[%intconst5]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.security.Signature: void initVerify(java.security.PublicKey,java.security.spec.AlgorithmParameterSpec)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.ResourceBundle: java.util.ResourceBundle getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>[5@L1333] new java.util.ResourceBundle$CacheKey}.<java.util.ResourceBundle$CacheKey: java.lang.String format>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r41}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r96}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.calendar.Era: java.lang.String toString()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.DecoderResult: void <clinit>()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.UnicodeSet: boolean contains(int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser$DomainEntry: void add(sun.security.provider.PolicyParser$KeyStoreEntry)>[8@L1315] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.BasicPermissionCollection: void add(java.security.Permission)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: void parseDN(java.lang.String,java.util.Map)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName(boolean)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$RBClassLoader: java.lang.Class loadClass(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>[52@L408] new java.net.Parts}.<java.net.Parts: java.lang.String query>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URISyntaxException: java.lang.String getMessage()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher$ExtClassLoader: java.io.File[] getExtDirs()>[10@L189] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Double: java.lang.String toHexString(double)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r61}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r82}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[1@L278] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath: sun.misc.Resource getResource(java.lang.String,boolean)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>/%native-arraycopy-temp383}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String access$1402(java.net.URI,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[24@L464] new java.util.WeakHashMap$Entry}.<java.util.WeakHashMap$Entry: java.lang.Object value>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>[0@L702] new java.net.URL}.<java.net.URL: java.lang.String host>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.URI: java.lang.String access$1102(java.net.URI,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.net.URI toURI()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>[9@L175] new java.security.MessageDigest$Delegate}.<java.security.MessageDigest: java.lang.String algorithm>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Collections: void reverse(java.util.List)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$i11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void initPolicyFile(sun.security.provider.PolicyFile$PolicyInfo,java.net.URL)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.util.FormatFlagsConversionMismatchException>}.<java.util.FormatFlagsConversionMismatchException: java.lang.String f>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.text.normalizer.UnicodeSet: void syntaxError(sun.text.normalizer.RuleCharacterIterator,java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SunEntries: java.io.File getDeviceFile(java.net.URL)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStoreException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: void parse(sun.security.util.DerValue)>[39@L659] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r69}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.rsa.RSAUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.security.AlgorithmParameters)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.Debug: java.lang.String marshal(java.lang.String)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.PromiseTask: java.lang.StringBuilder toStringBuilder()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerInputBuffer: int toDigit(byte,java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String,int)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext$WriteTask: io.netty.channel.AbstractChannelHandlerContext$WriteTask newInstance(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1784] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Vector: java.lang.Object get(int)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509Key: byte[] getEncodedInternal()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig$3: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.AttributedString: void setAttributes(java.util.Map,int)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<Server: void main(java.lang.String[])>[8@L11] newarray java.lang.Object[%intconst0]}}" [fillcolor=khaki1,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[82@L1848] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r61}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.SunEntries: java.io.File getDeviceFile(java.net.URL)>[22@L379] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[16@L670] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[157@L876] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuthority(java.net.URL)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.util.logging.LogManager: java.lang.String[] parseClassNames(java.lang.String)>[35@L1388] newarray java.lang.String[$i0]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.IllegalReferenceCountException: void <init>(int,int)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>[2@L3210] newarray java.lang.Object[i0]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String,int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.SunEntries: java.io.File getDeviceFile(java.net.URL)>[4@L373] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[20@L672] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.misc.URLClassPath$1: void <init>(sun.misc.URLClassPath,java.lang.String,boolean)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String,boolean)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: java.util.HashMap computeOidTable()>/r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.Class,boolean,int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkRead(java.lang.String)>[0@L888] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.logging.Logger$1: java.util.ResourceBundle run()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.SPILocaleProviderAdapter$1: java.util.spi.LocaleServiceProvider run()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: boolean validatePromise(io.netty.channel.ChannelPromise,boolean)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.util.Signal: void <init>(java.lang.String)>[1@L50] new io.netty.util.UniqueName}.<io.netty.util.UniqueName: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-558}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger,boolean)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r52}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS9Attributes: byte[] decode(sun.security.util.DerInputStream)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseString(java.io.Reader,int,int,java.lang.StringBuilder)>/$r47}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Parts: java.lang.String getQuery()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath: java.util.Enumeration getResources(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>[21@L454] new java.util.StringJoiner}.<java.util.StringJoiner: java.lang.String suffix>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.DateFormat: java.text.DateFormat get(int,int,int,java.util.Locale)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.lang.String getParent()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderName(java.lang.CharSequence)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.RDN: java.lang.String toString()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.jar.JarFile: java.util.jar.Manifest getManifestFromReference()>[21@L201] new java.util.jar.JarVerifier}.<java.util.jar.JarVerifier: java.lang.String manifestName>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<javax.crypto.JarVerifier: void verify()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.Launcher$ExtClassLoader: java.net.URL[] getExtURLs(java.io.File[])>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.GregorianCalendar: void computeTime()>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r57}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r47}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Package: void <init>(java.lang.String,java.util.jar.Manifest,java.net.URL,java.lang.ClassLoader)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Policy$2: java.security.Policy run()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>/r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission$1: java.lang.Integer run()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void expandAffixes()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Vector: void <init>(int,int)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader$1: java.lang.Class run()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.embedded.EmbeddedChannel: void doWrite(io.netty.channel.ChannelOutboundBuffer)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVAKeyword: java.lang.String getKeyword(sun.security.util.ObjectIdentifier,int,java.util.Map)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.AbstractByteBuf: io.netty.buffer.ByteBuf setIndex(int,int)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CertificateExtensions: sun.security.x509.Extension get(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r86}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String getKeyStoreUrl()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[39@L188] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.net.InetAddressCachePolicy$2: java.lang.Integer run()>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void channelRead0(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/request}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>[70@L1883] newarray java.lang.Object[%intconst4]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: void compile()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: java.lang.Object[] getImpl(java.lang.String,java.lang.String,java.security.Provider)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[11@L194] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<java.util.Locale$Cache: java.util.Locale createObject(java.util.Locale$LocaleKey)>[0@L756] new java.util.Locale}.<java.util.Locale: java.lang.String languageTag>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged javax.crypto.CryptoPolicyParser$ParsingException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.URI: java.lang.String toString()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FileDescriptor: void attach(java.io.Closeable)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/r62}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.FallbackLocaleProviderAdapter: void <clinit>()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>[13@L181] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String rfc2253Dn>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkExternalForm(java.net.URL)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager: void readPrimordialConfiguration()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Signature: void initVerify(java.security.PublicKey,java.security.spec.AlgorithmParameterSpec)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpResponse: java.lang.String toString()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannel: java.lang.String toString()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r78}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r41}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: int escape(boolean,boolean,boolean)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object)>/arg}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[24@L674] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: java.lang.String text()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.Debug: java.lang.String marshal(java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.AllPermissionCollection: void add(java.security.Permission)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: boolean matches(java.lang.String,java.lang.CharSequence)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission: void init(int)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.SPILocaleProviderAdapter$1: java.util.spi.LocaleServiceProvider run()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[0@L823] new java.net.URL}.<java.net.URL: java.lang.String query>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.SupplementaryCharacterData: int getValue(int)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.Collections: java.util.Set singleton(java.lang.Object)>[0@L4669] new java.util.Collections$SingletonSet}.<java.util.Collections$SingletonSet: java.lang.Object element>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>[21@L272] new java.net.URL}.<java.net.URL: java.lang.String file>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.lang.String getAbsolutePath()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r51}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509Key: java.security.PublicKey parse(sun.security.util.DerValue)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.LinkedList$Node: void <init>(java.util.LinkedList$Node,java.lang.Object,java.util.LinkedList$Node)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: void getIP()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerValue: sun.security.util.DerInputStream toDerInputStream()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.security.cert.CertificateParsingException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.Throwable: void printStackTrace(java.lang.Throwable$PrintStreamOrWriter)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader$LazyIterator: boolean hasNextService()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r55}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.util.MissingResourceException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.logging.LoggingPermission: void <init>(java.lang.String,java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Hashtable: void <init>(int,float)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp341}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData: sun.util.resources.TimeZoneNamesBundle getTimeZoneNames(java.util.Locale)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>/r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions(int)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.URIName: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1774] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object value>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.handler.codec.http.DefaultFullHttpRequest: java.lang.String toString()>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveFile(java.net.URL,java.lang.String)>[10@L1296] new java.net.URL}.<java.net.URL: java.lang.String host>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVAKeyword: java.lang.String getKeyword(sun.security.util.ObjectIdentifier,int,java.util.Map)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar getLocalGregorianCalendar(java.lang.String)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r41}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.lang.NoSuchMethodException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.DerInputStream: int getLength(int,java.io.InputStream)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.LinkageError: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String access$100(sun.security.jca.ProviderConfig)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.PropertyPermissionCollection: void add(java.security.Permission)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r71}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>[0@L625] new sun.security.provider.PolicyParser$PermissionEntry}.<sun.security.provider.PolicyParser$PermissionEntry: java.lang.String signedBy>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.URLClassLoader: java.lang.Package definePackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.PropertyPermission: void <init>(java.lang.String,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.SerialNumber: java.lang.String toString()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.Manifest: java.util.jar.Attributes getTrustedAttributes(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Hashtable: java.lang.Object get(java.lang.Object)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.X500Name: void parseDN(java.lang.String,java.util.Map)>[34@L916] new sun.security.x509.RDN}.<sun.security.x509.RDN: java.lang.String canonicalString>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: void updateSigners(java.security.CodeSigner[],java.util.Hashtable,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r61}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>[1@L854] new java.util.logging.LogManager$LoggerContext$1}.<java.util.logging.LogManager$LoggerContext$1: java.lang.String val$name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.Extension: void <init>(char,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC1779DN(java.util.Map)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Inet6Address: void <init>(java.lang.String,byte[],java.lang.String)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet complement(int,int)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253Name(java.util.Map)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Policy$2: java.security.Policy run()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassCastException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-556}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.AlgorithmDecomposer: java.util.Set decomposeImpl(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: java.lang.String getValue()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>/$c1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DigitList: void set(boolean,java.math.BigInteger,int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.LinkedList: java.lang.String outOfBoundsMsg(int)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: void initialize()>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FixedString: void print(java.lang.Object,java.util.Locale)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r83}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.nio.charset.UnsupportedCharsetException: void <init>(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager$LoggerContext$1: java.lang.Void run()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>[5@L1505] newarray java.lang.String[%intconst1]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.util.StringTokenizer: java.lang.String nextToken(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannel$AbstractUnsafe: void write(java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigDecimal: long[] divRemNegativeLong(long,long)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext$7: void run()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r45}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[173@L889] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.io.File)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean match(java.lang.String,java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseQuotedString(java.io.Reader,java.lang.StringBuilder)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderConfig: java.lang.String expand(java.lang.String)>[5@L282] new sun.security.jca.ProviderConfig$3}.<sun.security.jca.ProviderConfig$3: java.lang.String val$value>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[77@L307] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkWrite(java.lang.String)>[0@L979] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.JarIndex: void addToList(java.lang.String,java.lang.String,java.util.HashMap)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.String resolveName(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.Attributes$Name: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency$CurrencyNameGetter: java.lang.Object getObject(java.util.spi.LocaleServiceProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.MessageDigest: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObject(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,java.lang.String,java.lang.Object[])>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap: void <init>(int,float)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-540}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r40}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC2253DN(java.util.Map)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r55}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission: void init(int)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.logging.PlatformLogger$LoggerProxy: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI$Parser: int parseAuthority(int,int)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[0@L417] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String privateuse>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void <init>(java.lang.String,int,int,int)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String positivePrefix>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC1779String(java.util.Map)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHostString(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>[36@L898] new java.net.URL}.<java.net.URL: java.lang.String host>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FileNotFoundException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.JceSecurity: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerInputBuffer: sun.security.util.BitArray getUnalignedBitString()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.DefaultFullHttpRequest: java.lang.String toString()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.Attributes: void read(java.util.jar.Manifest$FastInputStream,byte[])>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String[][] getPrincipalInfo(sun.security.provider.PolicyParser$PrincipalEntry,java.security.Principal[])>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayDeque: void addLast(java.lang.Object)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuth(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.WrappedByteBuf: java.lang.String toString()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.jar.JarFile: void <init>(java.lang.String)>[0@L108] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.SocketPermission: void getIP()>/r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509Key: byte[] getEncodedInternal()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r39}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged sun.util.locale.LocaleSyntaxException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath: java.util.Enumeration getResources(java.lang.String,boolean)>[0@L315] new sun.misc.URLClassPath$2}.<sun.misc.URLClassPath$2: java.lang.String val$name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: int[] parsePort(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayList$ListItr: void set(java.lang.Object)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r48}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DateFormat: java.util.Date parse(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CertificateVersion: java.lang.String toString()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerValue: sun.security.util.ObjectIdentifier getOID()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.MissingFormatArgumentException: java.lang.String getMessage()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.IllformedLocaleException: void <init>(java.lang.String,int)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: void getCanonName()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r60}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.AttributedString: void <init>(java.text.AttributedCharacterIterator,int,int,java.text.AttributedCharacterIterator$Attribute[])>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r47}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.Signal: io.netty.util.Signal valueOf(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Hashtable$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.Hashtable$Entry)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: void throwAccessCheckException(java.lang.Object)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,boolean)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.IllegalFormatFlagsException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigInteger: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r82}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: void definePackageInternal(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r66}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r43}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: void <init>(sun.security.util.DerValue)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r38}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.URIName: sun.security.x509.URIName nameConstraint(sun.security.util.DerValue)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[53@L454] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String mode>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.String getCanonicalName()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r90}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>[65@L630] new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString}.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String str>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.ExpiringCache: void put(java.lang.String,java.lang.String)>/r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.AlgorithmDecomposer: java.util.Collection getAliases(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.String getSimpleName()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Package$1: java.lang.Package run()>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r42}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>[12@L1093] new java.util.regex.Matcher}.<java.util.regex.Matcher: java.lang.CharSequence text>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.AttributedString: void setAttributes(java.util.Map,int)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.NoSuchProviderException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r64}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.zip.ZipCoder: byte[] getBytes(java.lang.String)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.AttributeEntry: java.lang.Object getValue()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[15@L1817] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253String(java.util.Map)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig$3: java.lang.String run()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Integer: int parseInt(java.lang.String,int)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency: java.lang.String getSymbol(java.util.Locale)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r52}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r110}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r72}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: boolean isSealed(java.lang.String,java.util.jar.Manifest)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.SerialNumber: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.AlgorithmDecomposer: java.lang.String hashName(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>[18@L699] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String suffix>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: java.util.Locale[] getAvailableLocales()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.MissingFormatArgumentException: java.lang.String getMessage()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r36}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.net.InetAddress: void <clinit>()>[39@L981] new sun.security.action.GetPropertyAction}.<sun.security.action.GetPropertyAction: java.lang.String theProp>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int,java.security.cert.CertPathValidatorException$Reason)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: java.lang.String getID()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.CalendarProviderImpl: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>[0@L84] new java.util.Calendar$Builder}.<java.util.Calendar$Builder: java.lang.String type>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getVariant()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI$Parser: int parseHierarchical(int,int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: void definePackageInternal(java.lang.String,java.util.jar.Manifest,java.net.URL)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: void appendEscape(java.lang.StringBuffer,byte)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r41}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.NormalizerBase$NFCMode: java.lang.String normalize(java.lang.String,int)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Timestamp: java.lang.String toString()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkRead(java.lang.String)>[0@L888] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r57}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVAKeyword: java.lang.String getKeyword(sun.security.util.ObjectIdentifier,int,java.util.Map)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector: java.lang.String newRecord(int)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r45}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r47}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.GregorianCalendar: void computeTime()>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r70}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader$1: void <init>(java.net.URLClassLoader,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.String)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigInteger: java.lang.String toString(int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.IllegalStateException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r45}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.math.BigDecimal,java.util.Locale)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS9Attribute: void throwSingleValuedException()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[21@L69] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.io.File: void <init>(java.net.URI)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.channel.DefaultChannelPipeline: void <init>(io.netty.channel.AbstractChannel)>[7@L87] new io.netty.channel.DefaultChannelPipeline$TailContext}.<io.netty.channel.AbstractChannelHandlerContext: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.AbstractAlgorithmConstraints$1: java.lang.String run()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.CharSequence subSequence(int,int)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[23@L514] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "ArrayIndexNode{NewObj{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>[55@L1875] newarray java.lang.Object[%intconst4]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.util.Currency: java.lang.String getSymbol(java.util.Locale)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuth(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r61}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[32@L678] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/$r38}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getJavaTimeNames(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String getRegion()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.AttributedString$AttributeMap: java.util.Set entrySet()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.lang.ClassNotFoundException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: java.lang.String removePrivateuseVariant(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.UnpooledDirectByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,int,int)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.net.URL findResource(java.lang.String)>[0@L574] new java.net.URLClassLoader$2}.<java.net.URLClassLoader$2: java.lang.String val$name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>[0@L892] new sun.security.action.GetPropertyAction}.<sun.security.action.GetPropertyAction: java.lang.String defaultVal>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r63}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.io.File)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: byte[] getEncodedInfo()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r48}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: int precision(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet complement(int,int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r44}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.security.NoSuchProviderException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add_unchecked(int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayList: java.lang.Object remove(int)>/%native-arraycopy-temp338}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultChannelHandlerContext: void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.util.concurrent.EventExecutor,java.lang.String,io.netty.channel.ChannelHandler)>/name}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$Loader: sun.misc.Resource getResource(java.lang.String,boolean)>[0@L738] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.handler.codec.http.DefaultFullHttpResponse: java.lang.String toString()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendInitialLine(java.lang.StringBuilder,io.netty.handler.codec.http.HttpRequest)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.AccessController: void checkPermission(java.security.Permission)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Collections$1: java.lang.Object next()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC1779String(java.util.Map)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeyword(int,java.util.Map)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>[21@L272] new java.net.URL}.<java.net.URL: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>[26@L409] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getParentFile()>[9@L506] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeScript(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <init>(java.lang.String,boolean)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: void parse(sun.security.util.DerValue)>/$r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>/r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.io.ExpiringCache: void put(java.lang.String,java.lang.String)>[14@L94] new java.io.ExpiringCache$Entry}.<java.io.ExpiringCache$Entry: java.lang.String val>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[10@L992] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.SimpleTimeZone: void decodeStartRule()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.MessageUtils: void err(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig: void <init>(java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[140@L868] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String decode(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: java.lang.String typeName(java.lang.Class)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control$1: java.io.InputStream run()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty unicodeBlockPropertyFor(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.AttributedString: void addAttributeRunData(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>/r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>[19@L81] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r44}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS9Attribute: void throwSingleValuedException()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>[100@L149] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String dn>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r38}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[123@L857] new java.security.UnresolvedPermission}.<java.security.UnresolvedPermission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.util.internal.logging.Log4JLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.AbstractList: void rangeCheckForAdd(int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.MimeType: java.lang.String parseSuffix(java.lang.String)>/r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.util.List getCandidateLocales(java.lang.String,java.util.Locale)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r46}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.lang.String getHostFromNameService(java.net.InetAddress,boolean)>/r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>[2@L879] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.SimpleDateFormat: void zeroPaddingNumber(int,int,int,java.lang.StringBuffer)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigInteger: void <init>(java.lang.String,int)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuthority(java.net.URL)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigInteger: void implMulAddCheck(int[],int[],int,int,int)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI$Parser: int parseIPv4Address(int,int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r43}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: int start(int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.SimpleTimeZone: void decodeEndRule()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>[21@L454] new java.util.StringJoiner}.<java.util.StringJoiner: java.lang.String prefix>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.ResourceBundle: java.util.ResourceBundle getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>[5@L1333] new java.util.ResourceBundle$CacheKey}.<java.util.ResourceBundle$CacheKey: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.String toPattern(boolean)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String positiveSuffix>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>/%native-arraycopy-temp362}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData$2: sun.util.resources.OpenListResourceBundle run()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[28@L517] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,char[],java.util.Formatter$Flags,int,java.util.Locale)>/r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URISyntaxException: java.lang.String getMessage()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.OIDMap$OIDInfo: java.lang.Class getClazz()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS9Attribute: void <init>(sun.security.util.DerValue)>/$r53}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.channel.embedded.EmbeddedEventLoop: io.netty.channel.ChannelFuture register(io.netty.channel.Channel)>[0@L115] new io.netty.channel.DefaultChannelPromise}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.UnresolvedPermissionCollection: void add(java.security.Permission)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: java.lang.String stripLeadingZeros(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayList: void subListRangeCheck(int,int,int)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r74}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[23@L764] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] checkLookupTable(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.UniqueIdentity: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask: void execute()>[17@L1382] newarray java.lang.Object[%intconst1]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<sun.security.util.AlgorithmDecomposer: java.util.Set decompose(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r46}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.CodeSigner: java.lang.String toString()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: int getHexDigit(java.lang.String,int)>/$c3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.util.ArrayDeque: void doubleCapacity()>[20@L162] newarray java.lang.Object[$i5]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.rsa.RSAUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.security.AlgorithmParameters)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.ChannelOutboundBuffer$Entry: int cancel()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: void initialize()>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r38}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.LinkedHashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency: java.lang.String getCurrencyCode()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarFieldValueNamesMapGetter: java.util.Map getObject(java.util.spi.CalendarNameProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>/r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[18@L196] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarFile: byte[] getBytes(java.util.zip.ZipEntry)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultFileRegion: void <init>(java.nio.channels.FileChannel,long,long)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: void <init>(io.netty.util.ResourceLeakDetector,java.lang.Object)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerInputStream: int getLength(int,java.io.InputStream)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r59}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.zip.ZipFile: void <init>(java.io.File,int,java.nio.charset.Charset)>[28@L216] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderName(java.lang.CharSequence)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseLanguage(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[25@L451] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String mode>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r65}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>/%native-arraycopy-temp47}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.AttributedString$AttributeMap: java.util.Set entrySet()>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(long,java.util.Locale)>/$r40}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r67}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.Providers: sun.security.jca.ProviderList beginThreadProviderList(sun.security.jca.ProviderList)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector: void reportLeak(io.netty.util.ResourceLeakDetector$Level)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.nio.charset.CoderResult: java.lang.String toString()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.util.List getCandidateLocales(java.lang.String,java.util.Locale)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Long: long parseLong(java.lang.String,int)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String current()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader$2: void <init>(java.net.URLClassLoader,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.io.UTFDataFormatException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.net.URI: java.net.URI create(java.lang.String)>[0@L850] new java.net.URI}.<java.net.URI: java.lang.String decodedPath>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.PropertyPermission: void <init>(java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r56}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.OIDMap$OIDInfo: java.lang.Class getClazz()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.AbstractByteBuf: java.lang.String toString()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.Logger: void setupResourceInfo(java.lang.String,java.lang.Class)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseString(java.io.Reader,int,int,java.lang.StringBuilder)>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r36}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509Key: byte[] getEncodedInternal()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.IllegalFormatConversionException: java.lang.String getMessage()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuffer: java.lang.AbstractStringBuilder append(java.lang.AbstractStringBuilder)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.reflect.Reflection: boolean isSameClassPackage(java.lang.ClassLoader,java.lang.String,java.lang.ClassLoader,java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String expand(java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.net.URI: java.net.URI create(java.lang.String)>[0@L850] new java.net.URI}.<java.net.URI: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r63}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger getLogger(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.SPILocaleProviderAdapter$1: java.util.spi.LocaleServiceProvider run()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.AbstractAlgorithmConstraints$1: java.lang.Object run()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String describeChar(char)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r39}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r47}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.AbstractStringBuilder)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: void defineString()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: java.lang.String toString()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L271] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.OtherName: java.lang.String toString()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>[0@L1032] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String signedBy>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(double,java.util.Locale)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter: java.util.Formatter$FormatString[] parse(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerValue: java.lang.String getIA5String()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.Utility: java.lang.StringBuffer appendNumber(java.lang.StringBuffer,int,int,int)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r58}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[4@L990] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CurrencyNameProviderImpl: java.lang.String getSymbol(java.lang.String,java.util.Locale)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[16@L994] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.URI: void defineString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.util.Map getDisplayNames(java.lang.String,int,int,java.util.Locale)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String access$1502(java.net.URI,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise await()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/r51}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle: void setExpirationTime(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle$Control)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r38}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.logging.PlatformLogger: void <init>(java.lang.String)>[9@L241] new sun.util.logging.PlatformLogger$DefaultLoggerProxy}.<sun.util.logging.PlatformLogger$LoggerProxy: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[0@L823] new java.net.URL}.<java.net.URL: java.lang.String host>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>[51@L1872] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: void <init>(java.net.URL)>[15@L1351] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.StringBuilder: java.lang.String substring(int,int)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: java.net.URL getBootstrapResource(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarFieldValueNamesMapGetter: java.lang.Object getObject(java.util.spi.LocaleServiceProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC1779String(java.util.Map)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.time.DateTimeException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CRLExtensions: void init(sun.security.util.DerInputStream)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)>/o}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DigitList: long getLong()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName0(java.lang.String,java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.Extension: java.lang.String toString()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>[117@L1543] new java.security.UnresolvedPermission}.<java.security.UnresolvedPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS9Attribute: void derEncode(java.io.OutputStream)>/$r51}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.AlgorithmDecomposer: java.util.Set decomposeOneHash(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r55}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.LinkedHashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$Node group0()>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.IllformedLocaleException: void <init>(java.lang.String,int)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Hashtable$Enumerator: java.lang.Object next()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Collections$SingletonSet: java.util.Iterator iterator()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: void <init>()>[34@L179] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String className>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.reflect.MethodAccessorGenerator: java.lang.String buildInternalSignature()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r51}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27897}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStore$1: java.lang.Object run()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: boolean isFile()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.WrappedByteBuf: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.BitSet: boolean get(int)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CRLImpl: void parse(sun.security.util.DerValue)>[104@L1116] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String dn>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.security.x509.AlgorithmId: java.util.HashMap computeOidTable()>[39@L665] new sun.security.util.ObjectIdentifier}.<sun.security.util.ObjectIdentifier: java.lang.String stringForm>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27767}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.net.URL findResource(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline fireChannelRead(java.lang.Object)>/msg}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.EmptyByteBuf: java.lang.String toString()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r57}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.www.URLConnection: boolean isProxiedHost(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[32@L1825] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[128@L530] new sun.security.provider.PolicyParser$PrincipalEntry}.<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String principalName>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r62}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getTimeZoneNames(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r49}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: void callHandlerAdded0(io.netty.channel.AbstractChannelHandlerContext)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask: void write(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath: java.util.Enumeration findResources(java.lang.String,boolean)>[0@L267] new sun.misc.URLClassPath$1}.<sun.misc.URLClassPath$1: java.lang.String val$name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.AttributedString: java.lang.Object getAttributeCheckRange(java.text.AttributedCharacterIterator$Attribute,int,int,int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.PromiseTask: java.lang.StringBuilder toStringBuilder()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.DateFormatProviderImpl: java.text.DateFormat getInstance(int,int,java.util.Locale)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.AttributedString: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute,int)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager$1: java.lang.Object run()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.CryptoPolicyParser: java.security.spec.AlgorithmParameterSpec getInstance(java.lang.String,java.lang.Integer[])>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.PlatformDependent: long maxDirectMemory0()>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannel: java.lang.String toString()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[99@L1481] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String negativeSuffix>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarFile: java.util.jar.Manifest getManifestFromReference()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[55@L458] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r40}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarVerifier: void <init>(java.lang.String,byte[])>/r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceConfigurationError: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r46}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData: java.util.ResourceBundle getNumberFormatData(java.util.Locale)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext newContext(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)>[0@L95] new io.netty.channel.DefaultChannelHandlerContext}.<io.netty.channel.AbstractChannelHandlerContext: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.PropertyPermissionCollection: void add(java.security.Permission)>[31@L483] new java.util.PropertyPermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.reflect.MethodAccessorGenerator: sun.reflect.MagicAccessorImpl generate(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int,boolean,boolean,java.lang.Class)>/$r48}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void <init>(java.lang.String,int,int,int)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: void defineString()>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.GregorianCalendar: int computeFields(int,int)>/$r63}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.zip.ZipFile: void <init>(java.io.File,int,java.nio.charset.Charset)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r44}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printStackTrace(java.lang.Throwable$PrintStreamOrWriter)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.JdkLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: boolean parsePrivateuse(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void invokeChannelRead(java.lang.Object)>/msg}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName(boolean)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r49}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LocaleExtensions: java.lang.String getUnicodeLocaleType(java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object)>[1@L135] newarray java.lang.Object[%intconst0]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r39}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS9Attributes: java.lang.Object getAttributeValue(sun.security.util.ObjectIdentifier)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>[33@L2678] new java.util.ResourceBundle$Control$1}.<java.util.ResourceBundle$Control$1: java.lang.String val$resourceName>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.security.Policy$2: java.security.Policy run()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253String(java.util.Map)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: java.lang.String get(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.DecoderResult: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: void add0(int,int,java.lang.CharSequence,java.lang.CharSequence)>/value}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.MessageDigest: java.lang.String getAlgorithm()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.AlgorithmDecomposer: java.lang.String hashName(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: java.lang.String get(java.lang.CharSequence)>/r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1774] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object key>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[91@L831] new sun.security.provider.PolicyFile$SelfPermission}.<sun.security.provider.PolicyFile$SelfPermission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.IllformedLocaleException: void <init>(java.lang.String,int)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.spec.EllipticCurve: void checkValidity(java.security.spec.ECField,java.math.BigInteger,java.lang.String)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.StringWriter: void write(java.lang.String,int,int)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.String getCanonicalName()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Package: java.lang.Package getSystemPackage(java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.stream.ChunkedNioFile: void <init>(java.nio.channels.FileChannel,long,long,int)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext$7: void <init>(io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.AbstractChannelHandlerContext,java.lang.Object)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CRLImpl: void <init>(sun.security.util.DerValue)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.HostLocaleProviderAdapter: java.util.spi.LocaleServiceProvider findInstalledProvider(java.lang.Class)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.lang.NullPointerException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JavaUtilJarAccessImpl: java.util.jar.Attributes getTrustedAttributes(java.util.jar.Manifest,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r36}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CertificateExtensions: sun.security.x509.Extension get(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.security.cert.CertPathValidatorException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader$1: java.lang.Class run()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.net.URISyntaxException>}.<java.net.URISyntaxException: java.lang.String input>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigInteger: java.lang.String smallToString(int)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.AbstractCollection: java.lang.Object[] toArray()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.nio.charset.CharsetDecoder: void throwIllegalStateException(int,int)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control$1: void <init>(java.util.ResourceBundle$Control,boolean,java.lang.ClassLoader,java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.NumberFormatProviderImpl: void adjustForCurrencyDefaultFractionDigits(java.text.DecimalFormat,java.text.DecimalFormatSymbols)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigInteger: java.lang.String smallToString(int)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>[0@L692] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String prefix>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.misc.Launcher$AppClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: void initialize()>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringJoiner: java.lang.StringBuilder prepareBuilder()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: boolean matches(java.lang.String)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.io.File getAbsoluteFile()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>[2@L148] new java.security.AlgorithmParameters}.<java.security.AlgorithmParameters: java.lang.String algorithm>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.BitSet: void set(int)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.SPILocaleProviderAdapter$1: java.util.spi.LocaleServiceProvider run()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.util.ArrayDeque: java.lang.Object[] toArray()>[1@L787] newarray java.lang.Object[$i0]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/r72}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency: boolean isPastCutoverDate(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>/$r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>[17@L436] new java.util.Hashtable$Entry}.<java.util.Hashtable$Entry: java.lang.Object key>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.Debug: java.lang.String marshal(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URISyntaxException: java.lang.String getReason()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.Launcher$AppClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/$c2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC1779String(java.util.Map)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.BreakIteratorProviderImpl: java.text.BreakIterator getBreakInstance(java.util.Locale,int,java.lang.String,java.lang.String)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseString(java.io.Reader,int,int,java.lang.StringBuilder)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData: java.util.ResourceBundle getDateFormatData(java.util.Locale)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[59@L704] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[3@L152] new java.net.NetPermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.NormalizerBase$NFKDMode: java.lang.String normalize(java.lang.String,int)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>[1@L159] newarray java.lang.Object[%intconst0]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.util.regex.Matcher: java.lang.String group()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[177@L892] newarray java.lang.Object[%intconst12]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.security.BasicPermission: java.lang.String getCanonicalName()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.AbstractList$Itr: java.lang.Object next()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r48}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean match(java.lang.String,java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.ServiceLoader: void reload()>[2@L219] new java.util.ServiceLoader$LazyIterator}.<java.util.ServiceLoader$LazyIterator: java.lang.String nextName>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>[33@L299] new sun.security.util.JarConstraintsParameters}.<sun.security.util.JarConstraintsParameters: java.lang.String message>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r42}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r39}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-82}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509Key: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: java.lang.String getUnicodeLocaleType(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.nio.charset.IllegalCharsetNameException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[17@L446] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String pad>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.zip.ZipFile: java.util.zip.ZipEntry getZipEntry(java.lang.String,long)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$DomainEntry: void add(sun.security.provider.PolicyParser$KeyStoreEntry)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r46}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector: void <init>(java.lang.String,int,long)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager: void readConfiguration()>/r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String getSelfName()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.HostLocaleProviderAdapter: java.util.spi.LocaleServiceProvider findInstalledProvider(java.lang.Class)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.LocaleExtensions getLocaleExtensions()>[11@L533] new sun.util.locale.LocaleExtensions}.<sun.util.locale.LocaleExtensions: java.lang.String id>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String convertOldISOCodes(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.ByteArrayOutputStream: void <init>(int)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.UnicodeSet: void applyPropertyPattern(sun.text.normalizer.RuleCharacterIterator,java.lang.StringBuffer,sun.text.normalizer.SymbolTable)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringJoiner: java.lang.StringBuilder prepareBuilder()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: void <init>(sun.security.util.DerValue)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-98}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$Flags: java.lang.String toString()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.math.BigInteger,java.util.Locale)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>[28@L1051] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.security.Provider: void putId()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r59}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.SignerInfo: java.util.Set verifyAlgorithms(sun.security.pkcs.SignerInfo[],sun.security.util.JarConstraintsParameters,java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.calendar.CalendarSystem: java.util.Properties getCalendarProperties()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.URIName: void <init>(java.lang.String)>/$r40}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object)>/msg}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>[1@L77] new java.net.URI}.<java.net.URI: java.lang.String decodedPath>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.rsa.RSAUtil$KeyType: sun.security.rsa.RSAUtil$KeyType lookup(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.ExpiringCache: void put(java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>[8@L599] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.SecurityManager: void checkWrite(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: void <clinit>()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void init()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getCachedAddresses(java.lang.String)>/r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress$Cache: java.net.InetAddress$Cache put(java.lang.String,java.net.InetAddress[])>/r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>[7@L893] new sun.security.action.GetPropertyAction}.<sun.security.action.GetPropertyAction: java.lang.String defaultVal>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkWrite(java.lang.String)>[0@L979] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuth(java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-96}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayList$Itr: java.lang.Object next()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r59}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: void <init>(sun.security.util.DerValue)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.LinkedHashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String,java.lang.String,sun.text.normalizer.SymbolTable)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.GregorianCalendar: int computeFields(int,int)>/$r41}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.PatternSyntaxException: void <init>(java.lang.String,java.lang.String,int)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>[0@L311] new sun.util.locale.BaseLocale}.<sun.util.locale.BaseLocale: java.lang.String variant>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[22@L996] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.ChannelInboundHandlerAdapter: void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)>/msg}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: java.lang.CharSequence toCharSequence(java.lang.Object)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CurrencyNameProviderImpl: java.lang.String getDisplayName(java.lang.String,java.util.Locale)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig: void <init>(java.lang.String,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r36}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r54}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TreeMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.util.TreeMap$Entry)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>[20@L444] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultChannelPipeline$HeadContext: void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r55}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: int escape(boolean,boolean,boolean)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/$r42}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AdaptiveRecvByteBufAllocator: void <init>(int,int,int)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.lang.String getName()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[40@L477] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r45}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap$TreeNode: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerValue: java.lang.String getGeneralString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r43}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AdaptiveRecvByteBufAllocator: void <init>(int,int,int)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String,boolean)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.net.URI: java.net.URI create(java.lang.String)>[0@L850] new java.net.URI}.<java.net.URI: java.lang.String authority>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.URI: void appendEncoded(java.lang.StringBuffer,char)>/r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>[0@L1028] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String normalizedPattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry: java.lang.Object getValue()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r47}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[25@L75] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>[12@L280] new io.netty.channel.AbstractChannelHandlerContext$7}.<io.netty.channel.AbstractChannelHandlerContext$7: java.lang.Object val$msg>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void init()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[0@L1368] new java.net.URL}.<java.net.URL: java.lang.String file>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[55@L204] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String getScript()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PolicyUtil: java.io.InputStream getInputStream(java.net.URL)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask: void execute()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String,int)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry: void <init>(io.netty.handler.codec.http.DefaultHttpHeaders,int,java.lang.CharSequence,java.lang.CharSequence)>/value}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>[36@L898] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$Loader: sun.misc.Resource getResource(java.lang.String,boolean)>[0@L738] new java.net.URL}.<java.net.URL: java.lang.String host>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.SocketPermission: void getIP()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.SecureClassLoader: java.security.ProtectionDomain getProtectionDomain(java.security.CodeSource)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.UnicodeLocaleExtension: void <clinit>()>[5@L50] new sun.util.locale.UnicodeLocaleExtension}.<sun.util.locale.Extension: java.lang.String value>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r113}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getDisplayNameImpl(java.lang.String,int,int,int,java.util.Locale,boolean)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarFile: boolean isKnownNotToHaveSpecialAttributes()>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>[74@L132] new sun.security.x509.IPAddressName}.<sun.security.x509.IPAddressName: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253Name(java.util.Map)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[3@L540] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkLink(java.lang.String)>[5@L835] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask: void init(io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask,io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String toString()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayList: void rangeCheckForAdd(int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: void <init>()>[34@L179] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String argument>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>[20@L60] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[42@L225] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r62}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r64}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void <init>(java.lang.String,sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator,int)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.SimpleTimeZone: void decodeStartRule()>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.DecimalFormatSymbolsProviderImpl: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>[4@L85] new java.text.DecimalFormatSymbols}.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<java.security.Signature: java.security.Signature getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>[10@L288] new java.security.Signature$Delegate}.<java.security.Signature: java.lang.String algorithm>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.net.URI create(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI$Parser: void fail(java.lang.String,int)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>[93@L122] new sun.util.locale.UnicodeLocaleExtension}.<sun.util.locale.Extension: java.lang.String value>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<org.fengfei.lanproxy.server.config.web.ApiRoute: org.fengfei.lanproxy.server.config.web.ResponseInfo run(io.netty.handler.codec.http.FullHttpRequest)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Parts: void <init>(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>[8@L599] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<java.security.Security: void initialize()>[118@L147] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.ServiceLoader: void access$100(java.lang.Class,java.lang.String,java.lang.Throwable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.BlockingOperationException: void <init>(java.lang.String)>/s}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.Currency$1: java.lang.Void run()>[106@L257] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String internalize(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.util.Locale initDefault()>/r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.System: java.lang.String getenv(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.action.GetPropertyAction: java.lang.Object run()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r101}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>[13@L181] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String dn>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r114}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getAbsoluteFile()>[7@L581] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.UnparseableExtension: void <init>(sun.security.x509.Extension,java.lang.Throwable)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r63}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: void <init>(java.util.regex.Pattern,java.lang.CharSequence)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.logging.LogManager: void readConfiguration()>[44@L1297] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.jar.JarFile: byte[] getBytes(java.util.zip.ZipEntry)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int)>/poolName}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r51}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Parts: void <init>(java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.Locale$Builder: void <init>()>[1@L2373] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String variant>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.AlgorithmDecomposer: java.util.Set decomposeImpl(java.lang.String)>/r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String parentOrNull(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: java.util.Locale[] getAvailableLocales()>/r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.String resolveName(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String userInfo>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<io.netty.util.concurrent.PromiseTask: java.util.concurrent.Callable toCallable(java.lang.Runnable,java.lang.Object)>[0@L24] new io.netty.util.concurrent.PromiseTask$RunnableAdapter}.<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.Object result>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-144}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r53}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TreeSet: boolean add(java.lang.Object)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r58}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AdaptiveRecvByteBufAllocator: void <init>(int,int,int)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control$1: java.io.InputStream run()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r43}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.Extension: void setValue(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[56@L231] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigInteger: void <clinit>()>/$r70}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Double: java.lang.String toHexString(double)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Vector: void addElement(java.lang.Object)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.logging.PlatformLogger: void <init>(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.reflect.AccessorGenerator: short unboxingMethodForPrimitiveType(java.lang.Class)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getJavaTimeNames(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: void getCanonName()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r73}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r59}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: void defineString()>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.calendar.ZoneInfoFile$1: java.lang.Object run()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: void parse(sun.security.util.DerValue)>[39@L659] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String dn>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.math.BigInteger: void toString(java.math.BigInteger,java.lang.StringBuilder,int,int)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.stream.ChunkedNioFile: void <init>(java.nio.channels.FileChannel,long,long,int)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r38}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.Debug: java.lang.String marshal(java.lang.String)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureUtil: java.security.AlgorithmParameters createAlgorithmParameters(java.lang.String,byte[])>/r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,boolean)>/$c3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>/r43}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.Locale$Builder: void <init>()>[1@L2373] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String script>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$c8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Collections: java.util.Iterator singletonIterator(java.lang.Object)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/r89}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.ByteBufUtil: void <clinit>()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>[1@L3791] new java.text.DigitList}.<java.text.DigitList: char[] digits>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile: java.security.cert.Certificate[] getCertificates(java.security.KeyStore,java.lang.String,sun.security.provider.PolicyFile$PolicyInfo)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHostString(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigInteger: void implSquareToLenChecks(int[],int,int[],int)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r112}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.jar.JarFile: java.util.zip.ZipEntry getEntry(java.lang.String)>[2@L253] new java.util.jar.JarFile$JarFileEntry}.<java.util.zip.ZipEntry: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>[83@L377] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.StringJoiner: java.lang.StringBuilder prepareBuilder()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r55}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r68}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String toString()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.Log4JLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.IllegalReferenceCountException: void <init>(java.lang.String)>/message}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: java.lang.String toString()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r81}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: byte[] textToNumericFormatV6(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.lang.String getName()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.MessageUtils: void err(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r40}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.X500Name: void parseDER(sun.security.util.DerInputStream)>[27@L802] new sun.security.x509.RDN}.<sun.security.x509.RDN: java.lang.String canonicalString>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[77@L148] new java.net.URL}.<java.net.URL: java.lang.String file>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[79@L228] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.RDN: java.lang.String toString()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Vector: void removeElementAt(int)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.Manifest: java.util.jar.Attributes getTrustedAttributes(java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String host>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher$ExtClassLoader: java.net.URL[] getExtURLs(java.io.File[])>[16@L204] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r75}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.String toPattern(boolean)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.String toPattern(boolean)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r55}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[42@L452] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.net.RegisteredDomain: java.lang.String getRegisteredDomain(java.lang.String)>/r49}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String,int)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: void <init>()>[43@L183] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String className>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.ByteBufUtil: void <clinit>()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[0@L823] new java.net.URL}.<java.net.URL: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>[21@L272] new java.net.URL}.<java.net.URL: java.lang.String query>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<java.util.PropertyPermissionCollection: void add(java.security.Permission)>[31@L483] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toTitleString(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Properties: java.lang.String getProperty(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.RuntimePermission: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.io.FileNotFoundException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[47@L577] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r38}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.util.MissingFormatWidthException>}.<java.util.MissingFormatWidthException: java.lang.String s>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.buffer.AbstractByteBuf: java.lang.String toString()>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>/$r38}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>/r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addPerms(java.security.Permissions,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r52}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap: void <init>(int,float)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.Log4JLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>/argA}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r103}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r38}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getEncAlgFromSigAlg(java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.AttributedString: java.lang.Object access$400(java.text.AttributedString,java.text.AttributedCharacterIterator$Attribute,int,int,int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[44@L684] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r56}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureUtil: java.security.AlgorithmParameters createAlgorithmParameters(java.lang.String,byte[])>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getLanguage()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Vector: java.lang.Object elementData(int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: void defineString()>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r79}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: void <clinit>()>/$r36}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void <init>(java.util.Formatter,java.util.regex.Matcher)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.DNSName: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: void initialize(java.util.Locale)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.logging.PlatformLogger: void info(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS7: void parse(sun.security.util.DerInputStream,boolean)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[134@L444] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String hostname>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[38@L222] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData: sun.util.resources.OpenListResourceBundle getCurrencyNames(java.util.Locale)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: byte[] getEncodedInfo()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FixedString: java.lang.String toString()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuilder: java.lang.String substring(int)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency: java.util.Currency getInstance(java.util.Locale)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.ApiRoute: org.fengfei.lanproxy.server.config.web.ResponseInfo run(io.netty.handler.codec.http.FullHttpRequest)>[9@L74] new java.net.URI}.<java.net.URI: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CertificateExtensions: void parseExtension(sun.security.x509.Extension)>/$r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r54}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: void defineString()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r43}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.VirtualMachineError: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r65}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.Extension: java.lang.String getValue()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>[98@L383] new sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint}.<sun.security.util.DisabledAlgorithmConstraints$Constraint: java.lang.String algorithm>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>[13@L181] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getJavaTimeDisplayName(java.lang.String,int,int,int,java.util.Locale)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[99@L1481] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String positiveSuffix>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Collections$1: void <init>(java.lang.Object)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: java.util.HashMap computeOidTable()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <init>(int)>[3@L153] newarray java.lang.Object[i0]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher$Transform: boolean matches(java.lang.String,java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.util.ResourceLeakDetector: io.netty.util.ResourceLeak open(java.lang.Object)>[25@L217] new io.netty.util.ResourceLeakDetector$DefaultResourceLeak}.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String creationRecord>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerValue: java.math.BigInteger getBigInteger()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringCoding: byte[] encode(char[],int,int)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r69}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>[63@L215] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.Class: java.util.Map enumConstantDirectory()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.UnresolvedPermission: void <init>(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate[])>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.UnknownFormatConversionException: java.lang.String getMessage()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253String(java.util.Map)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.AbstractByteBuf: void <init>(int)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.DecoderResult: void <clinit>()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r50}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r43}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.util.ResourceBundle$Control)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[21@L199] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String region>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarFieldValueNameGetter: java.lang.Object getObject(java.util.spi.LocaleServiceProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerValue: java.lang.String getBMPString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r77}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.time.Month: java.time.Month of(int)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.lang.IllegalArgumentException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.BaseLocale$1)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Collections: java.util.Set singleton(java.lang.Object)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>/$r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.DecoderResult: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r48}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.zip.ZipFile: java.util.zip.ZipEntry getZipEntry(java.lang.String,long)>[0@L576] new java.util.zip.ZipEntry}.<java.util.zip.ZipEntry: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.PooledByteBufAllocator: int validateAndCalculateChunkSize(int,int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void <init>(java.lang.String,java.util.Locale)>/r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r49}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r66}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.JdkLogger: void debug(java.lang.String,java.lang.Object)>/arg}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath: sun.misc.Resource getResource(java.lang.String,boolean)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.LinkedList: void linkLast(java.lang.Object)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r41}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.util.zip.ZipException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class,java.lang.ClassLoader)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void init()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>/r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>[12@L303] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkUserInfo(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.PrintWriter: void println(java.lang.Object)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.time.LocalDate: java.time.LocalDate create(int,int,int)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.io.File getCanonicalFile()>/r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/r39}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.lang.String getCanonicalPath()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>[55@L633] newarray java.lang.Object[%intconst4]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.lang.Integer: int parseInt(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.OtherName: java.lang.String toString()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayDeque: void doubleCapacity()>/%native-arraycopy-temp170}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarFile: boolean isKnownNotToHaveSpecialAttributes()>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.RDN: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r46}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r44}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r89}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.ChannelOutboundBuffer: boolean remove0(java.lang.Throwable,boolean)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: int[] parsePort(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void checkText()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r73}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r73}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/r50}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannel$AbstractUnsafe: void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.calendar.CalendarSystem: java.util.Properties getCalendarProperties()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.Debug: void <clinit>()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig: java.security.Provider getProvider()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI$Parser: void fail(java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.UniqueName: java.lang.String name()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.CryptoPolicyParser: java.security.spec.AlgorithmParameterSpec getInstance(java.lang.String,java.lang.Integer[])>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.String getCanonicalName()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CRLExtensions: void init(sun.security.util.DerInputStream)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.PromiseTask: io.netty.util.concurrent.Promise setSuccessInternal(java.lang.Object)>/result}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.Signal: void <init>(java.lang.String)>/name}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS9Attributes: java.lang.Object getAttributeValue(sun.security.util.ObjectIdentifier)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[72@L704] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[1@L264] new java.util.LinkedHashMap$Entry}.<java.util.HashMap$Node: java.lang.Object key>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r38}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27851}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DigitList: long getLong()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.ApiRoute: org.fengfei.lanproxy.server.config.web.ResponseInfo run(io.netty.handler.codec.http.FullHttpRequest)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String getStorePassURL()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>[16@L1711] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: void read(java.io.Reader)>[109@L220] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.LinkedHashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.MessageDigest: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.math.BigInteger: void <clinit>()>[195@L3938] newarray java.lang.String[%intconst86]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LocaleExtensions: java.lang.String getID()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String match(java.lang.String)>/$r43}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.lang.RuntimeException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.jar.JarFile: boolean isKnownNotToHaveSpecialAttributes()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r69}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.logging.PlatformLogger: void warning(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.SimpleTimeZone: void decodeStartRule()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayList: void rangeCheck(int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Integer: int parseInt(java.lang.String,int)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.LinkedHashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarFile: boolean isKnownNotToHaveSpecialAttributes()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-292}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void <init>(java.util.Formatter,java.util.regex.Matcher)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void <init>(java.lang.String,int,int,int)>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r42}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.lang.NoClassDefFoundError>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[52@L689] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig: java.security.Provider getProvider()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.URIName: void <init>(java.lang.String)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVAKeyword: boolean isCompliant(int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String)>[21@L186] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.io.FilePermission: java.lang.String getActions(int)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap$Node: java.lang.Object getValue()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r41}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r41}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.Package: java.lang.Package defineSystemPackage(java.lang.String,java.lang.String)>[0@L570] new java.lang.Package$1}.<java.lang.Package$1: java.lang.String val$iname>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>/r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[35@L1388] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.misc.IOUtils: byte[] readExactlyNBytes(java.io.InputStream,int)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r39}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r48}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.LinkedList$ListItr: java.lang.Object next()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.lang.Package definePackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderList: java.lang.String toString()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.SimpleTimeZone: void decodeEndRule()>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.String expandAffix(java.lang.String,java.lang.StringBuffer)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r44}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String getPath()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS7: void parse(sun.security.util.DerInputStream,boolean)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>[100@L149] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$Node sequence(java.util.regex.Pattern$Node)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.VersionInfo: sun.text.normalizer.VersionInfo getInstance(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[24@L216] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.IllformedLocaleException: void <init>(java.lang.String,int)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>[21@L454] new java.util.StringJoiner}.<java.util.StringJoiner: java.lang.String delimiter>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: void defineString()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r54}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector: void reportLeak(io.netty.util.ResourceLeakDetector$Level)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.time.Instant: java.time.Instant from(java.time.temporal.TemporalAccessor)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry: java.lang.String getValue()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet getInclusions(int)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: void defineString()>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseHexString(java.io.Reader,int)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask$1: io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask newObject(io.netty.util.Recycler$Handle)>[0@L939] new io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask}.<io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask: java.lang.Object msg>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)>/o}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r53}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Package: void <init>(java.lang.String,java.util.jar.Manifest,java.net.URL,java.lang.ClassLoader)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkExternalForm(java.net.URL)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[44@L453] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String pad>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.URI: java.net.URI create(java.lang.String)>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String expand(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String fromURIPath(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>[3@L937] new sun.misc.FileURLMapper}.<sun.misc.FileURLMapper: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.StringTokenizer: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: void checkDuplicateName(java.lang.String)>/name}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Package$1: java.lang.Package run()>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerInputStream: int getLength(int,java.io.InputStream)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayList: void add(int,java.lang.Object)>/%native-arraycopy-temp491}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>[26@L2571] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: java.lang.String getActions(int)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency: void info(java.lang.String,java.lang.Throwable)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.Collections: java.util.Iterator singletonIterator(java.lang.Object)>[0@L4673] new java.util.Collections$1}.<java.util.Collections$1: java.lang.Object val$e>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.util.IllegalReferenceCountException: void <init>(int,int)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringCoding: byte[] encode(char[],int,int)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void expandAffixes()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Exception: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.PooledByteBufAllocator: int validateAndCalculatePageShifts(int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.security.InvalidParameterException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.SunEntries: java.io.File getDeviceFile(java.net.URL)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void access$1800(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/x1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.BasicPermission: void init(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurityManager: javax.crypto.CryptoPermission getCryptoPermission(java.lang.String)>[98@L191] new javax.crypto.CryptoPermission}.<javax.crypto.CryptoPermission: java.lang.String alg>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.io.File: void <init>(java.net.URI)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r40}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DigitList: double getDouble()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[75@L224] new java.security.SecurityPermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class,java.lang.ClassLoader)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigInteger,java.lang.StringBuffer,java.text.FieldPosition)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TreeMap$Entry: java.lang.Object getValue()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: char[] addZeros(char[],int)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.security.CodeSigner[] getSigners(sun.security.pkcs.SignerInfo[],sun.security.pkcs.PKCS7)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$CacheKey: void <init>(java.lang.String,java.util.Locale,java.lang.ClassLoader)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r100}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r44}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.security.CodeSigner[] getSigners(sun.security.pkcs.SignerInfo[],sun.security.pkcs.PKCS7)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[0@L417] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String region>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.util.internal.PlatformDependent0: void <clinit>()>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ObjectIdentifier: void checkOtherComponent(int,java.math.BigInteger)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r62}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>/r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$CacheKey: void setFormat(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[44@L453] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String mode>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Timestamp: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkDelete(java.lang.String)>[0@L1007] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.AbstractAlgorithmConstraints: boolean checkAlgorithm(java.util.List,java.lang.String,sun.security.util.AlgorithmDecomposer)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r53}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.CodeSigner: java.lang.String toString()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.security.Security: void initialize()>[107@L144] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: void definePackageInternal(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKey(java.lang.String,int,int,boolean)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/r58}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap$Node: java.lang.Object getKey()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LoggingPermission: void <init>(java.lang.String,java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void intArrayAppend(java.lang.StringBuffer,int[])>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r65}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r51}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath: java.util.Enumeration findResources(java.lang.String,boolean)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: boolean parsePrivateuse(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r88}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader$1: java.lang.Class run()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>/r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName(boolean)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: java.lang.String toString()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: void appendFragment(java.lang.StringBuffer,java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.Logger: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String,java.lang.Class)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.ChannelOutboundBuffer: void close(java.nio.channels.ClosedChannelException)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.reflect.MethodAccessorGenerator: java.lang.String buildInternalSignature()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$CacheKey: java.lang.String getFormat()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: void encode(int,int,java.lang.StringBuilder)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.io.IOException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Vector: void removeElementAt(int)>/%native-arraycopy-temp104}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>[34@L190] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[22@L996] new java.util.PropertyPermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.time.temporal.ValueRange: long checkValidValue(long,java.time.temporal.TemporalField)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[46@L691] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Properties: java.lang.String getProperty(java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r100}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addPerms(java.security.Permissions,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r40}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CRLEntryImpl: void <init>(sun.security.util.DerValue)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[0@L823] new java.net.URL}.<java.net.URL: java.lang.String file>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r44}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: void cacheAddresses(java.lang.String,java.net.InetAddress[],boolean)>/r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Inet6Address: java.lang.String getHostAddress()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.www.ParseUtil: byte unescape(java.lang.String,int)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: void <init>(java.net.URI)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.SimpleTimeZone: void <init>(int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Provider: java.lang.String[] getTypeAndAlgorithm(java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.logging.PlatformLogger: void info(java.lang.String,java.lang.Throwable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ReferenceCountUtil: void safeRelease(java.lang.Object)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher$Transform: boolean matches(java.lang.String,java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String getKeyStoreUrl()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeLanguage(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String fromURIPath(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.security.AlgorithmParameters,sun.security.util.ConstraintsParameters)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.lang.AssertionError>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r36}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: java.lang.String get(java.lang.String,java.lang.String)>/def}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r76}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.security.cert.CertificateException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.ArrayList$SubList$1: java.lang.Object next()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.WeakHashMap: void <init>(int,float)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline addLast(io.netty.util.concurrent.EventExecutorGroup,io.netty.channel.ChannelHandler[])>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String compose(java.lang.String,boolean,int)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData: boolean setSupplementary(java.lang.String,sun.util.resources.ParallelListResourceBundle)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253String(java.util.Map)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$Node group0()>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.lang.Class defineClass(java.lang.String,sun.misc.Resource)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>[15@L169] newarray java.lang.Object[%intconst1]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.io.File: java.io.File getAbsoluteFile()>/r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.String getCanonicalName()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.UnpooledDirectByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,int,int)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r47}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[161@L453] new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString}.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String str>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Object)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.AttributedString: void addAttributeImpl(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>[21@L454] new java.util.StringJoiner}.<java.util.StringJoiner: java.lang.String emptyValue>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.StringCoding: byte[] encode(char[],int,int)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.EDIPartyName: java.lang.String toString()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[46@L120] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void <init>(java.lang.String,int,int,int)>[18@L697] new java.util.Calendar$Builder}.<java.util.Calendar$Builder: java.lang.String type>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[43@L192] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String access$2202(java.net.URI,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27799}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.Logger: void <init>(java.lang.String,java.lang.String,java.lang.Class,java.util.logging.LogManager,boolean)>/r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.Object cast(java.lang.Object)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[134@L444] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String cname>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Package: java.lang.Package getSystemPackage(java.lang.String)>/r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: void implInit(javax.crypto.CipherSpi,int,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.AlgorithmParameters,java.security.SecureRandom)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.concurrent.atomic.AtomicLongFieldUpdater$LockedUpdater: java.lang.RuntimeException accessCheckException(java.lang.Object)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>[14@L1081] new javax.crypto.CryptoPermission}.<javax.crypto.CryptoPermission: java.lang.String alg>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "ArrayIndexNode{NewObj{<sun.security.util.AlgorithmDecomposer: java.util.Collection getAliases(java.lang.String)>[14@L149] newarray java.lang.String[%intconst4]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: java.lang.String[] getPackages(java.lang.String)>[6@L1480] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r98}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: void encode(int,int,java.lang.StringBuilder)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.net.URI: java.net.URI create(java.lang.String)>[0@L850] new java.net.URI}.<java.net.URI: java.lang.String fragment>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.String: java.lang.String toUpperCase()>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Provider: void putId()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.JdkLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerValue: java.lang.String getPrintableString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormatSymbols: java.lang.String getInternationalCurrencySymbol()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.IllegalReferenceCountException: void <init>(int,int)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.ContentInfo: byte[] getData()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.util.Enumeration findResources(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DigitList: long getLong()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.util.AbstractCollection: java.lang.Object[] toArray()>[1@L136] newarray java.lang.Object[$i0]}}" [fillcolor=khaki1,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[39@L113] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[21@L1381] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.handler.codec.DecoderResult: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData: sun.util.resources.OpenListResourceBundle getSupplementary(java.lang.String,java.util.Locale)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>[54@L355] new sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint}.<sun.security.util.DisabledAlgorithmConstraints$Constraint: java.lang.String algorithm>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r47}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC1779Name(java.util.Map)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String,int)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509Key: java.lang.String toString()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkUserInfo(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI$Parser: java.lang.String substring(int,int)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[46@L479] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[84@L155] new java.net.URL}.<java.net.URL: java.lang.String file>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap$TreeNode: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.JarIndex: void read(java.io.InputStream)>/r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.EDIPartyName: java.lang.String toString()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509Key: java.security.PublicKey buildX509Key(sun.security.x509.AlgorithmId,sun.security.util.BitArray)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/c6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Base64$Decoder: int decode0(byte[],int,int,byte[])>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[3@L207] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<io.netty.channel.ChannelOutboundBuffer$Entry$1: io.netty.channel.ChannelOutboundBuffer$Entry newObject(io.netty.util.Recycler$Handle)>[0@L764] new io.netty.channel.ChannelOutboundBuffer$Entry}.<io.netty.channel.ChannelOutboundBuffer$Entry: java.lang.Object msg>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r65}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.PlatformDependent: boolean isWindows0()>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r42}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.util.Calendar,char,java.util.Locale)>/r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseExtlangs(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.MissingFormatArgumentException: java.lang.String getMessage()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r108}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: void parseDN(java.lang.String,java.util.Map)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.net.URL toURL()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1789] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<sun.security.x509.URIName: void <init>(java.lang.String)>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r62}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r41}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FileURLMapper: java.lang.String getPath()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CurrencyNameProviderImpl: java.lang.String getString(java.lang.String,java.util.Locale)>/r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class,java.lang.ClassLoader)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigDecimal: boolean commonNeedIncrement(int,int,int,boolean)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.LinkedList: void linkBefore(java.lang.Object,java.util.LinkedList$Node)>[1@L158] new java.util.LinkedList$Node}.<java.util.LinkedList$Node: java.lang.Object item>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.provider.RuleBasedBreakIterator: byte[] readFile(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayList: void subListRangeCheck(int,int,int)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.Manifest: java.util.jar.Attributes getTrustedAttributes(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String groupname(int)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.security.cert.CRLException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.net.MalformedURLException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.HashMap: java.lang.Object get(java.lang.Object)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r56}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: void getCanonName()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r49}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.logging.PlatformLogger$JavaLoggerProxy: void <init>(java.lang.String,sun.util.logging.PlatformLogger$Level)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.UniqueName: void <init>(java.util.concurrent.ConcurrentMap,java.lang.String,java.lang.Object[])>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.ObjectStreamField: java.lang.String getClassSignature(java.lang.Class)>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r71}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: int escape(boolean,boolean,boolean)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>/argA}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27939}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeExtension(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>/$r42}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.util.ManifestEntryVerifier: sun.security.util.JarConstraintsParameters getParams(java.util.Map,java.util.Map)>[8@L270] new sun.security.util.JarConstraintsParameters}.<sun.security.util.JarConstraintsParameters: java.lang.String message>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r74}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigDecimal,java.lang.StringBuffer,java.text.FieldPosition)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CurrencyNameProviderImpl: java.lang.String getDisplayName(java.lang.String,java.util.Locale)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Policy$2: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.OtherName: sun.security.x509.GeneralNameInterface getGNI(sun.security.util.ObjectIdentifier,byte[])>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.ChannelPipelineException: void <init>(java.lang.String,java.lang.Throwable)>/message}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[0@L823] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.util.Vector: void <init>(int,int)>[12@L138] newarray java.lang.Object[i0]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String scheme>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseRegion(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.zip.ZipFile: java.lang.String getName()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.SunEntries: java.io.File getDeviceFile(java.net.URL)>[26@L386] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/request}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Inet4Address: java.lang.String getHostAddress()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.JarFilter: boolean accept(java.io.File,java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.logging.PlatformLogger$JavaLoggerProxy: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC1779DN(java.util.Map)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r110}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.MessageUtils: void err(java.lang.String)>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.BufferedReader: java.lang.String readLine(boolean)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle findBundleInCache(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle$Control)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.ChannelOutboundBuffer$Entry: io.netty.channel.ChannelOutboundBuffer$Entry newInstance(java.lang.Object,int,long,io.netty.channel.ChannelPromise)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: void callHandlerAdded0(io.netty.channel.AbstractChannelHandlerContext)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>[21@L454] new java.util.StringJoiner}.<java.util.StringJoiner: java.lang.StringBuilder value>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[28@L676] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[25@L451] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String pad>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.X500Name: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r45}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.zip.ZipEntry: java.lang.String getName()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.MessageDigest: java.lang.String toString()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>[1@L1569] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String region>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.BaseLocale$1)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>[13@L181] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String rfc1779Dn>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.channel.AbstractChannel: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r40}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean match(java.lang.String,java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Signature: boolean isSpi(java.security.Provider$Service)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[36@L452] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String mode>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>[67@L864] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI$Parser: void parse(boolean)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$i1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry: java.lang.String getKey()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TreeMap: java.lang.Object get(java.lang.Object)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.CurveDB: java.lang.String[] getNamesByOID(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.UTF16: java.lang.StringBuffer append(java.lang.StringBuffer,int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>[26@L733] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>/r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.ParsingException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigDecimal,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence,int,int)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[68@L701] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.SerialNumber: java.lang.String toString()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String query>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.provider.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.embedded.EmbeddedChannel$LastInboundHandler: void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)>/msg}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderConfig$1: java.lang.Boolean run()>[0@L105] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FileURLMapper: java.lang.String getPath()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS7: void parseOldSignedData(sun.security.util.DerValue)>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.Attributes$Name: java.lang.String toString()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.BasicPermissionCollection: void add(java.security.Permission)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.util.zip.ZipError>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.jca.Providers: sun.security.jca.ProviderList beginThreadProviderList(sun.security.jca.ProviderList)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: void initialize()>/$r64}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager: void checkLink(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/r38}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String getCountry()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>[25@L455] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.rsa.RSAUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.security.AlgorithmParameters)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: double parseDouble(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String access$1002(java.net.URI,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Hashtable: void <init>(int,float)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.HostLocaleProviderAdapter: java.util.spi.LocaleServiceProvider findInstalledProvider(java.lang.Class)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: java.lang.String typeName(java.lang.Class)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class$Atomic: long objectFieldOffset(java.lang.reflect.Field[],java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigInteger: void implSquareToLenChecks(int[],int,int[],int)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.lang.Class defineClass(java.lang.String,sun.misc.Resource)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[87@L554] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged sun.security.pkcs.ParsingException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.channel.ChannelOutboundBuffer: java.lang.Object current()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.Locale$Builder: void <init>()>[1@L2373] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String region>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r43}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.security.SignatureException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.zip.ZipFile: java.lang.String access$800(java.util.zip.ZipFile)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveFile(java.net.URL,java.lang.String)>[10@L1296] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.URI$Parser: int parseServer(int,int)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String decode(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeExtension(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Properties: java.lang.String getProperty(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassNotFoundException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r91}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.PooledByteBufAllocator: void <init>(boolean,int,int,int,int,int,int,int)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.lang.NumberFormatException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.provider.BreakIteratorProviderImpl: java.text.BreakIterator getBreakInstance(java.util.Locale,int,java.lang.String,java.lang.String)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>[7@L1102] newarray java.lang.String[$i0]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.DataInputStream: java.lang.String readUTF(java.io.DataInput)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseQuotedString(java.io.Reader,java.lang.StringBuilder)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[60@L297] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.URI: java.lang.String access$002(java.net.URI,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r65}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: java.lang.String typeName(java.lang.Class)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.zip.ZipInputStream: void readEnd(java.util.zip.ZipEntry)>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r76}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.text.ParseException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>[52@L98] new sun.util.locale.Extension}.<sun.util.locale.Extension: java.lang.String value>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.CertificateX509Key: java.lang.String toString()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader: void access$300(java.lang.Class,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>[0@L1054] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String pattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r82}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.RDN: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String decode(java.lang.String)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.ChannelOutboundBuffer: boolean remove()>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(long)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.BasicPermission: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r52}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[4@L1369] new java.net.URL}.<java.net.URL: java.lang.String host>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/%taint-temp-24054}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[140@L447] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String cname>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC1779String(java.util.Map)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(long)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: void initialize(java.util.Locale)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringIndexOutOfBoundsException: void <init>(int)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: java.lang.String removePrivateuseVariant(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r36}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: void initialize()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.PropertyPermissionCollection: void add(java.security.Permission)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[1@L1418] newarray java.lang.String[$i0]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void <init>()>[7@L299] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.AttributedString$AttributeMap: java.util.Set entrySet()>/r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.JdkLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>/argA}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName0(java.lang.String,boolean)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.util.UnknownFormatConversionException: java.lang.String getMessage()>[1@L66] newarray java.lang.Object[%intconst0]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayList: boolean addAll(java.util.Collection)>/%native-arraycopy-temp206}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[4@L990] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[10@L992] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r54}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r120}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.HostLocaleProviderAdapter: java.util.spi.LocaleServiceProvider findInstalledProvider(java.lang.Class)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: javax.crypto.CryptoPermission getConfiguredPermission(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Policy: java.security.Policy getPolicyNoCheck()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>[0@L162] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.nio.charset.MalformedInputException: java.lang.String getMessage()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[0@L417] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String script>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask: void execute()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>/r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission: void init(int)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,boolean)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.UnicodeSet: void applyPropertyPattern(sun.text.normalizer.RuleCharacterIterator,java.lang.StringBuffer,sun.text.normalizer.SymbolTable)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ref.SoftReference: java.lang.Object get()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.LinkedHashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStore: java.lang.String getDefaultType()>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: void <init>(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate[])>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.calendar.BaseCalendar: int getMonthLength(sun.util.calendar.CalendarDate)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.JarIndex: void read(java.io.InputStream)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509AttributeName: java.lang.String getSuffix()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r101}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r62}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.io.FileInputStream: void <init>(java.lang.String)>[1@L93] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URISyntaxException: java.lang.String getMessage()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FixedString: void <init>(java.util.Formatter,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: void incWaiters()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r61}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultFileRegion: void <init>(java.nio.channels.FileChannel,long,long)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r65}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarFile: void <init>(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27801}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.NormalizerImpl: java.lang.String convert(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void <init>(java.lang.String,java.lang.String[])>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendInitialLine(java.lang.StringBuilder,io.netty.handler.codec.http.HttpRequest)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: java.lang.String match(java.lang.String)>[18@L812] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[1@L120] newarray java.lang.Object[%intconst0]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource checkResource(java.lang.String,boolean,java.util.jar.JarEntry)>[0@L970] new java.net.URL}.<java.net.URL: java.lang.String host>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuth(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>[0@L535] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String suffix>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.math.BigInteger: void implMulAddCheck(int[],int[],int,int,int)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>[90@L1557] newarray java.lang.String[i25]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<sun.misc.URLClassPath$FileLoader: java.net.URL findResource(java.lang.String,boolean)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.util.ResourceLeakDetector: io.netty.util.ResourceLeak open(java.lang.Object)>[20@L211] new io.netty.util.ResourceLeakDetector$DefaultResourceLeak}.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String creationRecord>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyParser: java.util.Map parseProperties(java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: void <init>()>[43@L183] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String argument>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile$4: java.lang.Void run()>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager: java.util.logging.Logger demandSystemLogger(java.lang.String,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ReflectiveOperationException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add_unchecked(int,int)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r46}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.TypeParameterMatcher: java.lang.Class find0(java.lang.Object,java.lang.Class,java.lang.String)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<io.netty.util.UniqueName: void <init>(java.util.concurrent.ConcurrentMap,java.lang.String,java.lang.Object[])>[13@L51] newarray java.lang.Object[%intconst2]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.util.jar.JarFile: boolean isKnownNotToHaveSpecialAttributes()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.ExpiringCache: java.lang.String get(java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CRLImpl: void <init>(sun.security.util.DerValue)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: boolean parsePrivateuse(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager$LoggerContext: java.util.logging.LogManager$LogNode getNode(java.lang.String)>/r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData$1: java.util.ResourceBundle run()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigInteger: java.lang.String toString()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkDelete(java.lang.String)>[0@L1007] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[35@L184] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[36@L680] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.nio.Buffer: void <init>(int,int,int,int)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: java.util.HashMap computeOidTable()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>[19@L728] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r36}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(int)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.util.AnchorCertificates$1: java.lang.Void run()>[0@L57] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.ServiceLoader$LazyIterator: boolean hasNextService()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.security.Security: java.lang.String getProperty(java.lang.String)>[2@L760] new java.security.SecurityPermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.IllegalFormatCodePointException: java.lang.String getMessage()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CurrencyNameProviderImpl: java.lang.String getSymbol(java.lang.String,java.util.Locale)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>[172@L418] new sun.security.util.DisabledAlgorithmConstraints$UsageConstraint}.<sun.security.util.DisabledAlgorithmConstraints$Constraint: java.lang.String algorithm>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.URI$Parser: java.lang.String substring(int,int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CertificateExtensions: sun.security.x509.Extension get(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.ChoiceFormat: void applyPattern(java.lang.String)>/$c3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String toHex(byte[])>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: void <init>(java.lang.String,int)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.HostLocaleProviderAdapter: java.util.spi.LocaleServiceProvider findInstalledProvider(java.lang.Class)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[24@L468] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.jca.Providers: void endThreadProviderList(sun.security.jca.ProviderList)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigInteger: java.lang.String smallToString(int)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[99@L1481] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String positivePrefix>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{MergedObj{<Merged java.security.InvalidAlgorithmParameterException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r39}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>/$r46}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.Extension: void setValue(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.SimpleTimeZone: void decodeEndRule()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<io.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask: void execute()>[17@L1350] newarray java.lang.Object[%intconst1]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.security.Signature: void initVerify(java.security.PublicKey,java.security.spec.AlgorithmParameterSpec)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.CharSequence subSequence(int,int)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r52}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>[72@L866] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.buffer.AbstractByteBufAllocator: void <init>(boolean)>[9@L91] new io.netty.buffer.EmptyByteBuf}.<io.netty.buffer.EmptyByteBuf: java.lang.String str>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.io.File: java.net.URI toURI()>/r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: void read(java.io.Reader)>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r55}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.action.GetPropertyAction: java.lang.String run()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[134@L444] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.URIName: void <init>(java.lang.String)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: java.util.List getConstraints(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.AccessControlException: void <init>(java.lang.String,java.security.Permission)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: long length()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.lang.Class findClass(java.lang.String)>[0@L362] new java.net.URLClassLoader$1}.<java.net.URLClassLoader$1: java.lang.String val$name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL[] parseClassPath(java.net.URL,java.lang.String)>[11@L1246] new java.net.URL}.<java.net.URL: java.lang.String file>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.MissingFormatArgumentException: java.lang.String getMessage()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.util.ServiceConfigurationError>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission$1: java.lang.Object run()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Inet4Address: java.lang.String numericToTextFormat(byte[])>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r49}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.TypeParameterMatcher: java.lang.Class fail(java.lang.Class,java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.DecoderResult: java.lang.String toString()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.reflect.Modifier: java.lang.String toString(int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.logging.LogManager: void readConfiguration()>[47@L1298] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r48}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkPropertyAccess(java.lang.String)>[0@L1294] new java.util.PropertyPermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask: void run()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])>/%native-arraycopy-temp473}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: int findKeyword(java.lang.String,java.lang.String[])>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: boolean isSealed(java.lang.String,java.util.jar.Manifest)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: void config(java.lang.Class,java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: void throwAccessCheckException(java.lang.Object)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TreeMap$KeyIterator: java.lang.Object next()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.security.Provider)>[18@L284] new java.security.MessageDigest$Delegate}.<java.security.MessageDigest: java.lang.String algorithm>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.SocketPermission: java.lang.String getActions()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermissionCollection: void add(java.security.Permission)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.ApiRoute: org.fengfei.lanproxy.server.config.web.ResponseInfo run(io.netty.handler.codec.http.FullHttpRequest)>[9@L74] new java.net.URI}.<java.net.URI: java.lang.String decodedPath>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.GregorianCalendar: void computeTime()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData$1: void <init>(java.lang.String,java.util.Locale)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r55}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String examineAliases(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,java.lang.String,int,java.util.Map)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: void initialize()>/$r66}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: int precision(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.nio.charset.UnsupportedCharsetException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseQuotedString(java.io.Reader,java.lang.StringBuilder)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.DefaultHttpHeaders: void add0(int,int,java.lang.CharSequence,java.lang.CharSequence)>[3@L142] new io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry}.<io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry: java.lang.CharSequence value>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.security.provider.SeedGenerator$URLSeedGenerator: void init()>[0@L504] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.String: java.lang.String toLowerCase()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String toUpperCase()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveNonFile(java.net.URL,java.lang.String)>[6@L1309] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath: java.net.URL findResource(java.lang.String,boolean)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: void checkDuplicateName(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.NoSuchMethodException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<sun.security.util.CurveDB: java.lang.String[] getNamesByOID(java.lang.String)>[5@L167] newarray java.lang.String[%intconst0]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermissionCollection: void add(java.security.Permission)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[48@L686] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r53}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerValue: boolean getBoolean()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigInteger: void implMulAddCheck(int[],int[],int,int,int)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getEncAlgFromSigAlg(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Double: java.lang.String toHexString(double)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: void incWaiters()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty range(java.util.regex.Pattern$BitClass)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: java.lang.Package definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.String expandAffix(java.lang.String,java.lang.StringBuffer)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r80}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>/r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.ExpiringCache$Entry: void setVal(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Arrays: char[] copyOfRange(char[],int,int)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Signature$Delegate: void chooseProvider(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.IllegalAccessException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayList$SubList: java.lang.String outOfBoundsMsg(int)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r36}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.time.Instant: java.time.Instant from(java.time.temporal.TemporalAccessor)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: int width(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r40}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add_unchecked(int,int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.URIName: sun.security.x509.URIName nameConstraint(sun.security.util.DerValue)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Vector: java.lang.Object elementAt(int)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: void <init>(java.io.Reader,int,java.util.Map)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader$2: java.net.URL run()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void checkDateTime()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkDelete(java.lang.String)>[0@L1007] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.SerialNumber: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[47@L577] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.StringCoding: char[] decode(byte[],int,int)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringCoding: byte[] encode(char[],int,int)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r105}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.OtherName: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI$Parser: void parse(boolean)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String value()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.LinkedList: boolean add(java.lang.Object)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.lang.SecurityException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Vector: boolean add(java.lang.Object)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253Name(java.util.Map)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r58}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String toLowerCase()>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.util.Map getDisplayNamesImpl(java.lang.String,int,int,java.util.Locale,boolean)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Signature$Delegate: void <init>(java.security.SignatureSpi,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.lang.String getParent()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.security.PermissionCollection getPermissions(java.security.Permissions,java.security.ProtectionDomain)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.Manifest: java.util.jar.Attributes getTrustedAttributes(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r68}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.LinkedList: boolean addAll(int,java.util.Collection)>[18@L424] new java.util.LinkedList$Node}.<java.util.LinkedList$Node: java.lang.Object item>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.Long: long parseLong(java.lang.String,int)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.String toPattern(boolean)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.AbstractList: java.lang.String outOfBoundsMsg(int)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FileInputStream: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.SecureRandom: void <init>(java.security.SecureRandomSpi,java.security.Provider,java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.security.CodeSigner[] getSigners(sun.security.pkcs.SignerInfo[],sun.security.pkcs.PKCS7)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509Key: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.UnknownFormatFlagsException: java.lang.String getMessage()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: int getHexDigit(java.lang.String,int)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CRLExtensions: void init(sun.security.util.DerInputStream)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Arrays$ArrayList: java.lang.Object get(int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String convertOldISOCodes(java.lang.String)>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.AbstractMap: void putAll(java.util.Map)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String toString()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FileURLMapper: boolean exists()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.JarVerifier: void verify()>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r36}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData: java.util.ResourceBundle getCalendarData(java.util.Locale)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r52}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.util.Map getDisplayNamesImpl(java.lang.String,int,int,java.util.Locale,boolean)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkRead(java.lang.String)>[0@L888] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r45}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.lang.String[] normalizedList()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS9Attributes: byte[] decode(sun.security.util.DerInputStream)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getEncAlgFromSigAlg(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void floatArrayAppend(java.lang.StringBuffer,float[])>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveNonFile(java.net.URL,java.lang.String)>[6@L1309] new java.net.URL}.<java.net.URL: java.lang.String host>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String getLanguage()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r49}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Integer: java.lang.Integer decode(java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.Logger: java.lang.String getName()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Parts: void <init>(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVAKeyword: java.lang.String getKeyword(sun.security.util.ObjectIdentifier,int,java.util.Map)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Hashtable$Enumerator: java.lang.Object nextElement()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkPropertyAccess(java.lang.String)>[0@L1294] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.AbstractStringBuilder)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[26@L835] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<java.io.FilePermission: void init(int)>[51@L228] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext newContext(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)>/name}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleProviderAdapter: void <clinit>()>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: void process(java.util.Hashtable,java.util.List,java.lang.String)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.JdkLoggerFactory: io.netty.util.internal.logging.InternalLogger newInstance(java.lang.String)>/name}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL[] parseClassPath(java.net.URL,java.lang.String)>[11@L1246] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void <clinit>()>[35@L212] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[4@L1369] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.lang.String getHostName(boolean)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Signature: java.lang.String getAlgorithm()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.Launcher$Factory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.InvalidKeyException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[31@L471] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$c1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r42}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI$Parser: void checkChars(int,int,long,long,java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.time.LocalDate: java.time.LocalDate create(int,int,int)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String string>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r80}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ObjectIdentifier: void checkOidSize(int)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509Key: java.security.PublicKey parse(sun.security.util.DerValue)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.BasicPermissionCollection: void add(java.security.Permission)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Collections: void reverse(java.util.List)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.cert.CRLException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Set getLanguageTagSet(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger,boolean)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeRegion(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r60}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r56}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class,java.lang.ClassLoader)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DateFormat: java.util.Date parse(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.JarIndex: java.util.LinkedList get(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String getStorePassURL()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CRLExtensions: void init(sun.security.util.DerInputStream)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>[21@L1513] newarray java.lang.String[%intconst2]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerValue: boolean getBoolean()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseQuotedString(java.io.Reader,java.lang.StringBuilder)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CRLEntryImpl: void <init>(sun.security.util.DerValue)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r47}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager: java.lang.String[] getPackages(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.lang.Class access$100(java.net.URLClassLoader,java.lang.String,sun.misc.Resource)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>[23@L731] newarray java.lang.String[$i3]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.AllPermissionCollection: void add(java.security.Permission)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void loadPolicies(java.io.File,javax.crypto.CryptoPermissions,javax.crypto.CryptoPermissions)>[0@L353] new java.util.jar.JarFile}.<java.util.zip.ZipFile: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-290}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.BaseLocale$1)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.UnpooledUnsafeDirectByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,int,int)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable)>/r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String getPath()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.ChoiceFormat: void applyPattern(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: void getCanonName()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String)>[18@L185] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.jar.JarFile: void initializeVerifier()>[23@L387] new sun.security.util.ManifestEntryVerifier}.<sun.security.util.ManifestEntryVerifier: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>[11@L499] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.security.Policy$1: java.lang.String run()>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.JarIndex: void addToList(java.lang.String,java.lang.String,java.util.HashMap)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.util.UnknownFormatConversionException>}.<java.util.UnknownFormatConversionException: java.lang.String s>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>[0@L311] new sun.util.locale.BaseLocale}.<sun.util.locale.BaseLocale: java.lang.String region>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.net.InetAddress: void <clinit>()>[56@L989] new sun.security.action.GetPropertyAction}.<sun.security.action.GetPropertyAction: java.lang.String theProp>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI$Parser: int parseHierarchical(int,int)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry: java.lang.Object getKey()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r59}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r51}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.AlgorithmParameters: void <init>(java.security.AlgorithmParametersSpi,java.security.Provider,java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: boolean validatePromise(io.netty.channel.ChannelPromise,boolean)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getDisplayNameImpl(java.lang.String,int,int,int,java.util.Locale,boolean)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>[15@L532] newarray java.lang.Object[%intconst0]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkExternalForm(java.net.URL)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.zip.ZipCoder: java.lang.String toString(byte[],int)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DigitList: double getDouble()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveFile(java.net.URL,java.lang.String)>[10@L1296] new java.net.URL}.<java.net.URL: java.lang.String file>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: void checkDeadLock()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.IllformedLocaleException: void <init>(java.lang.String,int)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$c19}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>[14@L895] new sun.security.action.GetPropertyAction}.<sun.security.action.GetPropertyAction: java.lang.String defaultVal>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r55}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ReflectiveOperationException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>[0@L625] new sun.security.provider.PolicyParser$PermissionEntry}.<sun.security.provider.PolicyParser$PermissionEntry: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>/%taint-temp-154}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void shortArrayAppend(java.lang.StringBuffer,short[])>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[61@L1837] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.PolicyUtil: java.io.InputStream getInputStream(java.net.URL)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String schemeSpecificPart>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.nio.charset.IllegalCharsetNameException: void <init>(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyFactory: void <init>(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.Format: java.lang.String format(java.lang.Object)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getCanonicalFile()>[7@L655] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r72}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DateFormat: java.util.Date parse(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.UnknownFormatConversionException: java.lang.String getMessage()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.ProviderException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ObjectIdentifier: void checkOtherComponent(int,int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r60}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[46@L691] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.io.FilePermission: void init(int)>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Arrays: int[] copyOfRange(int[],int,int)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.MissingFormatWidthException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r39}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: java.lang.String getUnicodeLocaleType(java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher$Transform: int supportsMode(java.security.Provider$Service)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DigitList: double getDouble()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r68}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,java.security.AlgorithmParameters,sun.security.util.ConstraintsParameters)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CRLImpl: void <init>(sun.security.util.DerValue)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Signature: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.ExpiringCache$Entry: java.lang.String val()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r54}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayList$SubList: void rangeCheckForAdd(int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Timestamp: java.lang.String toString()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r58}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CertificateSerialNumber: java.lang.String toString()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/r87}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void objectArrayAppend(java.lang.StringBuffer,java.lang.Object[],java.util.Map)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.ReplaceableString: void <init>(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: void applyPattern(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpResponseStatus: io.netty.handler.codec.http.HttpResponseStatus valueOf(int)>[134@L455] new io.netty.handler.codec.http.HttpResponseStatus}.<io.netty.handler.codec.http.HttpResponseStatus: java.lang.String reasonPhrase>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.AVA: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r60}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r51}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier algOID(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String getAuthority()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission: java.lang.String access$000(java.io.FilePermission)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>[13@L406] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.ChannelException: void <init>(java.lang.String,java.lang.Throwable)>/message}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r64}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.lang.IndexOutOfBoundsException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.ServiceLoader$LazyIterator: boolean hasNextService()>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Package: java.lang.Package getSystemPackage(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader$1: java.lang.Class run()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[123@L857] new java.security.UnresolvedPermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.Extension: java.lang.String getID()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(double,java.util.Locale)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS9Attributes: byte[] decode(sun.security.util.DerInputStream)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.EDIPartyName: java.lang.String toString()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.String argumentTypesToString(java.lang.Class[])>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS7: void parseOldSignedData(sun.security.util.DerValue)>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: void <init>(java.net.URI)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarVerifier: void doneWithMeta()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void longArrayAppend(java.lang.StringBuffer,long[])>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.LinkedList: java.lang.Object[] toArray()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.lang.StringBuilder>}.<java.lang.AbstractStringBuilder: char[] value>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.jca.GetInstance: void checkSuperClass(java.security.Provider$Service,java.lang.Class,java.lang.Class)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.Object call()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>[52@L98] new sun.util.locale.Extension}.<sun.util.locale.Extension: java.lang.String id>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.UniqueName: void <init>(java.util.concurrent.ConcurrentMap,java.lang.String,java.lang.Object[])>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r36}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.CryptoPermission: void <init>(java.lang.String,int,java.security.spec.AlgorithmParameterSpec,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: void parseDN(java.lang.String,java.util.Map)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Signature$Delegate: void <init>(java.security.Provider$Service,java.util.Iterator,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask: io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask newInstance(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.String toPattern(boolean)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC1779Name()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>[5@L524] new java.io.StringWriter}.<java.io.StringWriter: java.lang.StringBuffer buf>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "ArrayIndexNode{NewObj{<java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>[1@L66] newarray java.lang.Object[%intconst0]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r54}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r39}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void checkNumeric()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[46@L691] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String getVariant()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(sun.security.util.DerInputStream)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: void subFormat(int,int,java.text.Format$FieldDelegate,java.lang.StringBuffer,boolean)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.LinkedList: boolean addAll(int,java.util.Collection)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r41}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CRLEntryImpl: void <init>(sun.security.util.DerValue)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>[36@L898] new java.net.URL}.<java.net.URL: java.lang.String file>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.pkcs.PKCS9Attribute: void <init>(sun.security.util.DerValue)>/$r52}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.SimpleTimeZone: void decodeEndRule()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigInteger: void implSquareToLenChecks(int[],int,int[],int)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[28@L998] new java.net.NetPermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String getScript()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.VirtualMachineError: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.SecureClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.CodeSource)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[0@L417] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String language>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.EDIPartyName: java.lang.String toString()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.EOFException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>/r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r87}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r106}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r59}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.ContentInfo: byte[] getData()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayList: java.lang.Object elementData(int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>[11@L499] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.io.File: boolean isDirectory()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission: void init(int)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[5@L45] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty family(boolean,boolean)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>[0@L535] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String prefix>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.security.Provider)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$c3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String toString()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayList: java.lang.String outOfBoundsMsg(int)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r45}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[60@L695] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r41}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier algOID(java.lang.String)>[15@L496] new sun.security.util.ObjectIdentifier}.<sun.security.util.ObjectIdentifier: java.lang.String stringForm>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.channel.SimpleChannelInboundHandler: void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)>/msg}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager$1: java.lang.String run()>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.zip.ZipInputStream: void readEnd(java.util.zip.ZipEntry)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r42}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.util.List getCandidateLocales(java.lang.String,java.util.Locale)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: void initialize()>/$r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void checkCharacter()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Shutdown: void add(int,boolean,java.lang.Runnable)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.OtherName: sun.security.x509.GeneralNameInterface getGNI(sun.security.util.ObjectIdentifier,byte[])>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r64}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.time.Instant: java.time.Instant from(java.time.temporal.TemporalAccessor)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.LinkedHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>[48@L1735] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r89}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Collections$SingletonSet: void <init>(java.lang.Object)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])>/%native-arraycopy-temp476}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.BasicPermissionCollection: void add(java.security.Permission)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Package: void <init>(java.lang.String,java.util.jar.Manifest,java.net.URL,java.lang.ClassLoader,java.lang.Package$1)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.LinkedHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.LinkedList: void checkPositionIndex(int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: java.util.HashMap computeOidTable()>/r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier algOID(java.lang.String)>/$r38}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r41}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String fragment>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>[80@L302] new sun.security.util.SignatureFileVerifier}.<sun.security.util.SignatureFileVerifier: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.lang.StringBuffer>}.<java.lang.AbstractStringBuilder: char[] value>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>[124@L396] new sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint}.<sun.security.util.DisabledAlgorithmConstraints$Constraint: java.lang.String algorithm>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.IPAddressName: void parseIPv6(java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Vector: java.lang.Object set(int,java.lang.Object)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayDeque: boolean add(java.lang.Object)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource checkResource(java.lang.String,boolean,java.util.jar.JarEntry)>[0@L970] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{MergedObj{<Merged java.lang.InstantiationException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<java.util.logging.LogManager$SystemLoggerContext: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String)>[3@L925] new java.util.logging.Logger}.<java.util.logging.Logger: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.DecimalFormat: void expandAffixes()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS9Attribute: void throwSingleValuedException()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r53}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$i3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/reasonPhrase}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty unicodeScriptPropertyFor(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CertificateExtensions: void parseExtension(sun.security.x509.Extension)>/$r38}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS7: void parse(sun.security.util.DerInputStream)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Policy$2: java.security.Policy run()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: boolean isSupportedLocale(java.util.Locale)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.WeakHashMap: void <init>(int,float)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$2: boolean next()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency: java.util.Currency getInstance(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.io.FilePermission$1: java.lang.String run()>[18@L245] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.X509Key: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void append(java.lang.StringBuffer,java.lang.String,java.text.Format$FieldDelegate,java.text.FieldPosition[],java.text.Format$Field)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$Node group0()>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r47}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>[0@L840] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI$Parser: void fail(java.lang.String,int)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigInteger: void <clinit>()>/$r68}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.RegisteredDomain: sun.security.util.RegisteredDomain registeredDomain(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty getInstance()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.zip.ZipException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.SignerInfo: java.util.Set verifyAlgorithms(sun.security.pkcs.SignerInfo[],sun.security.util.JarConstraintsParameters,java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.net.InetAddress: void <init>()>[2@L309] new java.net.InetAddress$InetAddressHolder}.<java.net.InetAddress$InetAddressHolder: java.lang.String hostName>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/%taint-temp-23376}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.AbstractStringBuilder)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: boolean isSealed(java.lang.String,java.util.jar.Manifest)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r39}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.resources.LocaleData: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>[0@L163] new sun.util.resources.LocaleData$1}.<sun.util.resources.LocaleData$1: java.lang.String val$baseName>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.DuplicateFormatFlagsException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.calendar.CalendarSystem: java.util.Properties getCalendarProperties()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: void applyPatternImpl(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.Extension: void setValue(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp344}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r57}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Formatter$FormatSpecifier: int index(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27899}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>[14@L1766] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigInteger,java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r83}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission: void <init>(java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: void <init>(java.net.URI)>/r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r36}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.UnpooledDirectByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,int,int)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.calendar.ZoneInfoFile$1: java.lang.Object run()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<Server: void main(java.lang.String[])>/$r4}" [fillcolor=gold,shape=doubleoctagon,style=filled];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.CryptoPermission: void <init>(java.lang.String,int,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String paramsToString()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String,int)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.io.File getCanonicalFile()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.UnknownFormatConversionException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: boolean parsePrivateuse(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName0(java.lang.String,java.net.InetAddress,boolean)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.Providers: void endThreadProviderList(sun.security.jca.ProviderList)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.CRLExtensions: void parseExtension(sun.security.x509.Extension)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>[11@L941] new java.util.jar.JarFile}.<java.util.zip.ZipFile: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>[0@L311] new sun.util.locale.BaseLocale}.<sun.util.locale.BaseLocale: java.lang.String language>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: java.lang.String stripLeadingZeros(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: java.lang.String name()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r57}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.Formatter: java.util.Formatter$FormatString[] parse(java.lang.String)>[14@L2557] new java.util.Formatter$FixedString}.<java.util.Formatter$FixedString: java.lang.String s>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r67}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.util.DuplicateFormatFlagsException>}.<java.util.DuplicateFormatFlagsException: java.lang.String flags>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.String expandAffix(java.lang.String,java.lang.StringBuffer)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[22@L684] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.UnpooledUnsafeDirectByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,int,int)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.jar.Attributes: java.lang.String putValue(java.lang.String,java.lang.String)>[0@L168] new java.util.jar.Attributes$Name}.<java.util.jar.Attributes$Name: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r48}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.jar.JarFile$JarEntryIterator: java.util.jar.JarEntry next()>[3@L269] new java.util.jar.JarFile$JarFileEntry}.<java.util.zip.ZipEntry: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String concat(java.lang.String)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String getPath()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String describeChar(char)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TreeMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.util.TreeMap$Entry)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeLanguage(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[12@L668] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.channel.ChannelException: void <init>(java.lang.String)>/message}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r60}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashSet: boolean add(java.lang.Object)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.RFC822Name: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.TimeZoneNameProviderImpl: java.lang.String getGenericDisplayName(java.lang.String,int,java.util.Locale)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: int findKeyword(java.lang.String,java.lang.String[])>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.MissingFormatWidthException: java.lang.String getMessage()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$c21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r43}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigInteger: void toString(java.math.BigInteger,java.lang.StringBuilder,int,int)>/r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS7: void parseNetscapeCertChain(sun.security.util.DerValue)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyFactory: void <init>(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>[89@L1890] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.JarVerifier: void verify()>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r59}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyFactory: void <init>(java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String internalize(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getDisplayNameImpl(java.lang.String,int,int,int,java.util.Locale,boolean)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r36}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>[93@L122] new sun.util.locale.UnicodeLocaleExtension}.<sun.util.locale.Extension: java.lang.String id>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.io.PrintWriter: void write(java.lang.String,int,int)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: java.lang.String toString()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.AttributedString$AttributedStringIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r59}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: int escape(boolean,boolean,boolean)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[11@L194] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String)>[11@L183] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeScript(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.BitSet: void <init>(int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r53}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[0@L37] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.buffer.PooledByteBufAllocator: int validateAndCalculateChunkSize(int,int)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>[66@L1880] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.logging.LogManager$LoggerContext: java.util.logging.LogManager$LogNode getNode(java.lang.String)>/r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[7@L666] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<io.netty.channel.AbstractChannel: io.netty.channel.ChannelPromise newPromise()>[0@L254] new io.netty.channel.DefaultChannelPromise}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI$Parser: int parseHostname(int,int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.NullPointerException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Security: void initialize()>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStore$1: java.lang.String run()>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS7: void parseNetscapeCertChain(sun.security.util.DerValue)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.calendar.ZoneInfoFile$1: java.lang.Object run()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[91@L831] new sun.security.provider.PolicyFile$SelfPermission}.<sun.security.provider.PolicyFile$SelfPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r50}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r106}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkExternalForm(java.net.URL)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[80@L708] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.util.concurrent.PromiseTask: void run()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r75}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509Key: java.lang.String toString()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r36}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.util.ResourceLeakDetector: void <init>(java.lang.String,int,long)>[4@L148] new io.netty.util.ResourceLeakDetector$DefaultResourceLeak}.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String creationRecord>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.URI: void <init>(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[103@L2377] newarray java.lang.String[i26]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String getKeyStoreUrl()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void failMismatch(java.util.Formatter$Flags,char)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UTFDataFormatException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ObjectIdentifier: java.lang.String toString()>/r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.Throwable)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-80}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>[54@L182] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.math.BigInteger,java.util.Locale)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.BufferedReader: java.lang.String readLine()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.nio.cs.StreamDecoder: int readBytes()>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: java.lang.String typeName(java.lang.Class)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission: void init(int)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigDecimal: boolean commonNeedIncrement(int,int,int,boolean)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: java.net.URI toURI()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayList: java.lang.Object get(int)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.logging.LogManager: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String,java.lang.Class)>[3@L554] new java.util.logging.Logger}.<java.util.logging.Logger: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.X509Key: java.security.PublicKey parse(sun.security.util.DerValue)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.TypeParameterMatcher: java.lang.Class find0(java.lang.Object,java.lang.Class,java.lang.String)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.WrappedByteBuf: java.lang.String toString()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>/$r38}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.security.KeyStoreException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Formatter$FormatSpecifier: void checkDateTime()>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>[21@L470] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{MergedObj{<Merged java.util.regex.PatternSyntaxException>}.<java.util.regex.PatternSyntaxException: java.lang.String desc>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>[1@L1569] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String script>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r62}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String getStorePassURL()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>[39@L1564] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.stream.ChunkedNioFile: void <init>(java.nio.channels.FileChannel,long,long,int)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.CryptoPolicyParser: java.lang.String match(java.lang.String)>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String,java.lang.String,sun.text.normalizer.SymbolTable)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Object getObject(java.util.spi.LocaleServiceProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Long: long parseLong(java.lang.String,int)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.rsa.RSAUtil$KeyType: sun.security.rsa.RSAUtil$KeyType lookup(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>[67@L1256] new sun.security.util.ObjectIdentifier}.<sun.security.util.ObjectIdentifier: java.lang.String stringForm>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: void callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.Object,java.util.Locale)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.net.URI create(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged sun.security.util.PropertyExpander$ExpandException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1779] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object value>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.Class: java.lang.String getCanonicalName()>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Vector: void insertElementAt(java.lang.Object,int)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>[0@L1054] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String normalizedPattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.URI: void defineString()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.calendar.BaseCalendar: void getCalendarDateFromFixedDate(sun.util.calendar.CalendarDate,long)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27855}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r69}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r49}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS9Attribute: void throwSingleValuedException()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.BreakDictionary: void readDictionaryFile(java.lang.String)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r61}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String getFragment()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String,java.lang.String,sun.text.normalizer.SymbolTable)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline addLast(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)>/name}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[91@L831] new sun.security.provider.PolicyFile$SelfPermission}.<java.security.Permission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.AssertionError: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r51}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.BasicPermission: void <init>(java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-276}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])>/%native-arraycopy-temp479}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r74}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.security.Security: void initialize()>[103@L142] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: void callHandlerAdded0(io.netty.channel.AbstractChannelHandlerContext)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r36}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader$1: java.lang.Class run()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: int index(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String getUnicodeLocaleType(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.Debug: java.lang.String marshal(java.lang.String)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r55}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r58}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r53}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.String toPattern(boolean)>/$r39}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[19@L512] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getDisplayName(java.lang.String,int,int,int,java.util.Locale)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: java.lang.String removePrivateuseVariant(java.lang.String)>[0@L542] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.AttributeEntry: void <init>(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[73@L240] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{MergedObj{<Merged io.netty.util.IllegalReferenceCountException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r95}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r36}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.RegisteredDomain: java.util.Optional from(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: void record()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.net.URI toURI()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r40}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Runtime: void loadLibrary0(java.lang.Class,java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String,java.lang.String,sun.text.normalizer.SymbolTable)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultMessageSizeEstimator: void <init>(int)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseString(java.io.Reader,int,int,java.lang.StringBuilder)>/$r38}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.DataInputStream: java.lang.String readUTF(java.io.DataInput)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC1779Name(java.util.Map)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(int)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[0@L427] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String signedBy>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger,boolean)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r56}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency$2: java.io.File run()>[15@L407] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r63}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.ReplaceableUCharacterIterator: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI$Parser: int scanByte(int,int)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.security.cert.Certificate[] getCertificates(java.security.KeyStore,java.lang.String,sun.security.provider.PolicyFile$PolicyInfo)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Provider: java.lang.String getProperty(java.lang.String)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TreeMap: void deleteEntry(java.util.TreeMap$Entry)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>[15@L1110] new java.net.URL}.<java.net.URL: java.lang.String host>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String getSelfActions()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>[0@L692] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String suffix>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.SignerInfo: java.util.Set verifyAlgorithms(sun.security.pkcs.SignerInfo[],sun.security.util.JarConstraintsParameters,java.lang.String)>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.SunEntries: java.io.File getDeviceFile(java.net.URL)>[18@L377] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r56}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DateFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.net.URI: java.net.URL toURL()>[7@L1089] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.String substring(int,int)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager: void readPrimordialConfiguration()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>[21@L272] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.regex.PatternSyntaxException: void <init>(java.lang.String,java.lang.String,int)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: sun.security.jca.ProviderList getJarList(java.lang.String[])>[6@L206] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String argument>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.Parts: java.lang.String getPath()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.PrintStream: void println(java.lang.Object)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String expand(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.CodeSigner: java.lang.String toString()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[84@L155] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>/r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency: boolean isPastCutoverDate(java.lang.String)>/r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.net.URI: java.net.URI create(java.lang.String)>[0@L850] new java.net.URI}.<java.net.URI: java.lang.String query>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.SecureClassLoader: java.security.ProtectionDomain getProtectionDomain(java.security.CodeSource)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.CertificateExtensions: void parseExtension(sun.security.x509.Extension)>[50@L124] new sun.security.x509.UnparseableExtension}.<sun.security.x509.UnparseableExtension: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>/r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.resources.LocaleData: java.util.ResourceBundle getBreakIteratorInfo(java.util.Locale)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.lang.Class findClass(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[56@L692] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r54}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: io.netty.handler.codec.http.HttpResponseStatus valueOf(int)>/$r61}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.AlgorithmDecomposer: java.util.Set decomposeImpl(java.lang.String)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Signature: void initVerify(java.security.PublicKey,java.security.spec.AlgorithmParameterSpec)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>[38@L1527] newarray java.lang.String[i21]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[60@L234] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r38}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Properties: java.lang.String getProperty(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FileInputStream: void <init>(java.io.File)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[0@L1368] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>/r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName(boolean)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r82}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.Logger: void setupResourceInfo(java.lang.String,java.lang.Class)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>[25@L266] new java.security.Signature$Delegate}.<java.security.Signature: java.lang.String algorithm>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.Long: long parseLong(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String access$2302(java.net.URI,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager: void checkPropertyAccess(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.String resolveName(java.lang.String)>/r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.lang.String getHostFromNameService(java.net.InetAddress,boolean)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r67}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency: java.util.Currency getInstance(java.util.Locale)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: void definePackageInternal(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC2253DN(java.util.Map)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.logging.Log4JLogger: void debug(java.lang.String,java.lang.Object)>/arg}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.StringWriter: void write(java.lang.String,int,int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getRegion()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.security.Security: java.io.File securityPropFile(java.lang.String)>[1@L215] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.security.CodeSigner: java.lang.String toString()>/$r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.OtherName: void <init>(sun.security.util.DerValue)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CRLImpl: void parse(sun.security.util.DerValue)>/$r36}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-146}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r31}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderName(java.lang.CharSequence)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FileURLMapper: java.lang.String getPath()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r53}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Policy$1: java.lang.Object run()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.RuleCharacterIterator: java.lang.String lookahead()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.lang.String getHostName(boolean)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>[0@L702] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.calendar.ZoneInfoFile$1: java.lang.Object run()>[13@L255] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void <init>(java.lang.String,int,int,int)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.channel.AbstractChannelHandlerContext$WriteTask$1: io.netty.channel.AbstractChannelHandlerContext$WriteTask newObject(io.netty.util.Recycler$Handle)>[0@L913] new io.netty.channel.AbstractChannelHandlerContext$WriteTask}.<io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask: java.lang.Object msg>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.misc.URLClassPath$FileLoader: void <init>(java.net.URL)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509Key: java.security.PublicKey buildX509Key(sun.security.x509.AlgorithmId,sun.security.util.BitArray)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1789] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object value>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.Formatter$FormatSpecifier: void checkText()>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[145@L447] new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString}.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String str>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.ChoiceFormat: void applyPattern(java.lang.String)>/$r18}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Object)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.Package$1: java.lang.Package run()>[6@L577] new java.io.File}.<java.io.File: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: void <init>(java.lang.String,java.util.Map)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509Key: java.security.PublicKey buildX509Key(sun.security.x509.AlgorithmId,sun.security.util.BitArray)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI$Parser: int parseAuthority(int,int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.lang.ArrayIndexOutOfBoundsException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress$Cache: java.net.InetAddress$Cache put(java.lang.String,java.net.InetAddress[])>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigInteger: void <init>(java.lang.String,int)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.jar.JarVerifier$VerifierStream: void <init>(java.util.jar.Manifest,java.util.jar.JarEntry,java.io.InputStream,java.util.jar.JarVerifier)>[3@L458] new sun.security.util.ManifestEntryVerifier}.<sun.security.util.ManifestEntryVerifier: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<java.util.Locale$Builder: void <init>()>[1@L2373] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String language>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS9Attributes: byte[] decode(sun.security.util.DerInputStream)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged javax.crypto.NoSuchPaddingException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.io.FilePermission: java.lang.String getActions()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.JceSecurityManager: javax.crypto.CryptoPermission getCryptoPermission(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r59}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.nio.charset.CharsetEncoder: void throwIllegalStateException(int,int)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String negPrefixPattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: boolean validatePromise(io.netty.channel.ChannelPromise,boolean)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r52}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayList$ListItr: java.lang.Object previous()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.PooledByteBufAllocator: void <init>(boolean,int,int,int,int,int,int,int)>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.Signal: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.String substring(int,int)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[3@L540] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URISyntaxException: java.lang.String getMessage()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName(boolean)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>[117@L1543] new java.security.UnresolvedPermission}.<java.security.UnresolvedPermission: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.io.File: java.lang.String toString()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r51}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.UnpooledHeapByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,byte[],int,int,int)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DateFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String getPrivateuse()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.util.regex.PatternSyntaxException>}.<java.util.regex.PatternSyntaxException: java.lang.String pattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r57}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeRegion(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.pkcs.PKCS9Attribute: void throwSingleValuedException()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r76}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.MimeType: java.lang.String parseSuffix(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: boolean validatePromise(io.netty.channel.ChannelPromise,boolean)>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionDependency$1: java.util.jar.Manifest run()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$Node group0()>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: void <init>(java.lang.String,java.lang.String)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.security.auth.x500.X500Principal: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/r57}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.AbstractChannel: java.lang.String toString()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarFile: boolean isKnownNotToHaveSpecialAttributes()>/$r26}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$CacheKey: java.lang.String getName()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo getZoneInfo0(java.lang.String)>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ref.Reference: java.lang.Object get()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r62}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.SimpleTimeZone: void decodeEndRule()>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.security.AccessControlException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r44}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.X500Name: void parseDN(java.lang.String,java.util.Map)>[45@L933] new sun.security.x509.RDN}.<sun.security.x509.RDN: java.lang.String canonicalString>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: int escape(boolean,boolean,boolean)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String decompose(java.lang.String,boolean,int)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r49}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r23}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>/r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27769}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStore: java.lang.String getDefaultType()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ref.SoftReference: void <init>(java.lang.Object)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.DecimalFormatSymbolsProviderImpl: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>[4@L85] new java.text.DecimalFormatSymbols}.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[123@L857] new java.security.UnresolvedPermission}.<java.security.UnresolvedPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<javax.crypto.Cipher: void chooseProvider(int,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.AlgorithmParameters,java.security.SecureRandom)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r48}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r44}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[29@L81] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.DerValue: int getInteger()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: java.lang.String getProtocol()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r51}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r34}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.InterruptedException: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>[1@L1569] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String variant>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r29}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.NoSuchAlgorithmException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.util.Calendar,char,java.util.Locale)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>[93@L1893] newarray java.lang.Object[%intconst4]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URI: java.lang.String decode(java.lang.String)>/c8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ArrayDeque: void doubleCapacity()>/%native-arraycopy-temp167}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigDecimal: boolean commonNeedIncrement(int,int,int,boolean)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/$r17}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.net.URI toURI()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>[16@L95] new sun.security.x509.OtherName}.<sun.security.x509.OtherName: java.lang.String name>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r70}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r35}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser: void skipEntry()>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: void checkDuplicateName(java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r36}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r43}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r58}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.StringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>/%this}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.math.BigDecimal,java.util.Locale)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath: void check(java.net.URL)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: boolean mkdir()>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String toString()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.security.NoSuchAlgorithmException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.MessageDigest$Delegate: void <init>(java.security.MessageDigestSpi,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[53@L454] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String pad>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.rsa.RSAUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.security.AlgorithmParameters)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r66}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.FilePermission: void init(int)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.CharSequence subSequence(int,int)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509Key: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: java.lang.String typeName(java.lang.Class)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.lang.Error>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.buffer.WrappedByteBuf: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseVariants(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<Server: void main(java.lang.String[])>[2@L10] new io.netty.channel.embedded.EmbeddedChannel}.<io.netty.channel.AbstractChannel: java.lang.String strVal>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "InstanceFieldNode{NewObj{<java.security.Policy: java.security.Policy getPolicyNoCheck()>[37@L201] new java.security.Policy$2}.<java.security.Policy$2: java.lang.String val$pc>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String negativeSuffix>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r47}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.jca.ProviderConfig$3: java.lang.Object run()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r72}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Currency: void <init>(java.lang.String,int,int)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.StringJoiner: java.lang.StringBuilder prepareBuilder()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.DecoderResult: java.lang.String toString()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.SocketPermission: void getCanonName()>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: java.lang.String toString()>/$r27}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.UnixFileSystem: java.lang.String parentOrNull(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r42}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.TimeZoneNameProviderImpl: java.lang.String[] getDisplayNameArray(java.lang.String,java.util.Locale)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkUserInfo(java.lang.String)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{MergedObj{<Merged java.lang.IllegalAccessException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.JarIndex: void addMapping(java.lang.String,java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.EDIPartyName: java.lang.String toString()>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.zip.ZipEntry: void <init>(java.util.zip.ZipEntry)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r30}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r52}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.UniqueName: void <init>(java.util.concurrent.ConcurrentMap,java.lang.String,java.lang.Object[])>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>[3@L794] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Collections$EmptyList: java.lang.Object get(int)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r28}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r39}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>[15@L1415] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.DerValue: java.lang.String getUTF8String()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[19@L213] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.CRLExtensions: sun.security.x509.Extension get(java.lang.String)>[0@L184] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String prefix>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[82@L2364] newarray java.lang.String[%intconst0]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.security.PermissionCollection getPermissions(java.security.Permissions,java.security.ProtectionDomain)>/$r15}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/%taint-temp-8406}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.util.Formatter: java.util.Formatter$FormatString[] parse(java.lang.String)>[25@L2567] new java.util.Formatter$FixedString}.<java.util.Formatter$FixedString: java.lang.String s>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String getCallerInfo()>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getCalendarNames(java.lang.String)>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[127@L1505] new java.text.SimpleDateFormat}.<java.text.SimpleDateFormat: java.lang.String pattern>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.calendar.ImmutableGregorianDate: java.lang.String toString()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.SimpleTimeZone: void decodeStartRule()>/$r21}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/r19}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>[0@L625] new sun.security.provider.PolicyParser$PermissionEntry}.<sun.security.provider.PolicyParser$PermissionEntry: java.lang.String action>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r38}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.JarFile: boolean isKnownNotToHaveSpecialAttributes()>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.net.www.ParseUtil: byte unescape(java.lang.String,int)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.Timestamp: java.lang.String toString()>/$r6}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.spec.EllipticCurve: void checkValidity(java.security.spec.ECField,java.math.BigInteger,java.lang.String)>/$r8}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.util.Map getJavaTimeDisplayNames(java.lang.String,int,int,java.util.Locale)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "ArrayIndexNode{NewObj{<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>[19@L1204] newarray java.lang.String[$i1]}}" [fillcolor=khaki1,style=filled];
  "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r20}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>/$r33}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>[52@L408] new java.net.Parts}.<java.net.Parts: java.lang.String path>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-274}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.ChoiceFormat: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.ChoiceFormat: void applyPattern(java.lang.String)>/$r13}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.DataInputStream: java.lang.String readUTF(java.io.DataInput)>/$r12}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r39}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.SecureClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.CodeSource)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r7}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureUtil: java.lang.String checkName(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.math.BigInteger: void implSquareToLenChecks(int[],int,int[],int)>/$r32}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: void <clinit>()>/$r16}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>/result}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.UCharacter: void <clinit>()>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAddressesFromNameService(java.lang.String,java.net.InetAddress)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r36}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>[21@L272] new java.net.URL}.<java.net.URL: java.lang.String host>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.jar.Attributes: void read(java.util.jar.Manifest$FastInputStream,byte[])>/$r22}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<org.fengfei.lanproxy.server.config.web.MimeType: java.lang.String parseSuffix(java.lang.String)>/$r3}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r11}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/r4}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.x509.X509Key: java.security.PublicKey buildX509Key(sun.security.x509.AlgorithmId,sun.security.util.BitArray)>/$r24}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.Format: java.lang.String format(java.lang.Object)>/$r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier algOID(java.lang.String)>[9@L494] new sun.security.util.ObjectIdentifier}.<sun.security.util.ObjectIdentifier: java.lang.String stringForm>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<java.net.InetAddress$InetAddressHolder: java.lang.String getHostName()>/$r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r25}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r5}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.security.CodeSigner: java.lang.String toString()>/$r14}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.text.normalizer.NormalizerBase$NFDMode: java.lang.String normalize(java.lang.String,int)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry: java.lang.String getValue()>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: java.util.Set createLanguageTagSet(java.lang.String)>/r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String negativePrefix>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r42}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.misc.JarIndex: void read(java.io.InputStream)>/r10}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r37}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r9}" [fillcolor=floralwhite,shape=box,style=filled];
  "InstanceFieldNode{NewObj{<sun.util.resources.LocaleData: sun.util.resources.OpenListResourceBundle getSupplementary(java.lang.String,java.util.Locale)>[0@L173] new sun.util.resources.LocaleData$2}.<sun.util.resources.LocaleData$2: java.lang.String val$baseName>}" [fillcolor=aliceblue,shape=box,style="rounded,filled"];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r43}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Throwable$WrappedPrintWriter: void println(java.lang.Object)>/r1}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r42}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>/$r2}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.lang.Double: double parseDouble(java.lang.String)>/r0}" [fillcolor=floralwhite,shape=box,style=filled];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r28}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/$r17}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/r4}" [color=blue];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r2}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r1}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r54}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r54}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r15}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r25}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.PermissionCollection getPermissions(java.security.Permissions,java.security.ProtectionDomain)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence)>/%this}" -> "VarNode{<java.lang.StringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r22}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.util.logging.PlatformLogger: void redirectToJavaLoggerProxy()>/$r7}" -> "VarNode{<sun.util.logging.PlatformLogger$JavaLoggerProxy: void <init>(java.lang.String,sun.util.logging.PlatformLogger$Level)>/r1}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r12}" -> "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r13}" [color=green3,style=dashed];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r12}" -> "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/$r15}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/$r16}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/$r15}" -> "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" [color=blue];
  "VarNode{<java.io.ExpiringCache$Entry: void <init>(long,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.io.ExpiringCache: void put(java.lang.String,java.lang.String)>[14@L94] new java.io.ExpiringCache$Entry}.<java.io.ExpiringCache$Entry: java.lang.String val>}" [color=red];
  "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r30}" -> "VarNode{<java.security.SignatureException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.Signature: void initVerify(java.security.PublicKey,java.security.spec.AlgorithmParameterSpec)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Signature: void initVerify(java.security.PublicKey,java.security.spec.AlgorithmParameterSpec)>/$r7}" -> "VarNode{<java.security.Signature: void initVerify(java.security.PublicKey,java.security.spec.AlgorithmParameterSpec)>/$r6}" [color=green3,style=dashed];
  "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/r0}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/r25}" [color=blue,style=dashed];
  "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/r0}" -> "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/c6}" [color=green3,style=dashed];
  "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/r0}" -> "VarNode{<sun.security.util.PolicyUtil: java.io.InputStream getInputStream(java.net.URL)>/$r6}" [color=blue,style=dashed];
  "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/r0}" -> "VarNode{<sun.misc.URLClassPath$FileLoader: void <init>(java.net.URL)>/$r6}" [color=blue,style=dashed];
  "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/r0}" -> "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r14}" [color=blue,style=dashed];
  "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/r0}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>/$r11}" [color=blue,style=dashed];
  "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/r0}" -> "VarNode{<sun.net.www.ParseUtil: byte unescape(java.lang.String,int)>/r0}" [color=blue];
  "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/r0}" -> "VarNode{<sun.misc.FileURLMapper: java.lang.String getPath()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r28}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r29}" [color=green3,style=dashed];
  "VarNode{<java.security.Security: void initialize()>/$r16}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.misc.URLClassPath$FileLoader: void <init>(java.net.URL)>/$r4}" -> "VarNode{<sun.misc.URLClassPath$FileLoader: void <init>(java.net.URL)>/$r5}" [color=green3,style=dashed];
  "VarNode{<sun.misc.URLClassPath$FileLoader: void <init>(java.net.URL)>/$r4}" -> "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r4}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r3}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r16}" -> "InstanceFieldNode{MergedObj{<Merged sun.security.provider.PolicyParser$ParsingException>}.<sun.security.provider.PolicyParser$ParsingException: java.lang.String i18nMessage>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>[16@L1711] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[46@L120] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>[36@L898] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[39@L113] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<java.security.Security: void initialize()>[107@L144] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveNonFile(java.net.URL,java.lang.String)>[6@L1309] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void <clinit>()>[35@L212] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<java.security.Security: void initialize()>[118@L147] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[28@L517] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>[15@L1110] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[77@L148] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[84@L155] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveFile(java.net.URL,java.lang.String)>[10@L1296] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>[0@L702] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[99@L720] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[23@L764] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource checkResource(java.lang.String,boolean,java.util.jar.JarEntry)>[0@L970] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[0@L1368] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL[] parseClassPath(java.net.URL,java.lang.String)>[11@L1246] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<sun.security.provider.SeedGenerator$URLSeedGenerator: void init()>[0@L504] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<java.net.URI: java.net.URL toURL()>[7@L1089] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[4@L1369] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<javax.crypto.JarVerifier: void verify()>[11@L81] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$Loader: sun.misc.Resource getResource(java.lang.String,boolean)>[0@L738] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.time.Instant: java.time.Instant from(java.time.temporal.TemporalAccessor)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.StringJoiner: java.lang.StringBuilder prepareBuilder()>/$r7}" -> "InstanceFieldNode{NewObj{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>[21@L454] new java.util.StringJoiner}.<java.util.StringJoiner: java.lang.StringBuilder value>}" [color=red];
  "VarNode{<java.util.StringJoiner: java.lang.StringBuilder prepareBuilder()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.misc.URLClassPath: sun.misc.Resource getResource(java.lang.String)>/r1}" -> "VarNode{<sun.misc.URLClassPath: sun.misc.Resource getResource(java.lang.String,boolean)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle findBundleInCache(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle$Control)>/$r11}" -> "VarNode{<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>/r2}" [color=blue];
  "VarNode{<java.security.Security: void initialize()>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Security: void initialize()>/$r21}" -> "VarNode{<java.security.Security: void initialize()>/$r20}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.JarVerifier: void verify()>[11@L81] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.JarVerifier: void verify()>[11@L81] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.GeneralName: java.lang.String toString()>/$r2}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(long)>/%this}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(long)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/r1}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r25}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: void <init>(java.util.ArrayList,sun.security.util.ManifestDigester,java.lang.String,byte[])>/$r10}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void <init>(java.util.ArrayList,sun.security.util.ManifestDigester,java.lang.String,byte[])>/$r12}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: void <init>(java.util.ArrayList,sun.security.util.ManifestDigester,java.lang.String,byte[])>/$r10}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/r22}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/r6}" [color=blue];
  "VarNode{<java.lang.StringCoding: void warnUnsupportedCharset(java.lang.String)>/$r5}" -> "VarNode{<sun.misc.MessageUtils: void err(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String next()>/$r2}" -> "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String next()>/$r3}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String next()>/$r2}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.calendar.CalendarSystem: java.util.Properties getCalendarProperties()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.GregorianCalendar: void computeTime()>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r61}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.io.StringWriter: void write(java.lang.String,int,int)>/r1}" -> "VarNode{<java.io.StringWriter: void write(java.lang.String,int,int)>/$r3}" [color=green3,style=dashed];
  "VarNode{<java.io.StringWriter: void write(java.lang.String,int,int)>/r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.net.URI$Parser: void failExpecting(java.lang.String,int)>/$r5}" -> "VarNode{<java.net.URI$Parser: void fail(java.lang.String,int)>/r2}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[0@L427] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String codeBase>}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r17}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[0@L427] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String codeBase>}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[0@L427] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String codeBase>}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r6}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[0@L427] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String codeBase>}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r48}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[0@L427] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String codeBase>}" -> "VarNode{<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>/$r2}" [color=red,style=dashed];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>/$r6}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>[0@L625] new sun.security.provider.PolicyParser$PermissionEntry}.<sun.security.provider.PolicyParser$PermissionEntry: java.lang.String action>}" [color=red];
  "VarNode{<java.text.DateFormat: java.util.Date parse(java.lang.String)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>/r14}" -> "ArrayIndexNode{NewObj{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>[15@L532] newarray java.lang.Object[%intconst0]}}" [color=red];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r47}" -> "VarNode{<java.lang.Exception: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String,int)>/r2}" -> "InstanceFieldNode{MergedObj{<Merged java.net.URISyntaxException>}.<java.net.URISyntaxException: java.lang.String input>}" [color=red];
  "VarNode{<java.util.zip.ZipCoder: java.lang.String toString(byte[],int)>/$r11}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>[26@L1769] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r13}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKey(java.lang.String,int,int,boolean)>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r13}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getDisplayNameImpl(java.lang.String,int,int,int,java.util.Locale,boolean)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27853}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1774] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27853}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1789] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27853}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1784] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27853}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1779] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r12}" -> "InstanceFieldNode{NewObj{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>[21@L454] new java.util.StringJoiner}.<java.util.StringJoiner: java.lang.String emptyValue>}" [color=red];
  "VarNode{<java.text.MessageFormat: void append(java.lang.StringBuffer,java.text.CharacterIterator)>/r1}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<java.io.StringWriter: java.lang.String toString()>/$r2}" -> "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>/r14}" [color=blue,style=dashed];
  "VarNode{<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r2}" -> "VarNode{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r2}" [color=blue];
  "VarNode{<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r2}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DerInputStream: int getLength(int,java.io.InputStream)>/$r23}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.LinkedList: void checkElementIndex(int)>/$r2}" -> "VarNode{<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.BufferedReader: java.lang.String readLine(boolean)>/r12}" -> "VarNode{<java.io.BufferedReader: java.lang.String readLine()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r25}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r25}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r23}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>/r5}" -> "VarNode{<java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r60}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r61}" [color=green3,style=dashed];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void access$600(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object)>/x1}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void invokeChannelRead(java.lang.Object)>/msg}" [color=blue];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/%taint-temp-8402}" -> "InstanceFieldNode{NewObj{<io.netty.channel.embedded.EmbeddedEventLoop: io.netty.channel.ChannelFuture register(io.netty.channel.Channel)>[0@L115] new io.netty.channel.DefaultChannelPromise}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" [color=red];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/%taint-temp-8402}" -> "InstanceFieldNode{NewObj{<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>[0@L739] new io.netty.channel.DefaultChannelPromise}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" [color=red];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/%taint-temp-8402}" -> "InstanceFieldNode{NewObj{<io.netty.util.concurrent.AbstractEventExecutor: java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable,java.lang.Object)>[0@L106] new io.netty.util.concurrent.PromiseTask}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" [color=red];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/%taint-temp-8402}" -> "InstanceFieldNode{NewObj{<io.netty.channel.AbstractChannel: io.netty.channel.ChannelPromise newPromise()>[0@L254] new io.netty.channel.DefaultChannelPromise}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" [color=red];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URI: void <init>(java.lang.String)>[10@L588] new java.net.URI$Parser}.<java.net.URI$Parser: java.lang.String input>}" -> "VarNode{<java.net.URI$Parser: java.lang.String substring(int,int)>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URI: void <init>(java.lang.String)>[10@L588] new java.net.URI$Parser}.<java.net.URI$Parser: java.lang.String input>}" -> "VarNode{<java.net.URI$Parser: void fail(java.lang.String,int)>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URI: void <init>(java.lang.String)>[10@L588] new java.net.URI$Parser}.<java.net.URI$Parser: java.lang.String input>}" -> "VarNode{<java.net.URI$Parser: void fail(java.lang.String)>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>[0@L1028] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String pattern>}" -> "VarNode{<java.util.regex.Pattern: void compile()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>[0@L1028] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String pattern>}" -> "VarNode{<java.util.regex.Pattern: void normalize()>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>/r2}" -> "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>[0@L892] new sun.security.action.GetPropertyAction}.<sun.security.action.GetPropertyAction: java.lang.String defaultVal>}" [color=red];
  "VarNode{<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>/r2}" -> "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>[14@L895] new sun.security.action.GetPropertyAction}.<sun.security.action.GetPropertyAction: java.lang.String defaultVal>}" [color=red];
  "VarNode{<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>/r2}" -> "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>[21@L897] new sun.security.action.GetPropertyAction}.<sun.security.action.GetPropertyAction: java.lang.String defaultVal>}" [color=red];
  "VarNode{<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>/r2}" -> "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>[7@L893] new sun.security.action.GetPropertyAction}.<sun.security.action.GetPropertyAction: java.lang.String defaultVal>}" [color=red];
  "VarNode{<sun.util.calendar.CalendarSystem: java.util.Properties getCalendarProperties()>/$r10}" -> "VarNode{<sun.util.calendar.CalendarSystem$1: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.StringWriter: void write(java.lang.String)>/$r2}" -> "InstanceFieldNode{NewObj{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>[5@L524] new java.io.StringWriter}.<java.io.StringWriter: java.lang.StringBuffer buf>}" [color=red];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/r3}" -> "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$c1}" [color=green3,style=dashed];
  "VarNode{<io.netty.buffer.EmptyByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,java.nio.ByteOrder)>/$r8}" -> "InstanceFieldNode{NewObj{<io.netty.buffer.AbstractByteBufAllocator: void <init>(boolean)>[9@L91] new io.netty.buffer.EmptyByteBuf}.<io.netty.buffer.EmptyByteBuf: java.lang.String str>}" [color=red];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r20}" -> "VarNode{<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>/r3}" [color=blue];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r62}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r63}" [color=green3,style=dashed];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>[67@L864] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>[20@L60] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.SunEntries: java.io.File getDeviceFile(java.net.URL)>[4@L373] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<java.security.Security: void initialize()>[103@L142] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>[26@L733] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>[20@L444] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<java.io.FilePermission$1: java.lang.String run()>[18@L245] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>[2@L879] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[46@L479] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.misc.Launcher$ExtClassLoader: java.io.File[] getExtDirs()>[10@L189] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>[54@L182] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[24@L468] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>[26@L1769] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<java.util.Currency$1: java.lang.Void run()>[106@L257] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>[25@L455] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: void <init>(java.net.URL)>[15@L1351] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<java.io.FilePermission$1: java.lang.String run()>[30@L248] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[23@L514] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<java.io.FileInputStream: void <init>(java.lang.String)>[1@L93] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[26@L835] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[87@L554] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.SunEntries: java.io.File getDeviceFile(java.net.URL)>[26@L386] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.misc.FileURLMapper: boolean exists()>[4@L77] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[32@L1825] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<java.util.jar.JarFile: void <init>(java.lang.String)>[0@L108] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>[19@L81] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.jca.ProviderConfig$1: java.lang.Boolean run()>[0@L105] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[40@L477] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<java.security.Security: java.io.File securityPropFile(java.lang.String)>[1@L215] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<java.util.zip.ZipFile: void <init>(java.io.File,int,java.nio.charset.Charset)>[28@L216] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>[48@L1735] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>[72@L866] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>[31@L84] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[19@L512] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>[14@L1766] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<java.io.FilePermission: void init(int)>[51@L228] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[15@L1817] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[31@L471] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<java.lang.Package$1: java.lang.Package run()>[6@L577] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String,int)>/r1}" -> "InstanceFieldNode{NewObj{<java.io.File: java.io.File getAbsoluteFile()>[7@L581] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String,int)>/r1}" -> "InstanceFieldNode{NewObj{<java.io.File: java.io.File getCanonicalFile()>[7@L655] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String,int)>/r1}" -> "InstanceFieldNode{NewObj{<java.io.File: java.io.File getParentFile()>[9@L506] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r15}" -> "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r14}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>/$r4}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>/$r4}" -> "VarNode{<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>/$r0}" [color=green3,style=dashed];
  "VarNode{<sun.security.pkcs.PKCS9Attributes: byte[] decode(sun.security.util.DerInputStream)>/$r18}" -> "VarNode{<sun.security.pkcs.PKCS9Attributes: byte[] decode(sun.security.util.DerInputStream)>/$r19}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL[] parseClassPath(java.net.URL,java.lang.String)>[11@L1246] new java.net.URL}.<java.net.URL: java.lang.String host>}" -> "VarNode{<java.net.URL: java.lang.String getHost()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL[] parseClassPath(java.net.URL,java.lang.String)>[11@L1246] new java.net.URL}.<java.net.URL: java.lang.String host>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r24}" [color=red,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getLocalizedMessage()>/$r1}" -> "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getLocalizedMessage()>/$r1}" -> "VarNode{<sun.security.provider.PolicyParser: java.util.Map parseProperties(java.lang.String)>/$r10}" [color=blue,style=dashed];
  "ArrayIndexNode{NewObj{<sun.misc.JarIndex: void read(java.io.InputStream)>[29@L327] newarray java.lang.String[$i0]}}" -> "VarNode{<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>/$r20}" [color=red,style=dashed];
  "VarNode{<io.netty.channel.ChannelOutboundBuffer: void addMessage(java.lang.Object,int,io.netty.channel.ChannelPromise)>/msg}" -> "VarNode{<io.netty.channel.ChannelOutboundBuffer$Entry: io.netty.channel.ChannelOutboundBuffer$Entry newInstance(java.lang.Object,int,long,io.netty.channel.ChannelPromise)>/r3}" [color=blue];
  "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/$r2}" -> "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/$r3}" [color=green3,style=dashed];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r7}" -> "VarNode{<java.time.temporal.ValueRange: long checkValidValue(long,java.time.temporal.TemporalField)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r7}" -> "VarNode{<java.time.temporal.ValueRange: int checkValidIntValue(long,java.time.temporal.TemporalField)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.net.SocketPermission: void getIP()>/$r9}" -> "VarNode{<java.net.UnknownHostException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r4}" -> "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: void parse(sun.security.util.DerValue)>[26@L649] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String dn>}" [color=red];
  "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r4}" -> "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: void parse(sun.security.util.DerValue)>[39@L659] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String dn>}" [color=red];
  "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r4}" -> "InstanceFieldNode{NewObj{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>[13@L181] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String dn>}" [color=red];
  "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r4}" -> "InstanceFieldNode{NewObj{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>[100@L149] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String dn>}" [color=red];
  "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r4}" -> "InstanceFieldNode{NewObj{<sun.security.x509.X509CRLImpl: void parse(sun.security.util.DerValue)>[104@L1116] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String dn>}" [color=red];
  "VarNode{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>/r1}" -> "VarNode{<sun.security.x509.X500Name: void <init>(java.lang.String,java.util.Map)>/r1}" [color=blue];
  "VarNode{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>/r1}" -> "VarNode{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>/$r11}" [color=green3,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkExternalForm(java.net.URL)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkExternalForm(java.net.URL)>/$r6}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkExternalForm(java.net.URL)>/$r5}" [color=green3,style=dashed];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: java.lang.String name()>/$r1}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: void callHandlerAdded0(io.netty.channel.AbstractChannelHandlerContext)>/$r24}" [color=blue,style=dashed];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: java.lang.String name()>/$r1}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask: void execute()>/$r12}" [color=blue,style=dashed];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: java.lang.String name()>/$r1}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask: void execute()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence)>/r0}" [color=blue];
  "VarNode{<sun.security.x509.X509CRLImpl: void <init>(sun.security.util.DerValue)>/$r10}" -> "VarNode{<java.security.cert.CRLException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.jar.Attributes$Name: void <init>(java.lang.String)>/$r2}" -> "InstanceFieldNode{NewObj{<java.util.jar.Attributes: java.lang.String putValue(java.lang.String,java.lang.String)>[0@L168] new java.util.jar.Attributes$Name}.<java.util.jar.Attributes$Name: java.lang.String name>}" [color=red];
  "VarNode{<sun.security.jca.ProviderConfig: void <init>(java.lang.String,java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: void <init>()>[43@L183] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String argument>}" [color=red];
  "VarNode{<sun.security.jca.ProviderConfig: void <init>(java.lang.String,java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: void <init>()>[34@L179] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String argument>}" [color=red];
  "VarNode{<sun.security.jca.ProviderConfig: void <init>(java.lang.String,java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: sun.security.jca.ProviderList getJarList(java.lang.String[])>[6@L206] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String argument>}" [color=red];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/r23}" -> "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r21}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r12}" -> "VarNode{<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.SecurityManager: void checkExit(int)>/$r5}" -> "VarNode{<java.lang.RuntimePermission: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.SecurityPermission: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.security.BasicPermission: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r10}" -> "VarNode{<java.net.SocketPermission: int[] parsePort(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r10}" -> "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r22}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r10}" -> "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r8}" [color=green3,style=dashed];
  "VarNode{<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String)>/$r4}" -> "VarNode{<javax.security.auth.x500.X500Principal: java.lang.String getName()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.Vector: java.lang.Object elementAt(int)>/$r7}" -> "VarNode{<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r2}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r2}" -> "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r2}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r26}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency$2: java.io.File run()>[21@L409] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency$2: java.io.File run()>[21@L409] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency$2: java.io.File run()>[21@L409] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency$2: java.io.File run()>[21@L409] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r19}" -> "VarNode{<java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.lang.CharSequence getSubSequence(int,int)>/$r2}" -> "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.FilePermission: void init(int)>/$r6}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkRead(java.lang.String)>[0@L888] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "VarNode{<java.io.FilePermission: void init(int)>/$r6}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkWrite(java.lang.String)>[0@L979] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "VarNode{<java.io.FilePermission: void init(int)>/$r6}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkDelete(java.lang.String)>[0@L1007] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "VarNode{<java.io.FilePermission: void init(int)>/$r6}" -> "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[22@L684] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "VarNode{<java.io.FilePermission: void init(int)>/$r6}" -> "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[46@L691] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "VarNode{<java.io.FilePermission: void init(int)>/$r6}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[4@L990] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "VarNode{<java.math.BigInteger: void implMulAddCheck(int[],int[],int,int,int)>/$r8}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String)>/$r6}" -> "VarNode{<javax.security.auth.x500.X500Principal: java.lang.String getName()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r25}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r45}" -> "ArrayIndexNode{NewObj{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>[55@L1875] newarray java.lang.Object[%intconst4]}}" [color=red];
  "VarNode{<java.security.KeyFactory: void <init>(java.lang.String)>/r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.KeyFactory: void <init>(java.lang.String)>/r2}" -> "VarNode{<java.security.KeyFactory: void <init>(java.lang.String)>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r35}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>[23@L1048] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>[23@L1048] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>[23@L1048] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r52}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object)>/msg}" [color=blue];
  "VarNode{<java.io.FilePermissionCollection: void add(java.security.Permission)>/$r7}" -> "VarNode{<java.io.FilePermissionCollection: void add(java.security.Permission)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle$RBClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>/r1}" -> "VarNode{<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.ResourceBundle$RBClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>/r1}" -> "VarNode{<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r44}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.SPILocaleProviderAdapter$1: java.util.spi.LocaleServiceProvider run()>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>/$r10}" -> "VarNode{<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ArrayList: boolean add(java.lang.Object)>/r2}" -> "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[3@L127] newarray java.lang.Object[%intconst0]}}" [color=red];
  "VarNode{<java.util.ArrayList: boolean add(java.lang.Object)>/r2}" -> "ArrayIndexNode{NewObj{<java.util.ArrayList: void <init>(int)>[3@L153] newarray java.lang.Object[i0]}}" [color=red];
  "VarNode{<java.util.ArrayList: boolean add(java.lang.Object)>/r2}" -> "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[1@L120] newarray java.lang.Object[%intconst0]}}" [color=red];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r28}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>/$r7}" -> "VarNode{<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>/r4}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>/r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>/r0}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r17}" [color=green3,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r16}" [color=green3,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r18}" [color=green3,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.io.File)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r16}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URI$Parser: int parseServer(int,int)>/$r4}" -> "VarNode{<java.net.URI: java.lang.String access$2402(java.net.URI,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>/r1}" -> "VarNode{<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r18}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/r19}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r33}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: boolean validatePromise(io.netty.channel.ChannelPromise,boolean)>/$r10}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.lang.NoSuchFieldException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/r87}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/r87}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r18}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253Name()>/$r2}" -> "VarNode{<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<io.netty.channel.AbstractChannel: java.lang.Object filterOutboundMessage(java.lang.Object)>/msg}" -> "VarNode{<io.netty.channel.AbstractChannel$AbstractUnsafe: void write(java.lang.Object,io.netty.channel.ChannelPromise)>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r12}" -> "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r13}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r90}" -> "VarNode{<java.security.UnresolvedPermission: void <init>(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate[])>/r3}" [color=blue];
  "InstanceFieldNode{NewObj{<io.netty.util.concurrent.AbstractEventExecutor: java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable,java.lang.Object)>[0@L106] new io.netty.util.concurrent.PromiseTask}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/r7}" [color=red,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r26}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r27}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r26}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r26}" -> "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r26}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r6}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r9}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r6}" -> "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: int checkVariants(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<sun.util.locale.StringTokenIterator: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r6}" -> "VarNode{<java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/%this}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>[23@L1048] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.net.SocketPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>[28@L1051] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.net.SocketPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[59@L704] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.net.SocketPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[10@L992] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.net.SocketPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[79@L228] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String actions>}" [color=red];
  "VarNode{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>/$r8}" -> "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/r3}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r9}" -> "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>[1@L1569] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String variant>}" [color=red];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r19}" -> "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r20}" [color=green3,style=dashed];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$c2}" -> "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/r12}" [color=green3,style=dashed];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$c2}" -> "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.reflect.Reflection: boolean isSameClassPackage(java.lang.ClassLoader,java.lang.String,java.lang.ClassLoader,java.lang.String)>/$r13}" -> "VarNode{<java.lang.InternalError: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r16}" -> "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/r0}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>[159@L413] new sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint}.<sun.security.util.DisabledAlgorithmConstraints$Constraint: java.lang.String algorithm>}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r8}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.OIDName: java.lang.String toString()>/$r6}" -> "VarNode{<sun.security.x509.GeneralName: java.lang.String toString()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r2}" -> "VarNode{<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>/r2}" [color=blue];
  "VarNode{<java.io.FilePermission: void init(int)>/$r12}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r13}" [color=green3,style=dashed];
  "VarNode{<java.io.FilePermission: void init(int)>/$r12}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.io.ObjectStreamField: java.lang.String getClassSignature(java.lang.Class)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.ObjectStreamField: java.lang.String getClassSignature(java.lang.Class)>/$r7}" -> "VarNode{<java.io.ObjectStreamField: java.lang.String getClassSignature(java.lang.Class)>/$r0}" [color=green3,style=dashed];
  "VarNode{<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>/r5}" -> "VarNode{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" [color=blue];
  "VarNode{<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>/r5}" -> "VarNode{<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>/r4}" [color=blue];
  "VarNode{<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>/r5}" -> "VarNode{<java.util.LinkedHashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" [color=blue];
  "VarNode{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>/$r30}" -> "VarNode{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>/$r31}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r2}" -> "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/r14}" [];
  "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r2}" -> "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r2}" -> "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r4}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/%taint-temp-7226}" -> "InstanceFieldNode{NewObj{<io.netty.channel.embedded.EmbeddedEventLoop: io.netty.channel.ChannelFuture register(io.netty.channel.Channel)>[0@L115] new io.netty.channel.DefaultChannelPromise}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" [color=red];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/%taint-temp-7226}" -> "InstanceFieldNode{NewObj{<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>[0@L739] new io.netty.channel.DefaultChannelPromise}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" [color=red];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/%taint-temp-7226}" -> "InstanceFieldNode{NewObj{<io.netty.util.concurrent.AbstractEventExecutor: java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable,java.lang.Object)>[0@L106] new io.netty.util.concurrent.PromiseTask}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" [color=red];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/%taint-temp-7226}" -> "InstanceFieldNode{NewObj{<io.netty.channel.AbstractChannel: io.netty.channel.ChannelPromise newPromise()>[0@L254] new io.netty.channel.DefaultChannelPromise}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" [color=red];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r48}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/r57}" [];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r6}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r33}" [color=green3,style=dashed];
  "VarNode{<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>/$r10}" -> "VarNode{<java.util.jar.JarFile: void <init>(java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253String(boolean)>/$r2}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253String(boolean)>/r5}" [];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253String(boolean)>/$r2}" -> "InstanceFieldNode{NewObj{<sun.security.x509.X500Name: void parseDER(sun.security.util.DerInputStream)>[27@L802] new sun.security.x509.RDN}.<sun.security.x509.RDN: java.lang.String canonicalString>}" [color=red];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253String(boolean)>/$r2}" -> "InstanceFieldNode{NewObj{<sun.security.x509.X500Name: void parseDN(java.lang.String,java.util.Map)>[34@L916] new sun.security.x509.RDN}.<sun.security.x509.RDN: java.lang.String canonicalString>}" [color=red];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253String(boolean)>/$r2}" -> "InstanceFieldNode{NewObj{<sun.security.x509.X500Name: void parseDN(java.lang.String,java.util.Map)>[45@L933] new sun.security.x509.RDN}.<sun.security.x509.RDN: java.lang.String canonicalString>}" [color=red];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[3@L127] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>/%native-arraycopy-temp44}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[3@L127] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.ArrayList$SubList$1: java.lang.Object next()>/$r5}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[3@L127] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.ArrayList$ListItr: java.lang.Object previous()>/$r3}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[3@L127] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.ArrayList: java.lang.Object elementData(int)>/$r2}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[3@L127] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.ArrayList$Itr: java.lang.Object next()>/$r4}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[3@L127] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>/%native-arraycopy-temp47}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[3@L127] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.ArrayList: boolean addAll(java.util.Collection)>/%native-arraycopy-temp206}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[3@L127] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.ArrayList: void add(int,java.lang.Object)>/%native-arraycopy-temp491}" [color=red,style=dashed];
  "VarNode{<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>/$r12}" -> "VarNode{<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.util.Enumeration getBootstrapResources(java.lang.String)>/r1}" -> "VarNode{<sun.misc.URLClassPath: java.util.Enumeration getResources(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String authority>}" -> "VarNode{<java.net.URI: void defineString()>/$r11}" [color=red,style=dashed];
  "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int)>/$r8}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r31}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r32}" [color=green3,style=dashed];
  "VarNode{<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r40}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r40}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/r2}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[127@L1505] new java.text.SimpleDateFormat}.<java.text.SimpleDateFormat: char[] compiledPattern>}" -> "VarNode{<java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r7}" [color=red,style=dashed];
  "VarNode{<sun.text.normalizer.RuleCharacterIterator: int next(int)>/$r19}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>/r1}" -> "VarNode{<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.net.URI: java.lang.String access$702(java.net.URI,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String scheme>}" [color=red];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void byteArrayAppend(java.lang.StringBuffer,byte[])>/r0}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(int)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void byteArrayAppend(java.lang.StringBuffer,byte[])>/r0}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void write(java.lang.Object,boolean,io.netty.channel.ChannelPromise)>/msg}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask: io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask access$1600(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/x1}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void write(java.lang.Object,boolean,io.netty.channel.ChannelPromise)>/msg}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext$WriteTask: io.netty.channel.AbstractChannelHandlerContext$WriteTask access$1700(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/x1}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void write(java.lang.Object,boolean,io.netty.channel.ChannelPromise)>/msg}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" [color=blue];
  "VarNode{<java.text.SimpleDateFormat: void applyPatternImpl(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.provider.DateFormatProviderImpl: java.text.DateFormat getInstance(int,int,java.util.Locale)>[4@L150] new java.text.SimpleDateFormat}.<java.text.SimpleDateFormat: java.lang.String pattern>}" [color=red];
  "VarNode{<java.text.SimpleDateFormat: void applyPatternImpl(java.lang.String)>/r1}" -> "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/r0}" [color=blue];
  "VarNode{<io.netty.buffer.UnpooledUnsafeDirectByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,int,int)>/$r17}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r3}" -> "VarNode{<io.netty.util.internal.logging.Log4JLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" [color=blue];
  "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r3}" -> "VarNode{<io.netty.util.internal.logging.JdkLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/r37}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/r37}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r33}" [color=green3,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.HashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>/r1}" -> "VarNode{<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>/r5}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$Node group0()>/$r28}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$Node group0()>/$r29}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.ManifestEntryVerifier: sun.security.util.JarConstraintsParameters getParams(java.util.Map,java.util.Map)>[19@L278] new sun.security.util.JarConstraintsParameters}.<sun.security.util.JarConstraintsParameters: java.lang.String message>}" -> "VarNode{<sun.security.util.JarConstraintsParameters: java.lang.String extendedExceptionMsg()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/$r7}" -> "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[82@L2364] newarray java.lang.String[%intconst0]}}" [color=red];
  "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/$r7}" -> "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[40@L1229] newarray java.lang.String[%intconst1]}}" [color=red];
  "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/$r7}" -> "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[103@L2377] newarray java.lang.String[i26]}}" [color=red];
  "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/$r7}" -> "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" [color=red];
  "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.TreeMap$Entry: java.lang.Object setValue(java.lang.Object)>/r2}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[3@L540] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.TreeMap$Entry: java.lang.Object setValue(java.lang.Object)>/r2}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>[26@L2571] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.TreeMap$Entry: java.lang.Object setValue(java.lang.Object)>/r2}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[47@L577] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" [color=red];
  "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r3}" -> "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r4}" [];
  "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" -> "VarNode{<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>/r5}" [color=blue];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r68}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r68}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>[1@L77] new java.net.URI}.<java.net.URI: java.lang.String path>}" -> "VarNode{<java.net.URI: java.lang.String getPath()>/$r3}" [color=red,style=dashed];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String convertOldISOCodes(java.lang.String)>/$r1}" -> "VarNode{<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r43}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[18@L196] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" -> "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String current()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.lang.ref.Reference: void <init>(java.lang.Object)>/r1}" -> "VarNode{<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/r1}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannel$AbstractUnsafe: void write(java.lang.Object,io.netty.channel.ChannelPromise)>/$r3}" -> "VarNode{<io.netty.channel.AbstractChannel$AbstractUnsafe: void write(java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" [];
  "VarNode{<io.netty.channel.AbstractChannel$AbstractUnsafe: void write(java.lang.Object,io.netty.channel.ChannelPromise)>/$r3}" -> "VarNode{<io.netty.channel.ChannelOutboundBuffer: void addMessage(java.lang.Object,int,io.netty.channel.ChannelPromise)>/msg}" [color=blue];
  "VarNode{<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>/r2}" -> "VarNode{<sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: void <init>(java.util.ArrayList,sun.security.util.ManifestDigester,java.lang.String,byte[])>/$r12}" -> "InstanceFieldNode{NewObj{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>[80@L302] new sun.security.util.SignatureFileVerifier}.<sun.security.util.SignatureFileVerifier: java.lang.String name>}" [color=red];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r5}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>[15@L1415] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [color=red];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r5}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String)>[10@L1406] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [color=red];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r5}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[157@L876] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [color=red];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r5}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>[89@L1890] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [color=red];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r5}" -> "InstanceFieldNode{NewObj{<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>[12@L303] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [color=red];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r5}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[173@L889] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [color=red];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r5}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser$DomainEntry: void add(sun.security.provider.PolicyParser$KeyStoreEntry)>[8@L1315] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [color=red];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r5}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>[50@L631] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [color=red];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r5}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>[51@L1872] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [color=red];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r5}" -> "InstanceFieldNode{NewObj{<java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>[0@L840] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [color=red];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r5}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>[66@L1880] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [color=red];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r5}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[140@L868] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [color=red];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r5}" -> "InstanceFieldNode{NewObj{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>[43@L1264] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [color=red];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r5}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: void read(java.io.Reader)>[109@L220] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [color=red];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r5}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: java.lang.String match(java.lang.String)>[18@L812] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" [color=red];
  "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: java.lang.StringBuilder appendFullRequest(java.lang.StringBuilder,io.netty.handler.codec.http.FullHttpRequest)>/req}" -> "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendInitialLine(java.lang.StringBuilder,io.netty.handler.codec.http.HttpRequest)>/req}" [color=blue];
  "VarNode{<java.io.PrintWriter: void println(java.lang.Object)>/r0}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/r0}" [color=blue];
  "VarNode{<java.io.PrintWriter: void println(java.lang.Object)>/r0}" -> "VarNode{<java.io.PrintWriter: void println(java.lang.Object)>/$r1}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.util.regex.PatternSyntaxException error(java.lang.String)>/r1}" -> "VarNode{<java.util.regex.PatternSyntaxException: void <init>(java.lang.String,java.lang.String,int)>/r1}" [color=blue];
  "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig$3: java.lang.String run()>/$r2}" -> "VarNode{<sun.security.jca.ProviderConfig$3: java.lang.Object run()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.EDIPartyName: java.lang.String toString()>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r52}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[9@L51] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" -> "VarNode{<io.netty.handler.codec.http.HttpMethod: java.lang.String name()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r4}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r21}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.Debug: void <clinit>()>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r6}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r4}" -> "VarNode{<java.lang.String: java.lang.String toString()>/%this}" [color=blue];
  "ArrayIndexNode{NewObj{<io.netty.util.ResourceLeakDetector: void reportLeak(io.netty.util.ResourceLeakDetector$Level)>[63@L259] newarray java.lang.Object[%intconst6]}}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r14}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<io.netty.util.ResourceLeakDetector: void reportLeak(io.netty.util.ResourceLeakDetector$Level)>[63@L259] newarray java.lang.Object[%intconst6]}}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r11}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r12}" -> "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r13}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r56}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r57}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253String(boolean)>/r5}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r10}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>[26@L2571] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" -> "VarNode{<java.util.TreeMap$KeyIterator: java.lang.Object next()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>[26@L2571] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" -> "VarNode{<java.util.TreeMap: void deleteEntry(java.util.TreeMap$Entry)>/$r18}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>[26@L2571] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>[26@L2571] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.Object getKey()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/r4}" -> "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/r4}" -> "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/$r18}" [color=green3,style=dashed];
  "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/r4}" -> "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/$r24}" [color=green3,style=dashed];
  "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/r4}" -> "VarNode{<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.File: long lastModified()>/$r3}" -> "VarNode{<java.lang.SecurityManager: void checkRead(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" -> "VarNode{<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String)>[14@L184] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" -> "VarNode{<java.lang.ref.Reference: java.lang.Object get()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r24}" -> "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r25}" [color=green3,style=dashed];
  "VarNode{<java.util.Collections: void swap(java.util.List,int,int)>/$r1}" -> "VarNode{<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>/r2}" [color=blue];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r51}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>/$r14}" -> "VarNode{<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>/$r14}" -> "VarNode{<java.util.ResourceBundle$RBClassLoader: java.net.URL getResource(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.text.normalizer.NormalizerBase$NFKCMode: java.lang.String normalize(java.lang.String,int)>/r0}" -> "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String compose(java.lang.String,boolean,int)>/r0}" [color=blue];
  "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r6}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r6}" -> "VarNode{<sun.security.jca.ProviderList: java.lang.String toString()>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>/$r8}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r58}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>[117@L1543] new java.security.UnresolvedPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>[30@L1210] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" -> "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.lang.InternalError>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[81@L308] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[81@L308] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[81@L308] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[81@L308] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r61}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r11}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/$r15}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/%taint-temp-8402}" [];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.text.normalizer.NormalizerImpl: void <clinit>()>/$r10}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.jar.JarFile: java.util.zip.ZipEntry getEntry(java.lang.String)>/r1}" -> "VarNode{<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.GregorianCalendar: int computeFields(int,int)>/$r62}" -> "VarNode{<java.util.GregorianCalendar: int computeFields(int,int)>/$r63}" [color=green3,style=dashed];
  "VarNode{<io.netty.buffer.AbstractByteBufAllocator: void validate(int,int)>/$r10}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Provider: void addEngine(java.lang.String,boolean,java.lang.String)>/$r5}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[21@L199] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String privateuse>}" -> "VarNode{<sun.util.locale.LanguageTag: java.lang.String getPrivateuse()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r37}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r18}" -> "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r19}" [color=green3,style=dashed];
  "VarNode{<sun.util.calendar.CalendarSystem: java.util.Properties getCalendarProperties()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>[21@L272] new java.net.URL}.<java.net.URL: java.lang.String file>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r21}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[0@L823] new java.net.URL}.<java.net.URL: java.lang.String file>}" [color=red];
  "VarNode{<sun.security.x509.X509AttributeName: java.lang.String getPrefix()>/$r1}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X509AttributeName: java.lang.String getPrefix()>/$r1}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.security.Timestamp: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.Timestamp: java.lang.String toString()>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r10}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r10}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r10}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.io.File)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r10}" -> "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r10}" -> "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r11}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r12}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r11}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String getCallerInfo()>/$r3}" -> "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r20}" -> "VarNode{<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>/r2}" [color=blue];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r23}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r23}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r23}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r23}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.security.Timestamp: java.lang.String toString()>/$r9}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<javax.security.auth.x500.X500Principal: java.lang.String getName()>/$r1}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/r72}" [color=blue,style=dashed];
  "VarNode{<javax.security.auth.x500.X500Principal: java.lang.String getName()>/$r1}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r7}" -> "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r8}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>[18@L699] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String prefix>}" -> "VarNode{<sun.security.x509.X509AttributeName: java.lang.String getPrefix()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>/$r22}" -> "VarNode{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>/$r23}" [color=green3,style=dashed];
  "VarNode{<java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>/$r8}" -> "VarNode{<java.lang.ClassCastException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String getLanguage()>/$r2}" -> "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String getLanguage()>/$r2}" -> "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String getLanguage()>/$r2}" -> "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String getLanguage()>/$r2}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.text.AttributedString$AttributeMap: java.util.Set entrySet()>[34@L1082] new java.text.AttributeEntry}.<java.text.AttributeEntry: java.lang.Object value>}" -> "VarNode{<java.text.AttributeEntry: java.lang.Object getValue()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>/$r12}" -> "VarNode{<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>/$r13}" [color=green3,style=dashed];
  "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.Exception: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>/$r36}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>/$r36}" -> "VarNode{<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>/$r35}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r4}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r5}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r4}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r4}" -> "VarNode{<java.util.HashMap$TreeNode: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r1}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r6}" -> "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r5}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/$r5}" [color=green3,style=dashed];
  "VarNode{<sun.util.calendar.CalendarSystem$1: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.calendar.CalendarSystem: java.util.Properties getCalendarProperties()>[17@L195] new sun.util.calendar.CalendarSystem$1}.<sun.util.calendar.CalendarSystem$1: java.lang.String val$fname>}" [color=red];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" [];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r9}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>/r1}" -> "VarNode{<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>/r1}" -> "VarNode{<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r8}" -> "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r9}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.lang.Exception>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>/r4}" -> "VarNode{<java.io.FilePermission: void <init>(java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>/r4}" -> "VarNode{<java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>/r4}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>/r4}" -> "VarNode{<java.util.PropertyPermission: void <init>(java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r3}" -> "VarNode{<java.util.HashMap$TreeNode: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r19}" -> "VarNode{<java.net.MalformedURLException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.AccessControlContext$1: java.lang.Void run()>/$r6}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.io.File: java.lang.String getParent()>/$r2}" -> "VarNode{<java.io.File: java.lang.String getParent()>/$r3}" [color=green3,style=dashed];
  "VarNode{<java.io.File: java.lang.String getParent()>/$r2}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r8}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.LinkedList: void linkLast(java.lang.Object)>[1@L142] new java.util.LinkedList$Node}.<java.util.LinkedList$Node: java.lang.Object item>}" -> "VarNode{<java.util.LinkedList: java.lang.Object[] toArray()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedList: void linkLast(java.lang.Object)>[1@L142] new java.util.LinkedList$Node}.<java.util.LinkedList$Node: java.lang.Object item>}" -> "VarNode{<java.util.LinkedList$ListItr: java.lang.Object next()>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedList: void linkLast(java.lang.Object)>[1@L142] new java.util.LinkedList$Node}.<java.util.LinkedList$Node: java.lang.Object item>}" -> "VarNode{<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>/$r2}" [color=red,style=dashed];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r10}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r54}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" -> "VarNode{<java.util.HashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r1}" -> "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r2}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r1}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "VarNode{<java.util.ArrayList: void subListRangeCheck(int,int,int)>/$r12}" -> "VarNode{<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.JapaneseImperialCalendar: java.util.Map getDisplayNames(int,int,java.util.Locale)>/$r13}" -> "VarNode{<java.util.HashSet: boolean add(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r6}" -> "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r5}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r84}" -> "VarNode{<java.lang.SecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" -> "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r48}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" -> "VarNode{<sun.security.x509.X509Key: java.security.PublicKey parse(sun.security.util.DerValue)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" -> "VarNode{<sun.security.x509.X509CRLImpl: void <init>(sun.security.util.DerValue)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" -> "VarNode{<sun.security.pkcs.PKCS7: void parseNetscapeCertChain(sun.security.util.DerValue)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" -> "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r44}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" -> "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r57}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" -> "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r51}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" -> "VarNode{<sun.text.normalizer.UCharacter: void <clinit>()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" -> "VarNode{<sun.text.normalizer.NormalizerImpl: void <clinit>()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" -> "VarNode{<java.util.Locale$Builder: java.util.Locale$Builder setLocale(java.util.Locale)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" -> "VarNode{<java.net.URISyntaxException: java.lang.String getReason()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" -> "VarNode{<sun.security.pkcs.PKCS7: void parse(sun.security.util.DerInputStream)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" -> "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r43}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" -> "VarNode{<sun.security.pkcs.PKCS7: void parseOldSignedData(sun.security.util.DerValue)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" -> "VarNode{<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty getInstance()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" -> "VarNode{<sun.security.pkcs.PKCS7: void parseOldSignedData(sun.security.util.DerValue)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" -> "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/$r42}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r40}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" -> "VarNode{<sun.security.pkcs.PKCS7: void parseNetscapeCertChain(sun.security.util.DerValue)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" -> "VarNode{<sun.security.x509.X509Key: byte[] getEncodedInternal()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" -> "VarNode{<java.lang.Throwable: java.lang.String getLocalizedMessage()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r53}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r38}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r9}" -> "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r13}" [color=blue,style=dashed];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r9}" -> "VarNode{<sun.reflect.MethodAccessorGenerator: java.lang.String buildInternalSignature()>/$r8}" [color=blue,style=dashed];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r9}" -> "VarNode{<sun.reflect.MethodAccessorGenerator: java.lang.String buildInternalSignature()>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String)>/$r2}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r73}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String)>/$r2}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r21}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String)>/$r2}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>/$r8}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String)>/$r2}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>/$r6}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String)>/$r2}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String)>/$r2}" -> "VarNode{<sun.security.provider.PolicyParser: java.util.Map parseProperties(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>/r3}" -> "VarNode{<sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String getDateTimePattern(int,int,java.util.Calendar)>/$r2}" -> "VarNode{<sun.util.locale.provider.DateFormatProviderImpl: java.text.DateFormat getInstance(int,int,java.util.Locale)>/$r7}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253String(java.util.Map)>/$r13}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>/$r14}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253String(java.util.Map)>/$r13}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>/$r16}" [color=blue,style=dashed];
  "VarNode{<io.netty.buffer.AbstractByteBufAllocator: void validate(int,int)>/$r4}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/r32}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r36}" [color=green3,style=dashed];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/r32}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/r32}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r38}" [color=green3,style=dashed];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/r32}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r22}" [color=green3,style=dashed];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/r32}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/r32}" [color=green3,style=dashed];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/r32}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/r32}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/r32}" -> "VarNode{<sun.net.util.IPAddressUtil: byte[] textToNumericFormatV6(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/r32}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/r33}" [color=green3,style=dashed];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/r32}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/r32}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName0(java.lang.String,java.net.InetAddress,boolean)>/r0}" [color=blue];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>[28@L1051] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>[28@L1051] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>[28@L1051] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r22}" -> "VarNode{<java.util.ServiceLoader: void access$100(java.lang.Class,java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r2}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigInteger,java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean)>/r3}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/r5}" [color=blue];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.rsa.RSAUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.security.AlgorithmParameters)>/$r14}" -> "VarNode{<sun.security.rsa.RSAUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.security.AlgorithmParameters)>/$r15}" [color=green3,style=dashed];
  "VarNode{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String)>/r1}" -> "VarNode{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.StringTokenIterator: void <init>(java.lang.String,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[11@L194] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" [color=red];
  "VarNode{<sun.util.locale.StringTokenIterator: void <init>(java.lang.String,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[18@L196] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" [color=red];
  "VarNode{<sun.util.locale.StringTokenIterator: void <init>(java.lang.String,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[55@L458] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" [color=red];
  "VarNode{<sun.util.locale.StringTokenIterator: void <init>(java.lang.String,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>[11@L499] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" [color=red];
  "VarNode{<sun.util.locale.StringTokenIterator: void <init>(java.lang.String,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>[8@L599] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" [color=red];
  "VarNode{<sun.util.locale.StringTokenIterator: void <init>(java.lang.String,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: java.lang.String removePrivateuseVariant(java.lang.String)>[0@L542] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" [color=red];
  "VarNode{<sun.util.locale.StringTokenIterator: void <init>(java.lang.String,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: int checkVariants(java.lang.String,java.lang.String)>[0@L574] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" [color=red];
  "VarNode{<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>/$r26}" -> "InstanceFieldNode{NewObj{<sun.util.locale.provider.DecimalFormatSymbolsProviderImpl: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>[4@L85] new java.text.DecimalFormatSymbols}.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol>}" [color=red];
  "VarNode{<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>/$r20}" -> "VarNode{<java.util.Currency: java.util.Currency getInstance(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r42}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r37}" -> "VarNode{<java.util.Currency: void info(java.lang.String,java.lang.Throwable)>/r3}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void doubleArrayAppend(java.lang.StringBuffer,double[])>/r0}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<java.io.FilePermissionCollection: void add(java.security.Permission)>/$r8}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>/r0}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/r32}" [color=blue];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r27}" -> "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r28}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.IPAddressName: void <init>(java.lang.String)>/$r12}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r47}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r48}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1784] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object value>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1784] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object value>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1784] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object value>}" -> "VarNode{<java.util.HashMap: java.lang.Object get(java.lang.Object)>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1784] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object value>}" -> "VarNode{<java.util.HashMap$Node: java.lang.Object getValue()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1784] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object value>}" -> "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r5}" [color=red,style=dashed];
  "VarNode{<java.security.Signature: java.security.Signature getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>/r5}" -> "VarNode{<java.security.Signature$Delegate: void <init>(java.security.SignatureSpi,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Signature: java.security.Signature getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>/r5}" -> "InstanceFieldNode{NewObj{<java.security.Signature: java.security.Signature getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>[10@L288] new java.security.Signature$Delegate}.<java.security.Signature: java.lang.String algorithm>}" [color=red];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[21@L199] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String language>}" -> "VarNode{<sun.util.locale.LanguageTag: java.lang.String getLanguage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.net.URI: void appendFragment(java.lang.StringBuffer,java.lang.String)>/r1}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<java.io.File: boolean exists()>/$r3}" -> "VarNode{<java.lang.SecurityManager: void checkRead(java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r13}" -> "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r4}" [color=green3,style=dashed];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/r0}" -> "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r6}" [];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/r0}" -> "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$c3}" [color=green3,style=dashed];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/r0}" -> "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r4}" [color=green3,style=dashed];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/r0}" -> "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,boolean)>/$r6}" -> "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/r1}" [color=blue];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r15}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r16}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r26}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r26}" -> "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r25}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[79@L228] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[79@L228] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[79@L228] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/$r1}" -> "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/r8}" [];
  "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/$r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName0(java.lang.String,java.lang.String)>/r2}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.security.Signature$Delegate: java.security.SignatureSpi newInstance(java.security.Provider$Service)>/$r10}" -> "VarNode{<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r37}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r12}" -> "VarNode{<java.text.ChoiceFormat: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r19}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r22}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r19}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r25}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r19}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r19}" -> "VarNode{<java.util.StringTokenizer: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r19}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r66}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r19}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>/r2}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r19}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r71}" [color=green3,style=dashed];
  "VarNode{<java.util.PropertyPermissionCollection: void add(java.security.Permission)>/$r15}" -> "VarNode{<java.util.PropertyPermissionCollection: void add(java.security.Permission)>/$r16}" [color=green3,style=dashed];
  "VarNode{<java.lang.SecurityManager: void checkDelete(java.lang.String)>/r2}" -> "VarNode{<java.io.FilePermission: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r70}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r70}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r69}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,boolean)>/r4}" -> "VarNode{<java.util.ResourceBundle$CacheKey: void setFormat(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,boolean)>/r4}" -> "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/r4}" [color=blue];
  "VarNode{<java.text.DecimalFormatSymbols: java.lang.String getCurrencySymbol()>/$r1}" -> "VarNode{<java.text.DecimalFormat: java.lang.String expandAffix(java.lang.String,java.lang.StringBuffer)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(long,java.util.Locale)>/$r39}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/r4}" [color=blue];
  "VarNode{<java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>/$r4}" -> "VarNode{<sun.security.pkcs.PKCS7: void parseOldSignedData(sun.security.util.DerValue)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>/$r4}" -> "VarNode{<sun.security.x509.X509CRLImpl: void <init>(sun.security.util.DerValue)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>/$r4}" -> "VarNode{<sun.security.pkcs.PKCS7: void parseNetscapeCertChain(sun.security.util.DerValue)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>/$r4}" -> "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r57}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>/$r4}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>/$r4}" -> "VarNode{<sun.text.normalizer.UCharacter: void <clinit>()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>/$r4}" -> "VarNode{<sun.text.normalizer.NormalizerImpl: void <clinit>()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>/$r4}" -> "VarNode{<sun.security.pkcs.PKCS7: void parse(sun.security.util.DerInputStream)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>/$r4}" -> "VarNode{<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty getInstance()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>/$r4}" -> "VarNode{<java.lang.Throwable: java.lang.String getLocalizedMessage()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>/$r4}" -> "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r48}" [color=blue,style=dashed];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.util.concurrent.EventExecutor,java.lang.String,boolean,boolean)>/name}" -> "InstanceFieldNode{NewObj{<io.netty.channel.DefaultChannelPipeline: void <init>(io.netty.channel.AbstractChannel)>[7@L87] new io.netty.channel.DefaultChannelPipeline$TailContext}.<io.netty.channel.AbstractChannelHandlerContext: java.lang.String name>}" [color=red];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.util.concurrent.EventExecutor,java.lang.String,boolean,boolean)>/name}" -> "InstanceFieldNode{NewObj{<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext newContext(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)>[0@L95] new io.netty.channel.DefaultChannelHandlerContext}.<io.netty.channel.AbstractChannelHandlerContext: java.lang.String name>}" [color=red];
  "VarNode{<sun.misc.URLClassPath$FileLoader: void <init>(java.net.URL)>/$r5}" -> "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/r0}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.security.ProviderException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.util.CurveDB: java.lang.String[] getNamesByOID(java.lang.String)>/$r8}" -> "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[40@L1229] newarray java.lang.String[%intconst1]}}" [color=red];
  "VarNode{<sun.security.util.CurveDB: java.lang.String[] getNamesByOID(java.lang.String)>/$r8}" -> "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" [color=red];
  "VarNode{<java.security.KeyFactory: void <init>(java.lang.String)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.lang.Package definePackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r3}" -> "VarNode{<java.lang.String: java.lang.String concat(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DerValue: byte[] getBitString()>/$r7}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r48}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r49}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r13}" -> "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r14}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r44}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>/r3}" -> "VarNode{<java.lang.SecurityManager: void checkRead(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>/r3}" -> "VarNode{<java.lang.SecurityManager: void checkWrite(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.net.UnknownHostException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.StringBuffer: java.lang.AbstractStringBuilder append(java.lang.String)>/r1}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: java.lang.CharSequence toCharSequence(java.lang.Object)>/$r9}" -> "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Object)>/$r3}" [color=blue,style=dashed];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: java.lang.CharSequence toCharSequence(java.lang.Object)>/$r9}" -> "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Object)>/r4}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/r57}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: void <clinit>()>/$r6}" -> "VarNode{<io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(sun.security.util.DerInputStream)>/$r11}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.Inet6Address: java.lang.String numericToTextFormat(byte[])>/$r1}" -> "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r35}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>/r6}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1774] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>/r6}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1779] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>/r6}" -> "VarNode{<java.util.LinkedHashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" [color=blue];
  "VarNode{<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>/r6}" -> "VarNode{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" [color=blue];
  "VarNode{<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>/r6}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1784] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>/r6}" -> "VarNode{<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>/r6}" [color=blue];
  "VarNode{<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>/r6}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1789] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object value>}" [color=red];
  "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/$r12}" -> "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/$r13}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/r50}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r51}" [];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/r50}" -> "VarNode{<java.util.Formatter$FormatSpecifier: char[] addZeros(char[],int)>/r0}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$c5}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r33}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: void parse(sun.security.util.DerValue)>[26@L649] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String dn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String toString()>/$r2}" [color=red,style=dashed];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r6}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/r35}" [];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r6}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r11}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CRLImpl: void parse(sun.security.util.DerValue)>[104@L1116] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CRLImpl: void parse(sun.security.util.DerValue)>[104@L1116] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r11}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CRLImpl: void parse(sun.security.util.DerValue)>[104@L1116] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r6}" [color=red,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r45}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DerValue: sun.security.util.BitArray getUnalignedBitString(boolean)>/$r7}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.UnresolvedPermissionCollection: void add(java.security.Permission)>/$r8}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r40}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r59}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.io.File: java.lang.String getCanonicalPath()>/$r4}" -> "VarNode{<java.security.Security: void initialize()>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.io.File: java.lang.String getCanonicalPath()>/$r4}" -> "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.io.File: java.lang.String getCanonicalPath()>/$r4}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.io.File: java.lang.String getCanonicalPath()>/$r4}" -> "VarNode{<java.util.logging.LogManager: void readConfiguration()>/r31}" [color=blue,style=dashed];
  "VarNode{<java.io.File: java.lang.String getCanonicalPath()>/$r4}" -> "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.io.File: java.lang.String getCanonicalPath()>/$r4}" -> "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/r39}" [color=blue,style=dashed];
  "VarNode{<java.io.File: java.lang.String getCanonicalPath()>/$r4}" -> "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.io.File: java.lang.String getCanonicalPath()>/$r4}" -> "VarNode{<java.io.File: java.io.File getCanonicalFile()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.io.File: java.lang.String getCanonicalPath()>/$r4}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.security.SignatureException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.JarConstraintsParameters: java.lang.String toString()>/$r9}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.x509.X500Name: void parseDN(java.lang.String,java.util.Map)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.lang.reflect.Modifier: java.lang.String toString(int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.net.URLClassLoader: java.lang.Class defineClass(java.lang.String,sun.misc.Resource)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getEncAlgFromSigAlg(java.lang.String)>/r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/r51}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.io.StringWriter: void write(java.lang.String,int,int)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String parentOrNull(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String,int)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.lang.Package$1: java.lang.Package run()>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>/r43}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r86}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.net.www.ParseUtil: byte unescape(java.lang.String,int)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: java.lang.String removePrivateuseVariant(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>/$r35}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/$r31}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.math.BigInteger: void <init>(java.lang.String,int)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.lang.String: java.lang.CharSequence subSequence(int,int)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void <init>(java.util.ArrayList,sun.security.util.ManifestDigester,java.lang.String,byte[])>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String,int)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.net.Parts: void <init>(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.util.Formatter: java.util.Formatter$FormatString[] parse(java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.net.SocketPermission: int[] parsePort(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.util.logging.LogManager$LoggerContext: java.util.logging.LogManager$LogNode getNode(java.lang.String)>/r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.net.URI$Parser: java.lang.String substring(int,int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.util.Formatter$FormatSpecifier: int index(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.net.RegisteredDomain: java.lang.String getRegisteredDomain(java.lang.String)>/$r48}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String fromURIPath(java.lang.String)>/r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.io.File: java.lang.String getParent()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r37}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.misc.Launcher$AppClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.net.Parts: void <init>(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r33}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.util.Locale: java.util.Locale initDefault()>/r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r49}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.util.locale.StringTokenIterator: sun.util.locale.StringTokenIterator setStart(int)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.text.normalizer.UnicodeSet: void applyPropertyPattern(sun.text.normalizer.RuleCharacterIterator,java.lang.StringBuffer,sun.text.normalizer.SymbolTable)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r35}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.io.File: java.lang.String getParent()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable)>/r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.math.BigInteger: void <init>(java.lang.String,int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String next()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String,int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.String)>/r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.math.BigInteger: void <clinit>()>/$r70}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.net.SocketPermission: void getIP()>/r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" -> "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/$r6}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC1779String(java.util.Map)>/$r3}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toRFC1779String(java.util.Map)>/$r11}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC1779String(java.util.Map)>/$r3}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toRFC1779String(java.util.Map)>/$r8}" [color=blue,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>[18@L1511] newarray java.lang.String[%intconst1]}}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r9}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>[18@L1511] newarray java.lang.String[%intconst1]}}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r10}" [color=red,style=dashed];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r10}" -> "VarNode{<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r46}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r46}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/r2}" [color=green3,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayDeque: void <init>()>[2@L193] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.ArrayDeque: void doubleCapacity()>/%native-arraycopy-temp167}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayDeque: void <init>()>[2@L193] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.ArrayDeque: void doubleCapacity()>/%native-arraycopy-temp170}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayDeque: void <init>()>[2@L193] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])>/%native-arraycopy-temp473}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayDeque: void <init>()>[2@L193] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])>/%native-arraycopy-temp476}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayDeque: void <init>()>[2@L193] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])>/%native-arraycopy-temp479}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r9}" -> "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r10}" [];
  "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r7}" -> "VarNode{<java.util.MissingFormatArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>/$r6}" -> "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>/$r5}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[17@L63] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" -> "VarNode{<io.netty.handler.codec.http.HttpMethod: java.lang.String name()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253Name(java.util.Map)>/$r5}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253Name()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.CharSequence subSequence(int,int)>/%this}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.CharSequence subSequence(int,int)>/$r1}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r21}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>/$r8}" -> "VarNode{<java.util.ServiceConfigurationError: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r19}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r52}" [color=green3,style=dashed];
  "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r43}" -> "InstanceFieldNode{NewObj{<sun.util.locale.provider.CalendarProviderImpl: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>[0@L84] new java.util.Calendar$Builder}.<java.util.Calendar$Builder: java.lang.String type>}" [color=red];
  "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r43}" -> "InstanceFieldNode{NewObj{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void <init>(java.lang.String,int,int,int)>[18@L697] new java.util.Calendar$Builder}.<java.util.Calendar$Builder: java.lang.String type>}" [color=red];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r10}" -> "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>/r3}" [color=blue];
  "VarNode{<java.util.Formatter$Flags: java.util.Formatter$Flags parse(java.lang.String)>/$r5}" -> "VarNode{<java.util.DuplicateFormatFlagsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r16}" -> "VarNode{<java.text.DecimalFormat: void append(java.lang.StringBuffer,java.lang.String,java.text.Format$FieldDelegate,java.text.FieldPosition[],java.text.Format$Field)>/r1}" [color=blue];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.String substring(int)>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.String substring(int)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/r0}" -> "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/r0}" -> "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/$r18}" [color=green3,style=dashed];
  "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: void <clinit>()>/$r20}" -> "VarNode{<io.netty.util.Signal: io.netty.util.Signal valueOf(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.misc.URLClassPath$1: boolean next()>/$r5}" -> "VarNode{<sun.misc.URLClassPath$FileLoader: java.net.URL findResource(java.lang.String,boolean)>/r1}" [color=blue];
  "VarNode{<sun.misc.URLClassPath$1: boolean next()>/$r5}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: java.net.URL findResource(java.lang.String,boolean)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r12}" -> "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r11}" [color=green3,style=dashed];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r5}" -> "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r9}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>[1@L1569] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String language>}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r1}" [color=red,style=dashed];
  "VarNode{<java.util.Hashtable$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.Hashtable$Entry)>/r2}" -> "InstanceFieldNode{NewObj{<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>[17@L436] new java.util.Hashtable$Entry}.<java.util.Hashtable$Entry: java.lang.Object value>}" [color=red];
  "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toUpperString(java.lang.String)>/r0}" -> "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r14}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toUpperString(java.lang.String)>/r0}" -> "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toUpperString(java.lang.String)>/r0}" -> "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeRegion(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r18}" -> "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r19}" [color=green3,style=dashed];
  "VarNode{<java.lang.SecurityManager: java.lang.String[] getPackages(java.lang.String)>/r0}" -> "VarNode{<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/r38}" -> "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/r38}" -> "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r14}" -> "VarNode{<java.net.MalformedURLException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.PropertyExpander$ExpandException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r71}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r72}" [color=green3,style=dashed];
  "VarNode{<java.security.BasicPermissionCollection: void add(java.security.Permission)>/$r13}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkUserInfo(java.lang.String)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkUserInfo(java.lang.String)>/$r3}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkUserInfo(java.lang.String)>/$r2}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.Cipher$Transform: int supportsPadding(java.security.Provider$Service)>/$r2}" -> "VarNode{<javax.crypto.Cipher$Transform: int supports(java.security.Provider$Service,java.lang.String,java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.io.FilePermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkRead(java.lang.String)>[0@L888] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.io.FilePermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkWrite(java.lang.String)>[0@L979] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.io.FilePermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkDelete(java.lang.String)>[0@L1007] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.io.FilePermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[22@L684] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.io.FilePermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[46@L691] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.io.FilePermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[4@L990] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String actions>}" [color=red];
  "ArrayIndexNode{MultiArrayObj{alloc=r29 = newmultiarray java.lang.String[%intconst1][%intconst2],type=java.lang.String[] in <sun.security.provider.PolicyFile: java.lang.String[][] getPrincipalInfo(sun.security.provider.PolicyParser$PrincipalEntry,java.security.Principal[])>}}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r42}" [color=red,style=dashed];
  "ArrayIndexNode{MultiArrayObj{alloc=r29 = newmultiarray java.lang.String[%intconst1][%intconst2],type=java.lang.String[] in <sun.security.provider.PolicyFile: java.lang.String[][] getPrincipalInfo(sun.security.provider.PolicyParser$PrincipalEntry,java.security.Principal[])>}}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r46}" [color=red,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r14}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r14}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r14}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r14}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r13}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r39}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/r72}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/r72}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r20}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/$r13}" -> "VarNode{<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarFieldValueNameGetter: java.lang.String getObject(java.util.spi.CalendarNameProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r10}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getDisplayName(java.lang.String,int,int,int,java.util.Locale)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarFieldValueNameGetter: java.lang.String getObject(java.util.spi.CalendarNameProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r10}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getJavaTimeDisplayName(java.lang.String,int,int,int,java.util.Locale)>/r1}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask: void write(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask: void write(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r29}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.cert.Certificate[] getCertificates(java.security.KeyStore,java.lang.String,sun.security.provider.PolicyFile$PolicyInfo)>/r1}" [color=blue];
  "VarNode{<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>/$r5}" -> "VarNode{<sun.security.util.Debug: java.lang.String marshal(java.lang.String)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>/$r5}" -> "VarNode{<sun.security.util.Debug: java.lang.String marshal(java.lang.String)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>/$r5}" -> "VarNode{<java.lang.Double: java.lang.String toHexString(double)>/$r5}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.provider.SPILocaleProviderAdapter$1: java.util.spi.LocaleServiceProvider run()>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>[35@L1238] new sun.security.util.ObjectIdentifier}.<sun.security.util.ObjectIdentifier: java.lang.String stringForm>}" -> "VarNode{<sun.security.util.ObjectIdentifier: java.lang.String toString()>/r11}" [color=red,style=dashed];
  "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.StringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.StringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>/%this}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.logging.JdkLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" [color=blue];
  "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/$r20}" -> "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/$r9}" [color=green3,style=dashed];
  "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void booleanArrayAppend(java.lang.StringBuffer,boolean[])>/r0}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<java.time.DateTimeException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.util.MissingFormatArgumentException: java.lang.String getMessage()>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r1}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r13}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r48}" -> "VarNode{<sun.security.pkcs.ParsingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r13}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r25}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r13}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r5}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.URIName: sun.security.x509.URIName nameConstraint(sun.security.util.DerValue)>/$r8}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r49}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r15}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r14}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>[43@L1264] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>[43@L1264] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r3}" [color=red,style=dashed];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.logging.LogManager: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String,java.lang.Class)>/r1}" -> "VarNode{<java.util.logging.Logger: void <init>(java.lang.String,java.lang.String,java.lang.Class,java.util.logging.LogManager,boolean)>/r6}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r38}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.logging.PlatformLogger: void config(java.lang.String)>/r1}" -> "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>/r3}" [color=blue];
  "VarNode{<java.io.File: java.net.URI toURI()>/$r3}" -> "VarNode{<java.io.File: java.net.URI toURI()>/r10}" [];
  "VarNode{<java.io.File: java.net.URI toURI()>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.File: java.net.URI toURI()>/$r3}" -> "VarNode{<java.io.File: java.net.URI toURI()>/$r6}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L256] new java.util.LinkedHashMap$Entry}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap$Node: java.lang.Object getKey()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L256] new java.util.LinkedHashMap$Entry}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap$KeyIterator: java.lang.Object next()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L256] new java.util.LinkedHashMap$Entry}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.LinkedHashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L256] new java.util.LinkedHashMap$Entry}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.LinkedHashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L256] new java.util.LinkedHashMap$Entry}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L256] new java.util.LinkedHashMap$Entry}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r4}" [color=red,style=dashed];
  "VarNode{<sun.util.calendar.CalendarSystem$1: java.util.Properties run()>/$r3}" -> "VarNode{<java.io.FileInputStream: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>/r1}" -> "VarNode{<java.util.jar.JarFile: java.util.zip.ZipEntry getEntry(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r14}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r15}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[17@L446] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String mode>}" -> "VarNode{<javax.crypto.Cipher$Transform: int supportsMode(java.security.Provider$Service)>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r14}" -> "VarNode{<java.security.SignatureException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/$r15}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r2}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r16}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r100}" [color=green3,style=dashed];
  "VarNode{<sun.misc.URLClassPath$2: void <init>(sun.misc.URLClassPath,java.lang.String,boolean)>/r2}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath: java.util.Enumeration getResources(java.lang.String,boolean)>[0@L315] new sun.misc.URLClassPath$2}.<sun.misc.URLClassPath$2: java.lang.String val$name>}" [color=red];
  "VarNode{<javax.crypto.JceSecurityManager: javax.crypto.CryptoPermission getCryptoPermission(java.lang.String)>/r37}" -> "VarNode{<javax.crypto.JceSecurityManager: javax.crypto.CryptoPermission getCryptoPermission(java.lang.String)>/$r1}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.JceSecurityManager: javax.crypto.CryptoPermission getCryptoPermission(java.lang.String)>/r37}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/r0}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/r0}" -> "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/$r1}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r58}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r18}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r19}" [color=green3,style=dashed];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>/$r12}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r46}" -> "VarNode{<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Package$1: void <init>(java.lang.String,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.lang.Package: java.lang.Package defineSystemPackage(java.lang.String,java.lang.String)>[0@L570] new java.lang.Package$1}.<java.lang.Package$1: java.lang.String val$iname>}" [color=red];
  "VarNode{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>/$r5}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>/$r6}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>/$r1}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.net.NetPermission: void <init>(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.security.BasicPermission: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r44}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>/$r6}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: void checkNumeric()>/$r9}" -> "VarNode{<java.util.IllegalFormatFlagsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/$r6}" -> "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/$r7}" [color=green3,style=dashed];
  "VarNode{<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String)>/$r8}" -> "VarNode{<javax.security.auth.x500.X500Principal: java.lang.String getName()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.net.SocketPermission: int[] parsePort(java.lang.String)>/$r1}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r3}" -> "VarNode{<java.util.HashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" [color=blue];
  "VarNode{<io.netty.channel.DefaultChannelPipeline$TailContext: void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)>/msg}" -> "VarNode{<io.netty.util.internal.logging.Log4JLogger: void debug(java.lang.String,java.lang.Object)>/arg}" [color=blue];
  "VarNode{<io.netty.channel.DefaultChannelPipeline$TailContext: void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)>/msg}" -> "VarNode{<io.netty.util.internal.logging.JdkLogger: void debug(java.lang.String,java.lang.Object)>/arg}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r13}" -> "VarNode{<java.util.ArrayList: boolean add(java.lang.Object)>/r2}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>/$r1}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>/$r1}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r58}" [color=blue,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.io.EOFException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[47@L196] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[47@L196] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<java.util.Arrays: void rangeCheck(int,int,int)>/$r9}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r37}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r73}" -> "ArrayIndexNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[160@L880] newarray java.lang.Object[%intconst11]}}" [color=red];
  "InstanceFieldNode{NewObj{<sun.util.calendar.CalendarSystem: java.util.Properties getCalendarProperties()>[17@L195] new sun.util.calendar.CalendarSystem$1}.<sun.util.calendar.CalendarSystem$1: java.lang.String val$fname>}" -> "VarNode{<sun.util.calendar.CalendarSystem$1: java.util.Properties run()>/$r3}" [color=red,style=dashed];
  "VarNode{<java.util.zip.ZipFile: void <init>(java.io.File,int,java.nio.charset.Charset)>/$r8}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Signature: void initVerify(java.security.PublicKey,java.security.spec.AlgorithmParameterSpec)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>/r1}" -> "VarNode{<java.lang.ClassLoader: java.net.URL getBootstrapResource(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>/r1}" -> "VarNode{<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String)>/r1}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String,boolean)>/r1}" [color=blue];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/r5}" -> "VarNode{<java.net.URI: void appendEscape(java.lang.StringBuffer,byte)>/r0}" [color=blue];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/r5}" -> "VarNode{<java.net.URI: void appendEncoded(java.lang.StringBuffer,char)>/r6}" [color=blue];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/r5}" -> "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/r5}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.SimpleTimeZone: void decodeStartRule()>/$r10}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.DateFormat: java.util.Date parse(java.lang.String)>/$r8}" -> "VarNode{<java.text.DateFormat: java.util.Date parse(java.lang.String)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.math.BigInteger: void <init>(java.lang.String,int)>/$r5}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String,int)>/r0}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r28}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r40}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r40}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r39}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r49}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r50}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CRLEntryImpl: void <init>(sun.security.util.DerValue)>/$r8}" -> "VarNode{<java.security.cert.CRLException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.pkcs.SignerInfo: java.util.Set verifyAlgorithms(sun.security.pkcs.SignerInfo[],sun.security.util.JarConstraintsParameters,java.lang.String)>/r7}" -> "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/r6}" [color=blue];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[13@L58] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" -> "VarNode{<io.netty.handler.codec.http.HttpMethod: java.lang.String name()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.text.DecimalFormat: void expandAffixes()>/$r11}" -> "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String positiveSuffix>}" [color=red];
  "VarNode{<java.text.DecimalFormat: void expandAffixes()>/$r11}" -> "InstanceFieldNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[99@L1481] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String positiveSuffix>}" [color=red];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>/$r4}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253String(boolean)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>/$r4}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253String(boolean)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>/$r4}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253String(java.util.Map)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.misc.ExtensionDependency$2: java.io.File run()>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.SimpleDateFormat: int subParse(java.lang.String,int,int,int,boolean,boolean[],java.text.ParsePosition,boolean,java.text.CalendarBuilder)>/r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>/msg}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext$7: void <init>(io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.AbstractChannelHandlerContext,java.lang.Object)>/r3}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>/msg}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void invokeChannelRead(java.lang.Object)>/msg}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r25}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r6}" -> "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeLanguage(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.util.resources.LocaleData$2: void <init>(java.lang.String,java.util.Locale)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.resources.LocaleData: sun.util.resources.OpenListResourceBundle getSupplementary(java.lang.String,java.util.Locale)>[0@L173] new sun.util.resources.LocaleData$2}.<sun.util.resources.LocaleData$2: java.lang.String val$baseName>}" [color=red];
  "VarNode{<java.net.InetAddress$Cache: java.net.InetAddress$Cache put(java.lang.String,java.net.InetAddress[])>/r3}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.lang.StringBuffer: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: void config(java.lang.Class,java.lang.String)>/r3}" -> "VarNode{<sun.util.logging.PlatformLogger: void config(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r20}" -> "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r22}" [color=green3,style=dashed];
  "VarNode{<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.security.cert.CertificateException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.util.regex.PatternSyntaxException error(java.lang.String)>/$r3}" -> "VarNode{<java.util.regex.PatternSyntaxException: void <init>(java.lang.String,java.lang.String,int)>/r2}" [color=blue];
  "VarNode{<java.io.File: java.lang.String[] normalizedList()>/$r8}" -> "ArrayIndexNode{NewObj{<java.io.File: java.lang.String[] normalizedList()>[16@L1155] newarray java.lang.String[$i0]}}" [color=red];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r47}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r0}" -> "VarNode{<java.text.MessageFormat: void append(java.lang.StringBuffer,java.text.CharacterIterator)>/r1}" [color=blue];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r0}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r0}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.ParseException: void <init>(java.lang.String,int)>/r1}" -> "VarNode{<java.lang.Exception: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.pkcs.SignerInfo: void <init>(sun.security.util.DerInputStream,boolean)>[19@L153] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.pkcs.SignerInfo: void <init>(sun.security.util.DerInputStream,boolean)>[19@L153] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r11}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.pkcs.SignerInfo: void <init>(sun.security.util.DerInputStream,boolean)>[19@L153] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r6}" [color=red,style=dashed];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r36}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r36}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/$r13}" -> "VarNode{<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>/r3}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r10}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r9}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r26}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r39}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.logging.LogManager$LoggerContext$1: java.lang.Void run()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r16}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r16}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r24}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r17}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r47}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r4}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r47}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r47}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r47}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.SerialNumber: java.lang.String toString()>/$r7}" -> "VarNode{<sun.security.x509.CertificateSerialNumber: java.lang.String toString()>/$r3}" [color=blue,style=dashed];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask: io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask access$1600(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/x1}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask: io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask newInstance(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" [color=blue];
  "VarNode{<java.net.URI: void defineString()>/$r9}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void defineString()>/$r9}" -> "VarNode{<java.net.URI: void defineString()>/$r22}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r49}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r49}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r26}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r45}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r16}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/r62}" [];
  "VarNode{<java.time.temporal.ValueRange: int checkValidIntValue(long,java.time.temporal.TemporalField)>/$r3}" -> "VarNode{<java.time.DateTimeException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r11}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r11}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r18}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r13}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.Object,java.util.Locale)>/r1}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r13}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r14}" [color=green3,style=dashed];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)>/r2}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)>/$r3}" [];
  "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/r1}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/r0}" [color=blue];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r2}" [color=green3,style=dashed];
  "VarNode{<sun.security.rsa.RSAUtil$KeyType: sun.security.rsa.RSAUtil$KeyType lookup(java.lang.String)>/$r6}" -> "VarNode{<java.security.ProviderException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[140@L447] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r77}" -> "VarNode{<java.util.HashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r13}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r13}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r13}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r13}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.ChannelPipelineException: void <init>(java.lang.String)>/message}" -> "VarNode{<io.netty.channel.ChannelException: void <init>(java.lang.String)>/message}" [color=blue];
  "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r8}" -> "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.misc.URLClassPath: java.util.Enumeration getResources(java.lang.String,boolean)>/r2}" -> "VarNode{<sun.misc.URLClassPath$2: void <init>(sun.misc.URLClassPath,java.lang.String,boolean)>/r2}" [color=blue];
  "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/$r14}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>/$r28}" -> "ArrayIndexNode{NewObj{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>[15@L169] newarray java.lang.Object[%intconst1]}}" [color=red];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: void checkMultiplicity(io.netty.channel.ChannelHandler)>/$r8}" -> "VarNode{<io.netty.channel.ChannelPipelineException: void <init>(java.lang.String)>/message}" [color=blue];
  "VarNode{<java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>/$r2}" -> "VarNode{<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>/$r2}" -> "VarNode{<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>/$r2}" -> "VarNode{<java.net.InetAddress$Cache: java.net.InetAddress$Cache put(java.lang.String,java.net.InetAddress[])>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>/$r2}" -> "VarNode{<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC1779Name(java.util.Map)>/$r5}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC1779Name()>/$r2}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>[88@L642] new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString}.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String str>}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String value()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.nio.Buffer: void <init>(int,int,int,int)>/$r8}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r19}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>/$r1}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>/$r2}" [color=green3,style=dashed];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.MessageDigest: java.lang.String toString()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r29}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r29}" -> "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r0}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC1779DN(java.util.Map)>/$r13}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC1779Name(java.util.Map)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC1779DN(java.util.Map)>/$r13}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC1779Name(java.util.Map)>/$r2}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[55@L296] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[55@L296] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[55@L296] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[55@L296] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.DateFormatProviderImpl: java.text.DateFormat getInstance(int,int,java.util.Locale)>[4@L150] new java.text.SimpleDateFormat}.<java.text.SimpleDateFormat: char[] compiledPattern>}" -> "VarNode{<java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r7}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r23}" -> "VarNode{<java.util.TreeSet: boolean add(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.Log4JLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[0@L71] new java.security.AllPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[0@L71] new java.security.AllPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[0@L71] new java.security.AllPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r9}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r8}" [color=green3,style=dashed];
  "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/$r22}" -> "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/$r22}" -> "VarNode{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/$r22}" -> "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/r14}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[77@L148] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[77@L148] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[77@L148] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: java.lang.String getProtocol()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.logging.LogManager$SystemLoggerContext: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.util.logging.Logger: void <init>(java.lang.String,java.lang.String,java.lang.Class,java.util.logging.LogManager,boolean)>/r6}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void initPolicyFile(sun.security.provider.PolicyFile$PolicyInfo,java.net.URL)>/$r9}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl: void throwAccessCheckException(java.lang.Object)>/$r19}" -> "VarNode{<java.lang.IllegalAccessException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/$r6}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName0(java.lang.String,java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>/$r7}" -> "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r23}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r15}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r23}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/r22}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r71}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/$r63}" -> "VarNode{<java.text.DecimalFormat: void append(java.lang.StringBuffer,java.lang.String,java.text.Format$FieldDelegate,java.text.FieldPosition[],java.text.Format$Field)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r48}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r49}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC1779Name(java.util.Map)>/$r6}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC1779Name()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.RuntimePermission: void <init>(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.security.BasicPermission: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[40@L682] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.lang.IllegalStateException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r12}" -> "VarNode{<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r41}" -> "VarNode{<java.util.Currency$1: java.lang.Void run()>/r57}" [color=green3,style=dashed];
  "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r11}" -> "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r53}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>[50@L631] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>[50@L631] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r3}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r16}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>/$r17}" -> "VarNode{<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector: void <init>(java.lang.String,int,long)>/$r22}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.PrintWriter: void write(java.lang.String)>/r1}" -> "VarNode{<java.io.PrintWriter: void write(java.lang.String,int,int)>/r2}" [color=blue];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r11}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ServiceConfigurationError: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.Error: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.spec.EllipticCurve: void checkValidity(java.security.spec.ECField,java.math.BigInteger,java.lang.String)>/$r20}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r9}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r9}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r15}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r16}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r15}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/$c3}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.lang.Throwable$WrappedPrintStream: void println(java.lang.Object)>/r1}" -> "VarNode{<java.io.PrintStream: void println(java.lang.Object)>/r0}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r66}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27767}" [];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27769}" [];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r115}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r115}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>[15@L1110] new java.net.URL}.<java.net.URL: java.lang.String file>}" -> "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>[15@L1110] new java.net.URL}.<java.net.URL: java.lang.String file>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r25}" [color=red,style=dashed];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.net.InetAddressCachePolicy$1: java.lang.Integer run()>/$r0}" -> "VarNode{<java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.io.FilePermission: void init(int)>/$r34}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHostString(java.lang.String)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHostString(java.lang.String)>/$r4}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHostString(java.lang.String)>/$r3}" [color=green3,style=dashed];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/r5}" -> "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/$r9}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>/r2}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>/r3}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r5}" -> "VarNode{<java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r36}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void <init>(java.lang.String,int,int,int)>/$r17}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.TimeZoneNameProviderImpl: java.lang.String getDisplayName(java.lang.String,boolean,int,java.util.Locale)>/r1}" -> "VarNode{<sun.util.locale.provider.TimeZoneNameProviderImpl: java.lang.String[] getDisplayNameArray(java.lang.String,java.util.Locale)>/r0}" [color=blue];
  "VarNode{<java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/$r11}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannel: java.lang.String toString()>/$r11}" -> "InstanceFieldNode{NewObj{<Server: void main(java.lang.String[])>[2@L10] new io.netty.channel.embedded.EmbeddedChannel}.<io.netty.channel.AbstractChannel: java.lang.String strVal>}" [color=red];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline$HeadContext: void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" [color=blue];
  "VarNode{<java.util.zip.ZipInputStream: void readEnd(java.util.zip.ZipEntry)>/$r24}" -> "VarNode{<java.util.zip.ZipException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r24}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r24}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)>/r2}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[4@L990] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String actions>}" -> "VarNode{<java.io.FilePermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>/$r14}" -> "VarNode{<java.util.ArrayList: boolean add(java.lang.Object)>/r2}" [color=blue];
  "VarNode{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>/$r14}" -> "VarNode{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>/r13}" [color=green3,style=dashed];
  "VarNode{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>/$r14}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>/$r3}" -> "VarNode{<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/$r10}" -> "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/$r11}" [color=green3,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r18}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/r37}" [];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r18}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName0(java.lang.String,boolean)>/r0}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/$r3}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/$r0}" [color=green3,style=dashed];
  "VarNode{<java.util.MissingFormatArgumentException: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{MergedObj{<Merged java.util.MissingFormatArgumentException>}.<java.util.MissingFormatArgumentException: java.lang.String s>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r69}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.String expandAffix(java.lang.String,java.lang.StringBuffer)>/$r8}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.String expandAffix(java.lang.String,java.lang.StringBuffer)>/$r8}" -> "VarNode{<java.text.DecimalFormat: java.lang.String expandAffix(java.lang.String,java.lang.StringBuffer)>/r0}" [color=green3,style=dashed];
  "VarNode{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>/r13}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.DigitList: void set(boolean,java.math.BigInteger,int)>/$r3}" -> "InstanceFieldNode{NewObj{<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>[1@L3791] new java.text.DigitList}.<java.text.DigitList: char[] digits>}" [color=red];
  "VarNode{<sun.util.locale.LanguageTag: void <clinit>()>/$r31}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: java.lang.String removePrivateuseVariant(java.lang.String)>[0@L542] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" -> "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String next()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: java.lang.String removePrivateuseVariant(java.lang.String)>[0@L542] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" -> "VarNode{<sun.util.locale.StringTokenIterator: sun.util.locale.StringTokenIterator setStart(int)>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.BaseLocale$1)>/r4}" -> "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r4}" [color=blue];
  "VarNode{<java.util.IdentityHashMap: void <init>(int)>/$r5}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: boolean parsePrivateuse(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" -> "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: boolean parsePrivateuse(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" -> "VarNode{<sun.util.locale.LanguageTag: boolean parsePrivateuse(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r3}" [color=green3,style=dashed];
  "VarNode{<java.util.ArrayList: java.util.ListIterator listIterator(int)>/$r4}" -> "VarNode{<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r7}" -> "VarNode{<java.util.regex.Pattern: void normalize()>/$i3}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.CertificateExtensions: sun.security.x509.Extension get(java.lang.String)>/$r8}" -> "VarNode{<sun.security.x509.CertificateExtensions: sun.security.x509.Extension get(java.lang.String)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>/%native-arraycopy-temp44}" -> "ArrayIndexNode{NewObj{<java.util.logging.LogManager: java.lang.String[] parseClassNames(java.lang.String)>[35@L1388] newarray java.lang.String[$i0]}}" [color=red];
  "VarNode{<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>/%native-arraycopy-temp44}" -> "ArrayIndexNode{NewObj{<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>[19@L1204] newarray java.lang.String[$i1]}}" [color=red];
  "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[140@L447] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String hostname>}" -> "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r19}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[140@L447] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String hostname>}" -> "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[140@L447] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String hostname>}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r14}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[140@L447] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String hostname>}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r9}" [color=red,style=dashed];
  "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r6}" -> "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.ChoiceFormat: void applyPattern(java.lang.String)>/$r17}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>/$r6}" -> "VarNode{<java.lang.IllegalStateException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r44}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r45}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r34}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r81}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r82}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r22}" -> "VarNode{<java.text.DecimalFormat: void append(java.lang.StringBuffer,java.lang.String,java.text.Format$FieldDelegate,java.text.FieldPosition[],java.text.Format$Field)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>[0@L311] new sun.util.locale.BaseLocale}.<sun.util.locale.BaseLocale: java.lang.String script>}" -> "VarNode{<sun.util.locale.BaseLocale: java.lang.String getScript()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r67}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r68}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: int checkVariants(java.lang.String,java.lang.String)>[0@L574] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" -> "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String current()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r54}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.nio.charset.CoderMalfunctionError>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.net.URISyntaxException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.util.Debug: java.lang.String marshal(java.lang.String)>/$r24}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r26}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/r85}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r5}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/r85}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/$r19}" -> "VarNode{<java.net.URL: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged sun.security.provider.PolicyParser$ParsingException>}.<sun.security.provider.PolicyParser$ParsingException: java.lang.String i18nMessage>}" -> "VarNode{<sun.security.provider.PolicyParser$ParsingException: java.lang.String getLocalizedMessage()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.DateFormatProviderImpl: java.text.DateFormat getInstance(int,int,java.util.Locale)>[4@L150] new java.text.SimpleDateFormat}.<java.text.SimpleDateFormat: java.lang.String pattern>}" -> "VarNode{<java.text.SimpleDateFormat: void initialize(java.util.Locale)>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.Formatter: java.util.Formatter$FormatString[] parse(java.lang.String)>/$r12}" -> "VarNode{<java.util.Formatter$FixedString: void <init>(java.util.Formatter,java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Set createLanguageTagSet(java.lang.String)>/$r4}" -> "VarNode{<java.util.HashSet: boolean add(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.lang.String,java.lang.String)>/$r7}" -> "VarNode{<sun.util.locale.Extension: void <init>(char,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r50}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.Integer: int parseInt(java.lang.String,int)>/$r18}" -> "VarNode{<java.lang.NumberFormatException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>/$r11}" -> "VarNode{<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>/$r12}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URI: java.lang.String access$2402(java.net.URI,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String host>}" [color=red];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkWrite(java.lang.String)>[0@L979] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkWrite(java.lang.String)>[0@L979] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkWrite(java.lang.String)>[0@L979] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<sun.security.util.DerValue: java.lang.String getT61String()>/$r7}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r20}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r11}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.text.normalizer.UCharacterIterator: sun.text.normalizer.UCharacterIterator getInstance(java.lang.String)>/r1}" -> "VarNode{<sun.text.normalizer.ReplaceableUCharacterIterator: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r10}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r10}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r10}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r10}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r4}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/r4}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r32}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.util.Calendar,char,java.util.Locale)>/$r4}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/r4}" [color=blue];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253String(boolean)>/$r4}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r10}" [color=blue,style=dashed];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: void checkDuplicateName(java.lang.String)>/$r6}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: void checkDuplicateName(java.lang.String)>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r30}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r30}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" [color=green3,style=dashed];
  "VarNode{<java.util.Collections: void swap(java.util.List,int,int)>/$r2}" -> "VarNode{<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>/r2}" [color=blue];
  "VarNode{<sun.util.locale.LocaleExtensions: java.lang.String toID(java.util.SortedMap)>/$r11}" -> "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r6}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/$r31}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/r32}" [];
  "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r34}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r13}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r24}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r25}" [color=green3,style=dashed];
  "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r37}" -> "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r38}" [color=green3,style=dashed];
  "VarNode{<java.security.AlgorithmParameters: java.lang.String getAlgorithm()>/$r1}" -> "VarNode{<sun.security.rsa.RSAUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.security.AlgorithmParameters)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.security.AlgorithmParameters: java.lang.String getAlgorithm()>/$r1}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.security.AlgorithmParameters,sun.security.util.ConstraintsParameters)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.zip.ZipInputStream: int read(byte[],int,int)>/$r21}" -> "VarNode{<java.util.zip.ZipException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.rsa.RSAUtil$KeyType: sun.security.rsa.RSAUtil$KeyType lookup(java.lang.String)>/$r5}" -> "VarNode{<sun.security.rsa.RSAUtil$KeyType: sun.security.rsa.RSAUtil$KeyType lookup(java.lang.String)>/$r6}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.IllegalReferenceCountException: void <init>(int,int)>/$r9}" -> "VarNode{<io.netty.util.IllegalReferenceCountException: void <init>(java.lang.String)>/message}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>/$r4}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>/$r13}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r55}" -> "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable,int)>/$r12}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.MalformedURLException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.FormatFlagsConversionMismatchException: void <init>(java.lang.String,char)>/r1}" -> "InstanceFieldNode{MergedObj{<Merged java.util.FormatFlagsConversionMismatchException>}.<java.util.FormatFlagsConversionMismatchException: java.lang.String f>}" [color=red];
  "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>/$r2}" -> "ArrayIndexNode{NewObj{<java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>[1@L66] newarray java.lang.Object[%intconst0]}}" [color=red];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/r1}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r22}" [color=green3,style=dashed];
  "VarNode{<java.lang.Error: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" [color=blue];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r35}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r10}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r31}" [color=green3,style=dashed];
  "VarNode{<java.net.InetAddress: void cacheAddresses(java.lang.String,java.net.InetAddress[],boolean)>/$r0}" -> "VarNode{<java.net.InetAddress$Cache: java.net.InetAddress$Cache put(java.lang.String,java.net.InetAddress[])>/r3}" [color=blue];
  "VarNode{<java.lang.Package$1: java.lang.Package run()>/r16}" -> "VarNode{<java.lang.Package$1: java.lang.Package run()>/$r18}" [color=green3,style=dashed];
  "VarNode{<java.lang.Package$1: java.lang.Package run()>/r16}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.util.TreeMap$Entry: java.lang.Object getKey()>/$r1}" -> "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.util.TreeMap$Entry: java.lang.Object getKey()>/$r1}" -> "VarNode{<java.util.AbstractMap: void putAll(java.util.Map)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.util.TreeMap$Entry: java.lang.Object getKey()>/$r1}" -> "VarNode{<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.util.TreeMap$Entry: java.lang.Object getKey()>/$r1}" -> "VarNode{<java.text.AttributedString: void setAttributes(java.util.Map,int)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.util.TreeMap$Entry: java.lang.Object getKey()>/$r1}" -> "VarNode{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>/r8}" [color=blue,style=dashed];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[4@L990] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[28@L998] new java.net.NetPermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkDelete(java.lang.String)>[0@L1007] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.security.Security: java.lang.String getProperty(java.lang.String)>[2@L760] new java.security.SecurityPermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[35@L184] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[39@L188] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[79@L228] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>[28@L1051] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>[23@L1048] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[46@L691] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkExit(int)>[0@L761] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkLink(java.lang.String)>[5@L835] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[47@L196] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[140@L447] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[75@L224] new java.security.SecurityPermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void <init>()>[7@L299] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[22@L684] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[59@L704] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkPropertyAccess(java.lang.String)>[0@L1294] new java.util.PropertyPermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkRead(java.lang.String)>[0@L888] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[10@L992] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[22@L996] new java.util.PropertyPermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[3@L152] new java.net.NetPermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[16@L994] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>[39@L1564] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[55@L204] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[91@L831] new sun.security.provider.PolicyFile$SelfPermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[134@L444] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.PropertyPermissionCollection: void add(java.security.Permission)>[31@L483] new java.util.PropertyPermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[43@L192] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[123@L857] new java.security.UnresolvedPermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkWrite(java.lang.String)>[0@L979] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[0@L71] new java.security.AllPermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>[117@L1543] new java.security.UnresolvedPermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.lang.System: java.lang.String getenv(java.lang.String)>[2@L896] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" [color=red];
  "VarNode{<sun.security.util.ManifestDigester: void <init>(byte[])>/$r18}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r11}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r13}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r11}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<java.net.URI$Parser: int parseServer(int,int)>/$r2}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC2253DN(java.util.Map)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC2253DN(java.util.Map)>/$r9}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC2253DN(java.util.Map)>/$r10}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r8}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: boolean match(java.lang.String,java.lang.String)>/r2}" -> "VarNode{<java.net.SocketPermission: boolean match(java.lang.String,java.lang.String)>/$r3}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: boolean match(java.lang.String,java.lang.String)>/r2}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase()>/%this}" [color=blue];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r11}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r12}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[99@L720] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[99@L720] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[99@L720] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: java.lang.String getProtocol()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r57}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[4@L1369] new java.net.URL}.<java.net.URL: java.lang.String file>}" -> "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.misc.ExtensionDependency$2: java.io.File run()>/$r15}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.io.File)>/$r5}" -> "VarNode{<java.io.File: java.lang.String getAbsolutePath()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.io.File)>/$r5}" -> "VarNode{<java.io.File: java.lang.String getCanonicalPath()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.text.DecimalFormat: java.lang.String toPattern(boolean)>/$r2}" -> "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/r8}" [color=blue];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.math.BigInteger: java.lang.String toString(int)>/$r4}" -> "VarNode{<java.math.BigInteger: java.lang.String toString()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.math.BigInteger: java.lang.String toString(int)>/$r4}" -> "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r30}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String)>/reasonPhrase}" -> "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/reasonPhrase}" [color=blue];
  "VarNode{<java.security.Policy: java.security.Policy getPolicyNoCheck()>/r28}" -> "VarNode{<java.security.Policy$2: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.AssertionError: void <init>(java.lang.Object)>/r1}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/r0}" [color=blue];
  "VarNode{<java.lang.AssertionError: void <init>(java.lang.Object)>/r1}" -> "VarNode{<java.lang.AssertionError: void <init>(java.lang.Object)>/$r2}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[59@L704] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[59@L704] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[59@L704] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>/$r6}" -> "VarNode{<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r3}" -> "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r2}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.FileURLMapper: boolean exists()>[4@L77] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.FileURLMapper: boolean exists()>[4@L77] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.FileURLMapper: boolean exists()>[4@L77] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "VarNode{<java.io.FilePermission: void init(int)>/$r24}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.logging.LogManager$LoggerContext$1: void <init>(java.util.logging.LogManager$LoggerContext,java.util.logging.Logger,java.util.logging.LogManager,java.lang.String)>/r4}" -> "InstanceFieldNode{NewObj{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>[1@L854] new java.util.logging.LogManager$LoggerContext$1}.<java.util.logging.LogManager$LoggerContext$1: java.lang.String val$name>}" [color=red];
  "VarNode{<java.util.Currency$CurrencyNameGetter: java.lang.String getObject(java.util.spi.CurrencyNameProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r4}" -> "VarNode{<sun.util.locale.provider.CurrencyNameProviderImpl: java.lang.String getSymbol(java.lang.String,java.util.Locale)>/r1}" [color=blue];
  "VarNode{<java.util.Currency$CurrencyNameGetter: java.lang.String getObject(java.util.spi.CurrencyNameProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r4}" -> "VarNode{<sun.util.locale.provider.CurrencyNameProviderImpl: java.lang.String getDisplayName(java.lang.String,java.util.Locale)>/r1}" [color=blue];
  "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>/$r6}" -> "VarNode{<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty getInstance()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>/$r6}" -> "VarNode{<sun.text.normalizer.NormalizerImpl: void <clinit>()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>/$r6}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>/$r6}" -> "VarNode{<sun.text.normalizer.UCharacter: void <clinit>()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>/$r6}" -> "VarNode{<java.lang.Throwable: java.lang.String getLocalizedMessage()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r7}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r24}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r15}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHostString(java.lang.String)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>/$r16}" -> "VarNode{<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>/r3}" [];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r46}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r46}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r44}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureUtil: java.lang.String checkName(java.lang.String)>/$r2}" -> "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/$r0}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureUtil: java.lang.String checkName(java.lang.String)>/$r2}" -> "VarNode{<sun.security.util.SignatureUtil: java.security.AlgorithmParameters createAlgorithmParameters(java.lang.String,byte[])>/$r0}" [color=blue,style=dashed];
  "VarNode{<javax.crypto.CryptoPolicyParser: java.lang.String match(java.lang.String)>/$r38}" -> "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/r8}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r40}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>/$r2}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.StringBuilder>}.<java.lang.AbstractStringBuilder: char[] value>}" [color=red];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>/$r2}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.StringBuffer>}.<java.lang.AbstractStringBuilder: char[] value>}" [color=red];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r7}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r8}" [];
  "VarNode{<java.lang.StringCoding: char[] decode(byte[],int,int)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r10}" -> "VarNode{<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.File: java.lang.String getParent()>/$r5}" -> "VarNode{<java.io.File: java.lang.String getParent()>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.io.File: java.lang.String getParent()>/$r5}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r3}" -> "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r7}" [];
  "VarNode{<io.netty.util.internal.TypeParameterMatcher: java.lang.Class fail(java.lang.Class,java.lang.String)>/$r8}" -> "VarNode{<java.lang.IllegalStateException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>[31@L84] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>[31@L84] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>[31@L84] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>[31@L84] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[22@L684] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String actions>}" -> "VarNode{<java.io.FilePermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r13}" -> "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toUpperString(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: void <init>(java.lang.String)>/r1}" -> "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>[25@L609] new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString}.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String str>}" [color=red];
  "VarNode{<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>[65@L630] new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString}.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String str>}" [color=red];
  "VarNode{<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>[88@L642] new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString}.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String str>}" [color=red];
  "VarNode{<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[145@L447] new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString}.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String str>}" [color=red];
  "VarNode{<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[161@L453] new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString}.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String str>}" [color=red];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName(boolean)>/$r1}" -> "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.security.Security: void initialize()>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.security.Security: void initialize()>/$r1}" -> "VarNode{<java.security.Security: void initialize()>/$r33}" [color=green3,style=dashed];
  "VarNode{<java.security.Security: void initialize()>/$r1}" -> "VarNode{<java.security.Security: void initialize()>/$r64}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.JarConstraintsParameters: java.lang.String extendedExceptionMsg()>/$r1}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r7}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.JarConstraintsParameters: java.lang.String extendedExceptionMsg()>/$r1}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r15}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.JarConstraintsParameters: java.lang.String extendedExceptionMsg()>/$r1}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r8}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.JarConstraintsParameters: java.lang.String extendedExceptionMsg()>/$r1}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r19}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.JarConstraintsParameters: java.lang.String extendedExceptionMsg()>/$r1}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r13}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r12}" -> "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r13}" [];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>/r1}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/r2}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r58}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r37}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r18}" [];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r52}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r35}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r47}" [];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r71}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r15}" [];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r69}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r6}" [];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r33}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r36}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r68}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r70}" [color=blue,style=dashed];
  "VarNode{<java.io.FilePermission: void init(int)>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.FilePermission: void init(int)>/$r23}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r34}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r8}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/r21}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.IllegalReferenceCountException: void <init>(int)>/$r4}" -> "VarNode{<io.netty.util.IllegalReferenceCountException: void <init>(java.lang.String)>/message}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r33}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r33}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r33}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r33}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r33}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/$r11}" -> "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/$r10}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: void decodeParams()>/$r1}" -> "VarNode{<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Base64$Decoder: int decode0(byte[],int,int,byte[])>/$r6}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r25}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r25}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" [color=green3,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: int getHexDigit(java.lang.String,int)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/r2}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$c5}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/r2}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$c21}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/r2}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$c19}" [color=green3,style=dashed];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/$r14}" -> "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form)>/$r2}" [color=blue,style=dashed];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName0(java.lang.Class)>/$r5}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r14}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>[0@L739] new io.netty.channel.DefaultChannelPromise}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/r7}" [color=red,style=dashed];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.security.Provider)>/r1}" -> "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>/r2}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r63}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Security: void initialize()>/$r49}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.x509.X509Key: byte[] getEncodedInternal()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509Key: byte[] getEncodedInternal()>/$r7}" -> "VarNode{<sun.security.x509.X509Key: byte[] getEncodedInternal()>/$r6}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Currency: java.util.Currency getInstance(java.lang.String,int,int)>[62@L352] new java.util.Currency}.<java.util.Currency: java.lang.String currencyCode>}" -> "VarNode{<java.util.Currency: java.lang.String getCurrencyCode()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Currency: java.util.Currency getInstance(java.lang.String,int,int)>[62@L352] new java.util.Currency}.<java.util.Currency: java.lang.String currencyCode>}" -> "VarNode{<java.util.Currency: java.lang.String getSymbol(java.util.Locale)>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Currency: java.util.Currency getInstance(java.lang.String,int,int)>[62@L352] new java.util.Currency}.<java.util.Currency: java.lang.String currencyCode>}" -> "VarNode{<java.util.Currency: java.lang.String getSymbol(java.util.Locale)>/$r9}" [color=red,style=dashed];
  "VarNode{<java.util.zip.ZipError: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.InternalError: void <init>(java.lang.String)>/r1}" [color=blue];
  "ArrayIndexNode{NewObj{<java.io.File: java.lang.String[] normalizedList()>[16@L1155] newarray java.lang.String[$i0]}}" -> "VarNode{<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>/$r7}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.io.File: java.lang.String[] normalizedList()>[16@L1155] newarray java.lang.String[$i0]}}" -> "VarNode{<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>/$r8}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.io.File: java.lang.String[] normalizedList()>[16@L1155] newarray java.lang.String[$i0]}}" -> "VarNode{<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>/$r14}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.io.File: java.lang.String[] normalizedList()>[16@L1155] newarray java.lang.String[$i0]}}" -> "VarNode{<sun.misc.Launcher$ExtClassLoader: java.net.URL[] getExtURLs(java.io.File[])>/$r6}" [color=red,style=dashed];
  "VarNode{<sun.security.pkcs.PKCS7: void parse(sun.security.util.DerInputStream,boolean)>/$r18}" -> "VarNode{<sun.security.pkcs.PKCS7: void parse(sun.security.util.DerInputStream,boolean)>/$r19}" [color=green3,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r26}" -> "InstanceFieldNode{NewObj{<java.util.Locale$Cache: java.util.Locale createObject(java.util.Locale$LocaleKey)>[0@L756] new java.util.Locale}.<java.util.Locale: java.lang.String languageTag>}" [color=red];
  "InstanceFieldNode{NewObj{<io.netty.util.ResourceLeakDetector: void <init>(java.lang.String,int,long)>[1@L147] new io.netty.util.ResourceLeakDetector$DefaultResourceLeak}.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String creationRecord>}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r14}" [color=red,style=dashed];
  "VarNode{<java.io.File: java.io.File getParentFile()>/$r1}" -> "VarNode{<java.io.File: java.io.File getParentFile()>/r5}" [];
  "VarNode{<java.io.File: java.io.File getParentFile()>/$r1}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r15}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r14}" [color=green3,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.util.IllegalFormatFlagsException>}.<java.util.IllegalFormatFlagsException: java.lang.String flags>}" -> "VarNode{<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>/$r3}" [color=red,style=dashed];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/r75}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<sun.misc.URLClassPath: sun.misc.Resource getResource(java.lang.String,boolean)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r13}" -> "VarNode{<java.util.regex.Pattern: void normalize()>/$i11}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String match(java.lang.String)>/$r34}" -> "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty charPropertyNodeFor(java.lang.String)>/$r7}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.PatternSyntaxException error(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/r16}" -> "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/r16}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r7}" -> "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r2}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r16}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r16}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r16}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r16}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void checkText()>/$r5}" -> "VarNode{<java.util.IllegalFormatFlagsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r40}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r17}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.lang.Object: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.Object: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.Object: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.Object: java.lang.String toString()>/$r8}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.Object: java.lang.String toString()>/$r8}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.Object: java.lang.String toString()>/$r8}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.Object: java.lang.String toString()>/$r8}" -> "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.Object: java.lang.String toString()>/$r8}" -> "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.Object: java.lang.String toString()>/$r8}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.Object: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.lang.Object: java.lang.String toString()>/$r8}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.Object: java.lang.String toString()>/$r8}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.util.WeakHashMap$Entry: java.lang.Object getValue()>/$r1}" -> "VarNode{<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>/$r5}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r10}" -> "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r11}" [color=green3,style=dashed];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.AccessControlContext$1: java.lang.Void run()>/$r5}" -> "VarNode{<java.security.AccessControlContext$1: java.lang.Void run()>/$r6}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: void parse(sun.security.util.DerValue)>[26@L649] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: void parse(sun.security.util.DerValue)>[26@L649] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r6}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: void parse(sun.security.util.DerValue)>[26@L649] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r11}" [color=red,style=dashed];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class,java.lang.ClassLoader)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.GregorianCalendar: int computeFields(int,int)>/$r40}" -> "VarNode{<java.util.GregorianCalendar: int computeFields(int,int)>/$r41}" [color=green3,style=dashed];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$c3}" -> "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/r5}" [color=green3,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.util.jar.JarException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.lang.System: java.lang.String getProperty(java.lang.String)>/r0}" -> "VarNode{<java.lang.SecurityManager: void checkPropertyAccess(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r4}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>/$r4}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r14}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)>/o}" [color=blue];
  "VarNode{<java.util.PropertyPermissionCollection: void add(java.security.Permission)>/$r16}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r2}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "VarNode{<java.util.IllformedLocaleException: void <init>(java.lang.String,int)>/$r8}" -> "VarNode{<java.util.IllformedLocaleException: void <init>(java.lang.String,int)>/$r9}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.String)>/r1}" -> "VarNode{<io.netty.util.internal.logging.JdkLoggerFactory: io.netty.util.internal.logging.InternalLogger newInstance(java.lang.String)>/name}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r14}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.security.Signature: boolean isSpi(java.security.Provider$Service)>/$r10}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: int checkVariants(java.lang.String,java.lang.String)>[0@L574] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" -> "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String next()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: int checkVariants(java.lang.String,java.lang.String)>[0@L574] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" -> "VarNode{<sun.util.locale.StringTokenIterator: sun.util.locale.StringTokenIterator setStart(int)>/$r2}" [color=red,style=dashed];
  "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r13}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r14}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r13}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveNonFile(java.net.URL,java.lang.String)>[6@L1309] new java.net.URL}.<java.net.URL: java.lang.String file>}" -> "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveNonFile(java.net.URL,java.lang.String)>[6@L1309] new java.net.URL}.<java.net.URL: java.lang.String file>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r25}" [color=red,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r14}" -> "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r19}" [];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r13}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r14}" [color=green3,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.time.DateTimeException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.IPAddressName: void <init>(java.lang.String)>/$r7}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.StringTokenIterator: sun.util.locale.StringTokenIterator setStart(int)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[11@L194] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" [color=red];
  "VarNode{<sun.util.locale.StringTokenIterator: sun.util.locale.StringTokenIterator setStart(int)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[18@L196] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" [color=red];
  "VarNode{<sun.util.locale.StringTokenIterator: sun.util.locale.StringTokenIterator setStart(int)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[55@L458] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" [color=red];
  "VarNode{<sun.util.locale.StringTokenIterator: sun.util.locale.StringTokenIterator setStart(int)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>[11@L499] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" [color=red];
  "VarNode{<sun.util.locale.StringTokenIterator: sun.util.locale.StringTokenIterator setStart(int)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>[8@L599] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" [color=red];
  "VarNode{<sun.util.locale.StringTokenIterator: sun.util.locale.StringTokenIterator setStart(int)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: java.lang.String removePrivateuseVariant(java.lang.String)>[0@L542] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" [color=red];
  "VarNode{<sun.util.locale.StringTokenIterator: sun.util.locale.StringTokenIterator setStart(int)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: int checkVariants(java.lang.String,java.lang.String)>[0@L574] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" [color=red];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String next()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[55@L458] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" [color=red];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String next()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>[11@L499] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" [color=red];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String next()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>[8@L599] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" [color=red];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String next()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: java.lang.String removePrivateuseVariant(java.lang.String)>[0@L542] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" [color=red];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String next()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[11@L194] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" [color=red];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String next()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[18@L196] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" [color=red];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String next()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: int checkVariants(java.lang.String,java.lang.String)>[0@L574] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" [color=red];
  "VarNode{<io.netty.channel.embedded.EmbeddedChannel: boolean writeInbound(java.lang.Object[])>/r4}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline fireChannelRead(java.lang.Object)>/msg}" [color=blue];
  "VarNode{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r4}" -> "VarNode{<java.util.HashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.String cannotCastMsg(java.lang.Object)>/$r10}" -> "VarNode{<java.lang.Class: java.lang.Object cast(java.lang.Object)>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>/r2}" -> "VarNode{<sun.util.locale.provider.TimeZoneNameProviderImpl: java.lang.String getDisplayName(java.lang.String,boolean,int,java.util.Locale)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>/r2}" -> "VarNode{<sun.util.locale.provider.TimeZoneNameProviderImpl: java.lang.String getGenericDisplayName(java.lang.String,int,java.util.Locale)>/r1}" [color=blue];
  "VarNode{<java.util.logging.LogManager$LoggerContext$1: java.lang.Void run()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/$r12}" -> "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/$r13}" [color=green3,style=dashed];
  "VarNode{<java.security.KeyException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r14}" -> "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r15}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r32}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r23}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r24}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[64@L698] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<java.net.URI$Parser: void <init>(java.net.URI,java.lang.String)>/r2}" -> "VarNode{<java.net.URI: java.lang.String access$002(java.net.URI,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI$Parser: void <init>(java.net.URI,java.lang.String)>/r2}" -> "InstanceFieldNode{NewObj{<java.net.URI: void <init>(java.lang.String)>[10@L588] new java.net.URI$Parser}.<java.net.URI$Parser: java.lang.String input>}" [color=red];
  "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendInitialLine(java.lang.StringBuilder,io.netty.handler.codec.http.HttpRequest)>/req}" -> "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendInitialLine(java.lang.StringBuilder,io.netty.handler.codec.http.HttpRequest)>/$r3}" [color=green3,style=dashed];
  "VarNode{<java.util.Date: java.lang.String toString()>/$r15}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.util.Date: java.lang.String toString()>/$r15}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.Date: java.lang.String toString()>/$r15}" -> "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.util.Date: java.lang.String toString()>/$r15}" -> "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r13}" -> "VarNode{<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.Parts: void <init>(java.lang.String)>/$r1}" -> "InstanceFieldNode{NewObj{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>[52@L408] new java.net.Parts}.<java.net.Parts: java.lang.String query>}" [color=red];
  "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r20}" -> "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r0}" [color=green3,style=dashed];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r49}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r18}" [color=green3,style=dashed];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r49}" -> "VarNode{<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r12}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r12}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r12}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r12}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r14}" -> "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r15}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.OtherName: java.lang.String toString()>/$r4}" -> "VarNode{<sun.security.x509.OtherName: java.lang.String toString()>/$r5}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r18}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/r1}" [];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.GregorianCalendar: void setWeekDate(int,int,int)>/$r4}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderName(java.lang.CharSequence)>/$r5}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.buffer.PooledByteBufAllocator: int validateAndCalculatePageShifts(int)>/$r13}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.AssertionError: void <init>(java.lang.Object)>/$r2}" -> "VarNode{<java.lang.AssertionError: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r6}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r29}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r6}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r32}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r6}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r14}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r6}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r32}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r6}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r11}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r6}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r6}" -> "VarNode{<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r6}" -> "VarNode{<sun.security.x509.X509Key: java.lang.String toString()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.io.PrintWriter: void print(java.lang.String)>/r1}" -> "VarNode{<java.io.PrintWriter: void write(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r18}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r19}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r18}" -> "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.lang.CharSequence getSubSequence(int,int)>/$r1}" -> "VarNode{<java.util.regex.Matcher: java.lang.CharSequence getSubSequence(int,int)>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.CharSequence getSubSequence(int,int)>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.lang.CharSequence getSubSequence(int,int)>/$r1}" -> "VarNode{<java.lang.String: java.lang.CharSequence subSequence(int,int)>/%this}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r19}" -> "VarNode{<java.net.UnknownHostException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r19}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.lang.StringCoding: char[] decode(byte[],int,int)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.StringCoding: char[] decode(byte[],int,int)>/$r7}" -> "VarNode{<java.lang.StringCoding: char[] decode(byte[],int,int)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,boolean)>/r1}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.lang.SecurityManager: void checkRead(java.lang.String)>/r2}" -> "VarNode{<java.io.FilePermission: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.FileURLMapper: java.lang.String getPath()>/$r6}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>/$r13}" [color=blue,style=dashed];
  "VarNode{<sun.misc.FileURLMapper: java.lang.String getPath()>/$r6}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>/$r10}" [color=blue,style=dashed];
  "VarNode{<sun.misc.FileURLMapper: java.lang.String getPath()>/$r6}" -> "VarNode{<sun.misc.FileURLMapper: boolean exists()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.security.SignatureException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" -> "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.net.URL: java.lang.String getHost()>/$r1}" -> "VarNode{<sun.misc.URLClassPath: void check(java.net.URL)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.net.URL: java.lang.String getHost()>/$r1}" -> "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.net.URL: java.lang.String getHost()>/$r1}" -> "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.net.URL: java.lang.String getHost()>/$r1}" -> "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.net.URL: java.lang.String getHost()>/$r1}" -> "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r16}" -> "InstanceFieldNode{NewObj{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>[34@L190] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r16}" -> "InstanceFieldNode{NewObj{<sun.misc.Launcher$ExtClassLoader: java.net.URL[] getExtURLs(java.io.File[])>[16@L204] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r16}" -> "InstanceFieldNode{NewObj{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>[63@L215] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r16}" -> "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[60@L297] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r16}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[21@L1381] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r16}" -> "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>[21@L470] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r16}" -> "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[81@L308] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r16}" -> "InstanceFieldNode{NewObj{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>[0@L162] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r16}" -> "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[55@L296] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r16}" -> "InstanceFieldNode{NewObj{<java.util.logging.LogManager: void readConfiguration()>[47@L1298] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r16}" -> "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency$2: java.io.File run()>[15@L407] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r16}" -> "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency$2: java.io.File run()>[21@L409] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r16}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[35@L1388] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r16}" -> "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[77@L307] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<sun.misc.JarIndex: void addMapping(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<sun.misc.JarIndex: void addToList(java.lang.String,java.lang.String,java.util.HashMap)>/r1}" [color=blue];
  "VarNode{<sun.misc.JarIndex: void addMapping(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<sun.misc.JarIndex: void addToList(java.lang.String,java.lang.String,java.util.HashMap)>/r3}" [color=blue];
  "VarNode{<java.util.logging.LogManager$LoggerContext: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String)>/r2}" -> "VarNode{<java.util.logging.LogManager: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String,java.lang.Class)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.PermissionCollection getPermissions(java.security.Permissions,java.security.ProtectionDomain)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.PermissionCollection getPermissions(java.security.Permissions,java.security.ProtectionDomain)>/$r13}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.PermissionCollection getPermissions(java.security.Permissions,java.security.ProtectionDomain)>/$r12}" [color=green3,style=dashed];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r24}" -> "VarNode{<java.text.MessageFormat: int findKeyword(java.lang.String,java.lang.String[])>/r1}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r5}" -> "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.security.Policy$2: java.security.Policy run()>/$r11}" -> "VarNode{<java.security.Policy$2: java.security.Policy run()>/$r12}" [color=green3,style=dashed];
  "VarNode{<sun.security.action.GetPropertyAction: java.lang.String run()>/$r3}" -> "VarNode{<sun.security.action.GetPropertyAction: java.lang.Object run()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.net.RegisteredDomain: java.lang.String getRegisteredDomain(java.lang.String)>/$r48}" -> "VarNode{<sun.net.RegisteredDomain: java.lang.String getRegisteredDomain(java.lang.String)>/r49}" [];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r13}" -> "VarNode{<java.net.UnknownHostException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>/$r3}" -> "VarNode{<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty getInstance()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>/$r3}" -> "VarNode{<sun.text.normalizer.NormalizerImpl: void <clinit>()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>/$r3}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>/$r3}" -> "VarNode{<sun.text.normalizer.UCharacter: void <clinit>()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>/$r3}" -> "VarNode{<java.lang.Throwable: java.lang.String getLocalizedMessage()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.ResourceBundle$RBClassLoader: java.net.URL getResource(java.lang.String)>/r1}" -> "VarNode{<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$RBClassLoader: java.net.URL getResource(java.lang.String)>/r1}" -> "VarNode{<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.util.AbstractMap: void putAll(java.util.Map)>/$r7}" -> "VarNode{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r4}" [color=blue];
  "VarNode{<javax.crypto.Cipher$Transform: int supports(java.security.Provider$Service,java.lang.String,java.lang.String)>/r0}" -> "VarNode{<javax.crypto.Cipher$Transform: boolean matches(java.lang.String,java.lang.String)>/r3}" [color=blue];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$c14}" -> "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/r12}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkExit(int)>[0@L761] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkExit(int)>[0@L761] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName0(java.lang.String,java.lang.String)>/$r3}" -> "VarNode{<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName0(java.lang.String,java.lang.String)>/$r3}" -> "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r10}" [color=blue,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.LinkedList: java.lang.Object[] toArray()>[1@L1050] newarray java.lang.Object[$i0]}}" -> "VarNode{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>/%native-arraycopy-temp47}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.LinkedList: java.lang.Object[] toArray()>[1@L1050] newarray java.lang.Object[$i0]}}" -> "VarNode{<java.util.ArrayList$Itr: java.lang.Object next()>/$r4}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.LinkedList: java.lang.Object[] toArray()>[1@L1050] newarray java.lang.Object[$i0]}}" -> "VarNode{<java.util.ArrayList: java.lang.Object elementData(int)>/$r2}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.LinkedList: java.lang.Object[] toArray()>[1@L1050] newarray java.lang.Object[$i0]}}" -> "VarNode{<java.util.ArrayList: void add(int,java.lang.Object)>/%native-arraycopy-temp491}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.LinkedList: java.lang.Object[] toArray()>[1@L1050] newarray java.lang.Object[$i0]}}" -> "VarNode{<java.util.ArrayList: java.lang.Object remove(int)>/%native-arraycopy-temp338}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.LinkedList: java.lang.Object[] toArray()>[1@L1050] newarray java.lang.Object[$i0]}}" -> "VarNode{<java.util.LinkedList: boolean addAll(int,java.util.Collection)>/r4}" [color=red,style=dashed];
  "VarNode{<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[60@L234] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [color=red];
  "VarNode{<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[56@L231] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [color=red];
  "VarNode{<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[73@L240] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [color=red];
  "VarNode{<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String)>[21@L186] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [color=red];
  "VarNode{<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String)>[11@L183] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [color=red];
  "VarNode{<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[3@L207] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [color=red];
  "VarNode{<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[19@L213] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [color=red];
  "VarNode{<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[38@L222] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [color=red];
  "VarNode{<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String)>[18@L185] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [color=red];
  "VarNode{<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[42@L225] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [color=red];
  "VarNode{<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[24@L216] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [color=red];
  "VarNode{<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String)>[14@L184] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" [color=red];
  "VarNode{<java.util.Locale$Builder: java.util.Locale$Builder setLocale(java.util.Locale)>/$r7}" -> "VarNode{<java.util.IllformedLocaleException: void <init>(java.lang.String,int)>/r2}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>/r4}" -> "VarNode{<java.lang.ClassLoader: java.util.Enumeration getBootstrapResources(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>/r4}" -> "VarNode{<java.net.URLClassLoader: java.util.Enumeration findResources(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>/r4}" -> "VarNode{<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>/r4}" [color=blue];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r8}" -> "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.text.AttributedString$AttributedStringIterator: java.util.Set getAllAttributeKeys()>/$r11}" -> "VarNode{<java.util.HashSet: boolean add(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>/$r7}" -> "VarNode{<java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.security.cert.CertificateException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r61}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r106}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r59}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r68}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r51}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r64}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r55}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r33}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r57}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r67}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r31}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.System: java.lang.String getenv(java.lang.String)>[2@L896] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.System: java.lang.String getenv(java.lang.String)>[2@L896] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<java.util.jar.JarException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.util.zip.ZipException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r107}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r108}" [color=green3,style=dashed];
  "VarNode{<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>/$r4}" -> "VarNode{<sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r3}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: java.lang.String getLocalizedMessage()>/$r1}" -> "VarNode{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>/$r31}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: java.lang.String getLocalizedMessage()>/$r1}" -> "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r8}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r23}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r8}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r17}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>/r1}" -> "VarNode{<java.util.regex.Pattern: void <init>(java.lang.String,int)>/r1}" [color=blue];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r4}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27849}" [];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r4}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27851}" [];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r13}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r14}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>/$r4}" -> "VarNode{<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>/r5}" [];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r74}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r74}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r18}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: void <init>(java.lang.String)>/r1}" -> "VarNode{<sun.util.logging.PlatformLogger$LoggerProxy: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r21}" -> "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r22}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r2}" -> "VarNode{<java.lang.System: java.lang.String getProperty(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r2}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r6}" [color=green3,style=dashed];
  "VarNode{<sun.util.calendar.ZoneInfoFile$1: java.lang.Object run()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r16}" -> "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r17}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r46}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r7}" -> "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r6}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String)>/$r7}" -> "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/r1}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/r6}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/r1}" -> "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/r0}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r30}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/r58}" [];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r60}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/$r44}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.AccessController: void checkPermission(java.security.Permission)>/$r7}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>/r2}" -> "VarNode{<java.lang.Package: java.lang.Package getSystemPackage(java.lang.String)>/r7}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>/r2}" -> "VarNode{<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>/r2}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.StringTokenIterator: sun.util.locale.StringTokenIterator setStart(int)>/$r2}" -> "VarNode{<sun.util.locale.StringTokenIterator: sun.util.locale.StringTokenIterator setStart(int)>/$r3}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.StringTokenIterator: sun.util.locale.StringTokenIterator setStart(int)>/$r2}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-542}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>[12@L1093] new java.util.regex.Matcher}.<java.util.regex.Matcher: java.lang.CharSequence text>}" [color=red];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: sun.security.jca.ProviderList getJarList(java.lang.String[])>[6@L206] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String className>}" -> "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: sun.security.jca.ProviderList getJarList(java.lang.String[])>[6@L206] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String className>}" -> "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: sun.security.jca.ProviderList getJarList(java.lang.String[])>[6@L206] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String className>}" -> "VarNode{<sun.security.jca.ProviderConfig: java.lang.String access$100(sun.security.jca.ProviderConfig)>/$r1}" [color=red,style=dashed];
  "VarNode{<java.security.Security: void initialize()>/$r23}" -> "VarNode{<java.net.URL: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>/$r11}" -> "VarNode{<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>/$r12}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.security.CodeSigner[] getSigners(sun.security.pkcs.SignerInfo[],sun.security.pkcs.PKCS7)>/$r17}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.security.CodeSigner[] getSigners(sun.security.pkcs.SignerInfo[],sun.security.pkcs.PKCS7)>/$r18}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DerValue: byte[] getOctetString()>/$r11}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ArrayList: void <init>(int)>/$r5}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.util.MissingFormatArgumentException>}.<java.util.MissingFormatArgumentException: java.lang.String s>}" -> "VarNode{<java.util.MissingFormatArgumentException: java.lang.String getMessage()>/$r3}" [color=red,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r12}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/r0}" [color=blue];
  "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: java.lang.String toPoolName(java.lang.Class)>/$r8}" -> "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.Class,boolean,int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.net.URI$Parser: int parseAuthority(int,int)>/$r6}" -> "VarNode{<java.net.URI: java.lang.String access$2202(java.net.URI,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r6}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void <init>(java.util.ArrayList,sun.security.util.ManifestDigester,java.lang.String,byte[])>/r9}" [color=blue];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r6}" -> "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r28}" [color=green3,style=dashed];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r6}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[21@L199] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String script>}" -> "VarNode{<sun.util.locale.LanguageTag: java.lang.String getScript()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.X509CRLImpl: void parse(sun.security.util.DerValue)>/$r64}" -> "VarNode{<java.security.cert.CRLException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.security.cert.CertificateEncodingException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>/r0}" -> "VarNode{<sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r3}" [color=blue];
  "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>/$r12}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String getDateTimePattern(java.lang.String,int,int,java.lang.String)>/r16}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String getDateTimePattern(int,int,java.util.Calendar)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>/$r8}" -> "VarNode{<java.util.ArrayList: boolean add(java.lang.Object)>/r2}" [color=blue];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r2}" -> "VarNode{<java.util.StringTokenizer: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r34}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r34}" -> "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r33}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.Extension: void setValue(java.lang.String)>/$r6}" -> "InstanceFieldNode{NewObj{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>[52@L98] new sun.util.locale.Extension}.<sun.util.locale.Extension: java.lang.String id>}" [color=red];
  "VarNode{<sun.util.locale.Extension: void setValue(java.lang.String)>/$r6}" -> "InstanceFieldNode{NewObj{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>[93@L122] new sun.util.locale.UnicodeLocaleExtension}.<sun.util.locale.Extension: java.lang.String id>}" [color=red];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/r7}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/$r3}" [color=green3,style=dashed];
  "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r6}" -> "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.lang.ClassCastException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/i14}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r24}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r18}" -> "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r17}" [color=green3,style=dashed];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r7}" -> "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>/$r2}" -> "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>/$r2}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>/$r2}" -> "VarNode{<sun.security.x509.AlgorithmId: java.util.HashMap computeOidTable()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>/$r2}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>/$r2}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>/$r2}" -> "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r16}" [color=blue,style=dashed];
  "VarNode{<io.netty.buffer.WrappedByteBuf: java.lang.String toString()>/$r8}" -> "VarNode{<io.netty.buffer.WrappedByteBuf: java.lang.String toString()>/$r9}" [color=green3,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: int getHexDigit(java.lang.String,int)>/$r4}" -> "VarNode{<sun.misc.FloatingDecimal: int getHexDigit(java.lang.String,int)>/$r5}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r17}" -> "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r18}" [color=green3,style=dashed];
  "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[76@L706] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r14}" -> "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r15}" [color=green3,style=dashed];
  "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r26}" -> "VarNode{<java.util.Currency: boolean isPastCutoverDate(java.lang.String)>/r3}" [color=blue];
  "VarNode{<java.lang.StringCoding: char[] decode(byte[],int,int)>/$r8}" -> "VarNode{<java.lang.StringCoding: char[] decode(byte[],int,int)>/$r9}" [color=green3,style=dashed];
  "ArrayIndexNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[160@L880] newarray java.lang.Object[%intconst11]}}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r39}" [color=red,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.lang.StringIndexOutOfBoundsException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.Locale: java.util.Locale initDefault()>/r13}" -> "VarNode{<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>/r2}" [color=blue];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r34}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/r37}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[99@L1481] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String negativePrefix>}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r22}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[99@L1481] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String negativePrefix>}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/$r63}" [color=red,style=dashed];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>/r0}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>/$r2}" [color=green3,style=dashed];
  "VarNode{<io.netty.buffer.ByteBufUtil: void <clinit>()>/$r4}" -> "VarNode{<io.netty.buffer.ByteBufUtil: void <clinit>()>/$r6}" [color=green3,style=dashed];
  "VarNode{<io.netty.buffer.ByteBufUtil: void <clinit>()>/$r4}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<java.lang.reflect.Modifier: java.lang.String toString(int)>/$r1}" -> "VarNode{<java.lang.reflect.Modifier: java.lang.String toString(int)>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.lang.reflect.Modifier: java.lang.String toString(int)>/$r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String getDateTimePattern(java.lang.String,java.lang.String,int,java.lang.String)>/$r5}" -> "VarNode{<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: java.util.HashMap computeOidTable()>/$r10}" -> "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>/$r5}" -> "VarNode{<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r3}" -> "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toUpperString(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.Security: void initialize()>/$r65}" -> "VarNode{<java.security.Security: void initialize()>/$r66}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: void <init>(java.util.Formatter,java.util.regex.Matcher)>/$r7}" -> "VarNode{<java.util.Formatter$FormatSpecifier: int precision(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuthority(java.net.URL)>/$r6}" -> "VarNode{<java.net.URL: java.net.URI toURI()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" -> "ArrayIndexNode{NewObj{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>[1@L159] newarray java.lang.Object[%intconst0]}}" [color=red];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpVersion: void <clinit>()>[13@L45] new io.netty.handler.codec.http.HttpVersion}.<io.netty.handler.codec.http.HttpVersion: java.lang.String text>}" -> "VarNode{<io.netty.handler.codec.http.HttpVersion: java.lang.String text()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.security.MessageDigest getDigest(java.lang.String)>/r2}" -> "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.security.MessageDigest getDigest(java.lang.String)>/r2}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r24}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.UnresolvedPermission: void <init>(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate[])>/r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[123@L857] new java.security.UnresolvedPermission}.<java.security.UnresolvedPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.security.UnresolvedPermission: void <init>(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate[])>/r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>[117@L1543] new java.security.UnresolvedPermission}.<java.security.UnresolvedPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[40@L1229] newarray java.lang.String[%intconst1]}}" -> "VarNode{<sun.security.util.AlgorithmDecomposer: java.util.Set decomposeImpl(java.lang.String)>/r7}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[40@L1229] newarray java.lang.String[%intconst1]}}" -> "VarNode{<sun.security.util.AlgorithmDecomposer: java.util.Set decomposeImpl(java.lang.String)>/r4}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[40@L1229] newarray java.lang.String[%intconst1]}}" -> "VarNode{<java.util.ArrayList$Itr: java.lang.Object next()>/$r4}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[40@L1229] newarray java.lang.String[%intconst1]}}" -> "VarNode{<java.util.Arrays$ArrayList: java.lang.Object get(int)>/$r2}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[40@L1229] newarray java.lang.String[%intconst1]}}" -> "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/$r6}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[40@L1229] newarray java.lang.String[%intconst1]}}" -> "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/r25}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[40@L1229] newarray java.lang.String[%intconst1]}}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/r4}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[40@L1229] newarray java.lang.String[%intconst1]}}" -> "VarNode{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>/%native-arraycopy-temp47}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[40@L1229] newarray java.lang.String[%intconst1]}}" -> "VarNode{<java.util.ArrayList: java.lang.Object remove(int)>/%native-arraycopy-temp338}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[40@L1229] newarray java.lang.String[%intconst1]}}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.MimeType: java.lang.String parseSuffix(java.lang.String)>/r9}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[40@L1229] newarray java.lang.String[%intconst1]}}" -> "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp341}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[40@L1229] newarray java.lang.String[%intconst1]}}" -> "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp344}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[40@L1229] newarray java.lang.String[%intconst1]}}" -> "VarNode{<sun.security.util.CurveDB: java.lang.String[] getNamesByOID(java.lang.String)>/$r7}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[40@L1229] newarray java.lang.String[%intconst1]}}" -> "VarNode{<java.util.ArrayList: java.lang.Object elementData(int)>/$r2}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[40@L1229] newarray java.lang.String[%intconst1]}}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/r89}" [color=red,style=dashed];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r61}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r7}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r13}" -> "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r7}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r13}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/r1}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/r1}" -> "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r27}" [color=green3,style=dashed];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/r1}" -> "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r11}" [color=green3,style=dashed];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/r1}" -> "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r19}" [color=green3,style=dashed];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.nio.charset.UnsupportedCharsetException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.NoSuchFieldException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged sun.util.locale.LocaleSyntaxException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.SecurityException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.ArrayIndexOutOfBoundsException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.util.zip.ZipException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.NumberFormatException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.NoClassDefFoundError>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.io.EOFException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.security.cert.CertificateEncodingException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.security.InvalidKeyException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.io.FileNotFoundException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.security.AccessControlException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.io.UTFDataFormatException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.io.IOException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.time.DateTimeException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.security.InvalidAlgorithmParameterException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.security.ProviderException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.net.URISyntaxException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.util.jar.JarException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.RuntimeException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.IllegalStateException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged sun.security.pkcs.ParsingException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.security.NoSuchAlgorithmException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.security.cert.CRLException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.Error>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.util.ServiceConfigurationError>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged sun.security.util.PropertyExpander$ExpandException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged io.netty.util.IllegalReferenceCountException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.InternalError>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.NullPointerException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.NoSuchMethodException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.IllegalArgumentException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.IndexOutOfBoundsException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.nio.charset.IllegalCharsetNameException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.security.KeyStoreException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.security.cert.CertificateException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.AssertionError>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.IllegalAccessException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.security.InvalidParameterException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.net.MalformedURLException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.security.cert.CertificateParsingException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.util.MissingResourceException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.util.zip.ZipError>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.StringIndexOutOfBoundsException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.Exception>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.ClassCastException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged javax.crypto.CryptoPolicyParser$ParsingException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.InstantiationException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.text.ParseException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged javax.crypto.NoSuchPaddingException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.security.NoSuchProviderException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.security.SignatureException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<sun.util.calendar.CalendarDate: java.lang.String toString()>/$r8}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.util.calendar.CalendarDate: java.lang.String toString()>/$r8}" -> "VarNode{<sun.util.calendar.ImmutableGregorianDate: java.lang.String toString()>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r27}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.util.TreeMap: void deleteEntry(java.util.TreeMap$Entry)>/$r18}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[3@L540] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.TreeMap: void deleteEntry(java.util.TreeMap$Entry)>/$r18}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>[26@L2571] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.TreeMap: void deleteEntry(java.util.TreeMap$Entry)>/$r18}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[47@L577] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" [color=red];
  "VarNode{<sun.util.calendar.CalendarUtils: java.lang.StringBuffer sprintf0d(java.lang.StringBuffer,int,int)>/r0}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<sun.util.calendar.CalendarUtils: java.lang.StringBuffer sprintf0d(java.lang.StringBuffer,int,int)>/r0}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(long)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r68}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r68}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKey(java.lang.String,int,int,boolean)>/$r3}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.util.Map getDisplayNamesImpl(java.lang.String,int,int,java.util.Locale,boolean)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKey(java.lang.String,int,int,boolean)>/$r3}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getDisplayNameImpl(java.lang.String,int,int,int,java.util.Locale,boolean)>/$r2}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: boolean setSuccess0(java.lang.Object)>/result}" -> "InstanceFieldNode{NewObj{<io.netty.channel.embedded.EmbeddedEventLoop: io.netty.channel.ChannelFuture register(io.netty.channel.Channel)>[0@L115] new io.netty.channel.DefaultChannelPromise}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" [color=red];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: boolean setSuccess0(java.lang.Object)>/result}" -> "InstanceFieldNode{NewObj{<io.netty.channel.AbstractChannel: io.netty.channel.ChannelPromise newPromise()>[0@L254] new io.netty.channel.DefaultChannelPromise}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" [color=red];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: boolean setSuccess0(java.lang.Object)>/result}" -> "InstanceFieldNode{NewObj{<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>[0@L739] new io.netty.channel.DefaultChannelPromise}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" [color=red];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: boolean setSuccess0(java.lang.Object)>/result}" -> "InstanceFieldNode{NewObj{<io.netty.util.concurrent.AbstractEventExecutor: java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable,java.lang.Object)>[0@L106] new io.netty.util.concurrent.PromiseTask}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" [color=red];
  "VarNode{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>/r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>/r9}" -> "VarNode{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>/$r3}" [color=green3,style=dashed];
  "VarNode{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>/r9}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>/r3}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getScript()>/$r1}" -> "VarNode{<java.util.Locale: java.lang.String getScript()>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getScript()>/$r1}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getScript()>/$r1}" -> "VarNode{<java.util.Locale: java.lang.String toString()>/$r14}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getScript()>/$r1}" -> "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getScript()>/$r1}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r3}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void charArrayAppend(java.lang.StringBuffer,char[])>/r0}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r19}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[0@L427] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String codeBase>}" [color=red];
  "VarNode{<java.lang.Package: java.lang.Package defineSystemPackage(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.lang.Package$1: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[22@L684] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[22@L684] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[22@L684] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[33@L87] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" -> "VarNode{<io.netty.handler.codec.http.HttpMethod: java.lang.String name()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.cert.Certificate[] getCertificates(java.security.KeyStore,java.lang.String,sun.security.provider.PolicyFile$PolicyInfo)>[1@L1014] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" -> "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r1}" [color=red,style=dashed];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: void callHandlerAdded0(io.netty.channel.AbstractChannelHandlerContext)>/$r24}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: void callHandlerAdded0(io.netty.channel.AbstractChannelHandlerContext)>/$r24}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: void callHandlerAdded0(io.netty.channel.AbstractChannelHandlerContext)>/$r23}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r31}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurityManager: javax.crypto.CryptoPermission getCryptoPermission(java.lang.String)>[91@L186] new javax.crypto.CryptoPermission}.<javax.crypto.CryptoPermission: java.lang.String alg>}" -> "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r4}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String examineAliases(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,java.lang.String,int,java.util.Map)>/r9}" -> "VarNode{<sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r17}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r17}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r17}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r17}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r17}" -> "VarNode{<java.util.Locale: java.lang.String toString()>/$r15}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>[15@L1110] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>[15@L1110] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>[15@L1110] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: java.lang.String getProtocol()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>[15@L1110] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" [color=red,style=dashed];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r63}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r1}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r20}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/r6}" -> "VarNode{<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/r6}" -> "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/r6}" -> "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/r6}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r26}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/r6}" -> "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.NumberFormatException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r6}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r75}" -> "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r76}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r19}" -> "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r20}" [color=green3,style=dashed];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r13}" -> "VarNode{<java.text.SimpleDateFormat: void initialize(java.util.Locale)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r13}" -> "VarNode{<java.text.SimpleDateFormat: void applyPatternImpl(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.util.resources.LocaleData: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>/r1}" -> "VarNode{<sun.util.resources.LocaleData$1: void <init>(java.lang.String,java.util.Locale)>/r1}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext$WriteTask: io.netty.channel.AbstractChannelHandlerContext$WriteTask access$1700(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/x1}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext$WriteTask: io.netty.channel.AbstractChannelHandlerContext$WriteTask newInstance(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" [color=blue];
  "VarNode{<java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>/r1}" -> "VarNode{<java.lang.VirtualMachineError: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.CodeSigner: java.lang.String toString()>/$r7}" -> "VarNode{<java.security.CodeSigner: java.lang.String toString()>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r32}" -> "VarNode{<java.util.Currency: void info(java.lang.String,java.lang.Throwable)>/r3}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.PermissionCollection getPermissions(java.security.Permissions,java.security.ProtectionDomain)>/$r14}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.PermissionCollection getPermissions(java.security.Permissions,java.security.ProtectionDomain)>/$r15}" [color=green3,style=dashed];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r15}" -> "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r16}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.UnicodeLocaleExtension: void <clinit>()>[0@L48] new sun.util.locale.UnicodeLocaleExtension}.<sun.util.locale.Extension: java.lang.String value>}" -> "VarNode{<sun.util.locale.Extension: java.lang.String getValue()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r68}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r69}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>[17@L436] new java.util.Hashtable$Entry}.<java.util.Hashtable$Entry: java.lang.Object value>}" -> "VarNode{<java.util.Hashtable: java.lang.Object get(java.lang.Object)>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>[17@L436] new java.util.Hashtable$Entry}.<java.util.Hashtable$Entry: java.lang.Object value>}" -> "VarNode{<java.util.Hashtable$Enumerator: java.lang.Object nextElement()>/$r6}" [color=red,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String getUnicodeLocaleType(java.lang.String)>/$r8}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String getUnicodeLocaleType(java.lang.String)>/$r8}" -> "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r43}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>/r2}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/r6}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>/r2}" -> "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/r0}" [color=blue];
  "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r4}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r2}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.util.Map parseProperties(java.lang.String)>/$r5}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r2}" [color=blue];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r14}" -> "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r58}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r59}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r23}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-274}" [];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r23}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-276}" [];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getTimeZoneNames(java.lang.String)>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.misc.FloatingDecimal: int getHexDigit(java.lang.String,int)>/$r5}" -> "VarNode{<java.lang.AssertionError: void <init>(java.lang.Object)>/r1}" [color=blue];
  "ArrayIndexNode{NewObj{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>[6@L313] newarray java.lang.String[%intconst1]}}" -> "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r16}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>[6@L313] newarray java.lang.String[%intconst1]}}" -> "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/r2}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>[6@L313] newarray java.lang.String[%intconst1]}}" -> "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/r24}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>[6@L313] newarray java.lang.String[%intconst1]}}" -> "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/r25}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>[6@L313] newarray java.lang.String[%intconst1]}}" -> "VarNode{<javax.crypto.Cipher: javax.crypto.CryptoPermission getConfiguredPermission(java.lang.String)>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r20}" -> "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r18}" [color=green3,style=dashed];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r16}" -> "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r17}" [color=green3,style=dashed];
  "VarNode{<sun.misc.Launcher: void <init>()>/$r12}" -> "VarNode{<java.lang.InternalError: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r1}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r47}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r1}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r1}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r4}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>[0@L1032] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String codeBase>}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r48}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>[0@L1032] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String codeBase>}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r7}" [color=red,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/r6}" -> "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/r0}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r18}" -> "VarNode{<sun.security.pkcs.SignerInfo: java.util.Set verifyAlgorithms(sun.security.pkcs.SignerInfo[],sun.security.util.JarConstraintsParameters,java.lang.String)>/r7}" [color=blue];
  "VarNode{<java.util.AbstractCollection: boolean addAll(java.util.Collection)>/$r2}" -> "VarNode{<java.util.TreeSet: boolean add(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.util.AbstractCollection: boolean addAll(java.util.Collection)>/$r2}" -> "VarNode{<java.util.HashSet: boolean add(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.lang.String)>/r1}" -> "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/r5}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleProviderAdapter: boolean isSupportedLocale(java.util.Locale,sun.util.locale.provider.LocaleProviderAdapter$Type,java.util.Set)>/$r6}" -> "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" [color=blue];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r2}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r2}" -> "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r8}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/$r26}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r52}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.misc.URLClassPath$JarLoader: java.net.URL findResource(java.lang.String,boolean)>/r1}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean)>/r2}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r28}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r29}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>/$r8}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>/$r19}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>/$r13}" -> "VarNode{<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>/r3}" [color=blue];
  "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r53}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r36}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r5}" -> "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/%taint-temp-23668}" [];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<java.security.UnresolvedPermissionCollection: void add(java.security.Permission)>/$r13}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>[23@L1048] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String actions>}" -> "VarNode{<java.net.SocketPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<java.io.FilePermission: void init(int)>/$r9}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.io.FilePermission: void init(int)>/$r9}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.util.Currency: java.util.Currency getInstance(java.util.Locale)>/$r1}" -> "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Currency: java.util.Currency getInstance(java.util.Locale)>/$r1}" -> "VarNode{<java.util.Currency: java.util.Currency getInstance(java.util.Locale)>/$r22}" [color=green3,style=dashed];
  "VarNode{<java.util.Currency: java.util.Currency getInstance(java.lang.String,int,int)>/r0}" -> "VarNode{<java.util.Currency: void <init>(java.lang.String,int,int)>/r1}" [color=blue];
  "VarNode{<java.security.Security: java.lang.Object[] getImpl(java.lang.String,java.lang.String,java.lang.String)>/r3}" -> "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.security.Security: java.lang.Object[] getImpl(java.lang.String,java.lang.String,java.lang.String)>/r3}" -> "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/r24}" -> "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r9}" [color=blue];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/r24}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/r24}" -> "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r6}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/r24}" -> "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r13}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>[25@L609] new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString}.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String str>}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String value()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: void <init>(java.util.ArrayList,sun.security.util.ManifestDigester,java.lang.String,byte[])>/r9}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void <init>(java.util.ArrayList,sun.security.util.ManifestDigester,java.lang.String,byte[])>/$r10}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: void <init>(java.util.ArrayList,sun.security.util.ManifestDigester,java.lang.String,byte[])>/r9}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.io.File: java.io.File getParentFile()>/r5}" -> "VarNode{<java.io.File: void <init>(java.lang.String,int)>/r1}" [color=blue];
  "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/$r16}" -> "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/$r17}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/%taint-temp-23668}" -> "InstanceFieldNode{NewObj{<io.netty.util.concurrent.PromiseTask: java.util.concurrent.Callable toCallable(java.lang.Runnable,java.lang.Object)>[0@L24] new io.netty.util.concurrent.PromiseTask$RunnableAdapter}.<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.Object result>}" [color=red];
  "VarNode{<sun.security.pkcs.SignerInfo: java.util.Set verifyAlgorithms(sun.security.pkcs.SignerInfo[],sun.security.util.JarConstraintsParameters,java.lang.String)>/$r8}" -> "VarNode{<sun.security.pkcs.SignerInfo: java.util.Set verifyAlgorithms(sun.security.pkcs.SignerInfo[],sun.security.util.JarConstraintsParameters,java.lang.String)>/$r9}" [];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>/$r11}" -> "VarNode{<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r15}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r13}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r9}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>/$r35}" -> "VarNode{<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>/r12}" [color=blue];
  "VarNode{<java.io.StringWriter: java.lang.String toString()>/$r1}" -> "VarNode{<java.io.StringWriter: java.lang.String toString()>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27849}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[3@L540] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27849}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[47@L577] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27849}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>[26@L2571] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r11}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/i14}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseScript(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" -> "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[21@L199] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String script>}" [color=red];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27937}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1774] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27937}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1789] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27937}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1784] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27937}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1779] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object key>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>/r3}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/r1}" [color=blue];
  "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>/$r7}" -> "VarNode{<sun.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r21}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" [color=green3,style=dashed];
  "VarNode{<java.util.zip.ZipCoder: byte[] getBytes(java.lang.String)>/$r12}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r2}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/r15}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r2}" -> "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URI$Parser: void parse(boolean)>/$r7}" -> "VarNode{<java.net.URI: java.lang.String access$1002(java.net.URI,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: void <init>(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate[])>/r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[91@L831] new sun.security.provider.PolicyFile$SelfPermission}.<sun.security.provider.PolicyFile$SelfPermission: java.lang.String actions>}" [color=red];
  "VarNode{<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>/r12}" -> "VarNode{<java.lang.String: java.lang.String concat(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/r23}" -> "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/r23}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/r23}" -> "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r10}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/r23}" -> "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/r23}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r33}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r15}" -> "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r13}" [color=blue,style=dashed];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r15}" -> "VarNode{<sun.reflect.MethodAccessorGenerator: java.lang.String buildInternalSignature()>/$r8}" [color=blue,style=dashed];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r15}" -> "VarNode{<sun.reflect.MethodAccessorGenerator: java.lang.String buildInternalSignature()>/$r4}" [color=blue,style=dashed];
  "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Matcher: int end(int)>/$r5}" -> "VarNode{<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r28}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)>/r0}" -> "VarNode{<java.util.zip.ZipFile: java.util.zip.ZipEntry getZipEntry(java.lang.String,long)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getCalendarNames(java.lang.String)>/r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getCalendarNames(java.lang.String)>/r2}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getCalendarNames(java.lang.String)>/$r1}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getCalendarNames(java.lang.String)>/r2}" -> "VarNode{<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.resources.LocaleData: void setSupplementary(sun.util.resources.ParallelListResourceBundle)>/$r7}" -> "VarNode{<sun.util.resources.LocaleData: boolean setSupplementary(java.lang.String,sun.util.resources.ParallelListResourceBundle)>/r3}" [color=blue];
  "VarNode{<java.security.MessageDigest: java.lang.String toString()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.MessageDigest: java.lang.String toString()>/$r4}" -> "VarNode{<java.security.MessageDigest: java.lang.String toString()>/$r2}" [color=green3,style=dashed];
  "VarNode{<sun.misc.FileURLMapper: java.lang.String getPath()>/$r11}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>/$r13}" [color=blue,style=dashed];
  "VarNode{<sun.misc.FileURLMapper: java.lang.String getPath()>/$r11}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>/$r10}" [color=blue,style=dashed];
  "VarNode{<sun.misc.FileURLMapper: java.lang.String getPath()>/$r11}" -> "VarNode{<sun.misc.FileURLMapper: boolean exists()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$c10}" -> "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r14}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.security.cert.Certificate[] getCertificates(java.security.KeyStore,java.lang.String,sun.security.provider.PolicyFile$PolicyInfo)>/$r2}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.cert.Certificate[] getCertificates(java.security.KeyStore,java.lang.String,sun.security.provider.PolicyFile$PolicyInfo)>/$r3}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.security.cert.Certificate[] getCertificates(java.security.KeyStore,java.lang.String,sun.security.provider.PolicyFile$PolicyInfo)>/$r2}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r33}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r17}" -> "VarNode{<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r10}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void <init>(java.lang.String,int,int,int)>/$r41}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC1779DN(java.util.Map)>/$r4}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC1779Name(java.util.Map)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC1779DN(java.util.Map)>/$r4}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC1779Name(java.util.Map)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r7}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r7}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r7}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r7}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.net.URI: java.lang.String getQuery()>/$r3}" -> "VarNode{<java.net.URI: java.lang.String decode(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.StringJoiner: java.lang.StringBuilder prepareBuilder()>/$r2}" -> "InstanceFieldNode{NewObj{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>[21@L454] new java.util.StringJoiner}.<java.util.StringJoiner: java.lang.StringBuilder value>}" [color=red];
  "VarNode{<java.util.StringJoiner: java.lang.StringBuilder prepareBuilder()>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1779] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1779] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap$KeyIterator: java.lang.Object next()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1779] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1779] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1779] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap$Node: java.lang.Object getKey()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r26}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r26}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r25}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>/$r18}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.lang.InternalError: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.VirtualMachineError: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r9}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/r50}" [color=green3,style=dashed];
  "VarNode{<sun.misc.ExtensionDependency$2: java.io.File run()>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.ExtensionDependency$2: java.io.File run()>/$r18}" -> "VarNode{<sun.misc.ExtensionDependency$2: java.io.File run()>/$r17}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.PolicyUtil: java.io.InputStream getInputStream(java.net.URL)>/$r5}" -> "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.io.FilePermission: void <init>(java.lang.String,java.lang.String)>/r2}" -> "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r30}" -> "VarNode{<java.net.UnknownHostException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.DateFormat: java.text.DateFormat get(int,int,int,java.util.Locale)>/$r8}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509Key: java.security.PublicKey parse(sun.security.util.DerValue)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/r86}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r43}" [color=green3,style=dashed];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/r86}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/r86}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r59}" [color=green3,style=dashed];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/r86}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r11}" [color=green3,style=dashed];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/r86}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r27}" [color=green3,style=dashed];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/r86}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r51}" [color=green3,style=dashed];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/r86}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r2}" [color=green3,style=dashed];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/r86}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r19}" [color=green3,style=dashed];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/r86}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r35}" [color=green3,style=dashed];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/r0}" -> "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/r22}" [];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/r0}" -> "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r9}" [color=green3,style=dashed];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/r0}" -> "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r12}" [color=green3,style=dashed];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r19}" -> "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>/r7}" [color=blue];
  "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/r13}" -> "VarNode{<java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/r13}" -> "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r17}" [color=green3,style=dashed];
  "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/r13}" -> "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r14}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r9}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>/$r14}" -> "VarNode{<java.lang.NoSuchMethodException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>[21@L897] new sun.security.action.GetPropertyAction}.<sun.security.action.GetPropertyAction: java.lang.String defaultVal>}" -> "VarNode{<sun.security.action.GetPropertyAction: java.lang.String run()>/$r3}" [color=red,style=dashed];
  "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r56}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.UniqueName: void <init>(java.util.concurrent.ConcurrentMap,java.lang.String,java.lang.Object[])>/name}" -> "VarNode{<io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>/r0}" [color=blue];
  "VarNode{<io.netty.util.UniqueName: void <init>(java.util.concurrent.ConcurrentMap,java.lang.String,java.lang.Object[])>/name}" -> "ArrayIndexNode{NewObj{<io.netty.util.UniqueName: void <init>(java.util.concurrent.ConcurrentMap,java.lang.String,java.lang.Object[])>[13@L51] newarray java.lang.Object[%intconst2]}}" [color=red];
  "VarNode{<java.util.WeakHashMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue,int,java.util.WeakHashMap$Entry)>/r3}" -> "InstanceFieldNode{NewObj{<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[24@L464] new java.util.WeakHashMap$Entry}.<java.util.WeakHashMap$Entry: java.lang.Object value>}" [color=red];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r11}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r12}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r17}" -> "VarNode{<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int,java.security.cert.CertPathValidatorException$Reason)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r16}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r17}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r64}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void checkGeneral()>/$r12}" -> "VarNode{<java.util.MissingFormatWidthException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.security.InvalidKeyException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r21}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>/r3}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[55@L458] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" -> "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String current()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.HashMap$KeyIterator: java.lang.Object next()>/$r2}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r48}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$KeyIterator: java.lang.Object next()>/$r2}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$KeyIterator: java.lang.Object next()>/$r2}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$KeyIterator: java.lang.Object next()>/$r2}" -> "VarNode{<java.util.AbstractCollection: java.lang.Object[] toArray()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$KeyIterator: java.lang.Object next()>/$r2}" -> "VarNode{<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$KeyIterator: java.lang.Object next()>/$r2}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$KeyIterator: java.lang.Object next()>/$r2}" -> "VarNode{<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$KeyIterator: java.lang.Object next()>/$r2}" -> "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: java.util.Locale[] getAvailableLocales()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$KeyIterator: java.lang.Object next()>/$r2}" -> "VarNode{<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$KeyIterator: java.lang.Object next()>/$r2}" -> "VarNode{<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$KeyIterator: java.lang.Object next()>/$r2}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$KeyIterator: java.lang.Object next()>/$r2}" -> "VarNode{<java.util.AbstractCollection: boolean addAll(java.util.Collection)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$KeyIterator: java.lang.Object next()>/$r2}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.security.MessageDigest: java.lang.String toString()>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.math.BigInteger: void implSquareToLenChecks(int[],int,int[],int)>/$r13}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Signature$Delegate: void tryOperation(java.security.SignatureSpi,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>/$r13}" -> "VarNode{<java.lang.AssertionError: void <init>(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r43}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>/$r14}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253String(boolean)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>/$r14}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253String(boolean)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>/$r14}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253String(java.util.Map)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>/$r4}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext: boolean validatePromise(io.netty.channel.ChannelPromise,boolean)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>/$r4}" -> "VarNode{<java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>/$r4}" -> "VarNode{<io.netty.channel.AbstractChannel: java.lang.String toString()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>/$r4}" -> "VarNode{<io.netty.buffer.UnpooledDirectByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,int,int)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>/$r4}" -> "VarNode{<java.util.IllegalFormatCodePointException: java.lang.String getMessage()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>/$r4}" -> "VarNode{<io.netty.buffer.PooledByteBufAllocator: int validateAndCalculateChunkSize(int,int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>/$r4}" -> "VarNode{<io.netty.util.UniqueName: void <init>(java.util.concurrent.ConcurrentMap,java.lang.String,java.lang.Object[])>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>/$r4}" -> "VarNode{<io.netty.buffer.UnpooledUnsafeDirectByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,int,int)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>/$r4}" -> "VarNode{<io.netty.buffer.AbstractByteBufAllocator: void validate(int,int)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>/$r4}" -> "VarNode{<java.util.UnknownFormatConversionException: java.lang.String getMessage()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>/$r4}" -> "VarNode{<io.netty.channel.AbstractChannel: java.lang.String toString()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>/$r4}" -> "VarNode{<io.netty.buffer.AbstractByteBuf: io.netty.buffer.ByteBuf setIndex(int,int)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>/$r4}" -> "VarNode{<io.netty.buffer.UnpooledHeapByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,byte[],int,int,int)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>/$r4}" -> "VarNode{<java.util.IllegalFormatConversionException: java.lang.String getMessage()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>/$r4}" -> "VarNode{<io.netty.channel.AbstractChannel: java.lang.String toString()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>/$r5}" -> "VarNode{<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>/$r4}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.FilePermission$1: java.lang.String run()>[30@L248] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.JapaneseImperialCalendar: void computeTime()>/$r16}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r9}" -> "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r12}" -> "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/r13}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String)>[10@L1406] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String)>[10@L1406] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[36@L452] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String pad>}" -> "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/r32}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[36@L452] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String pad>}" -> "VarNode{<javax.crypto.Cipher$Transform: int supportsPadding(java.security.Provider$Service)>/$r2}" [color=red,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "ArrayIndexNode{NewObj{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>[20@L1417] newarray java.lang.Object[%intconst5]}}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r39}" [color=red,style=dashed];
  "VarNode{<java.security.Signature: void initVerify(java.security.PublicKey,java.security.spec.AlgorithmParameterSpec)>/$r12}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.ResourceBundle: java.util.ResourceBundle getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>[5@L1333] new java.util.ResourceBundle$CacheKey}.<java.util.ResourceBundle$CacheKey: java.lang.String format>}" -> "VarNode{<java.util.ResourceBundle$CacheKey: java.lang.String getFormat()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r41}" -> "VarNode{<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r96}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>/$r0}" -> "VarNode{<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>/$r0}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>/$r0}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(int)>/%this}" [color=blue];
  "VarNode{<sun.util.calendar.Era: java.lang.String toString()>/$r8}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r15}" -> "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/r3}" [color=blue];
  "VarNode{<io.netty.handler.codec.DecoderResult: void <clinit>()>/$r12}" -> "VarNode{<io.netty.util.Signal: io.netty.util.Signal valueOf(java.lang.String)>/r1}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r8}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/r37}" [];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r8}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r8}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r46}" [color=green3,style=dashed];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r8}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r47}" [color=green3,style=dashed];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.security.NoSuchAlgorithmException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.AssertionError>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.io.IOException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.Error>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.util.ServiceConfigurationError>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.IllegalStateException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.security.KeyStoreException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.RuntimeException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.ClassNotFoundException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.security.cert.CertificateException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.security.SignatureException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.time.DateTimeException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.security.InvalidKeyException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.IllegalArgumentException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.security.cert.CertPathValidatorException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.util.MissingResourceException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.security.ProviderException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.InternalError>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>/r3}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.SecurityException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r7}" -> "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String negPrefixPattern>}" [color=red];
  "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r22}" -> "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r23}" [color=green3,style=dashed];
  "VarNode{<sun.text.normalizer.UnicodeSet: boolean contains(int)>/$r5}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>/$r11}" -> "VarNode{<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r5}" -> "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r6}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser$DomainEntry: void add(sun.security.provider.PolicyParser$KeyStoreEntry)>[8@L1315] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser$DomainEntry: void add(sun.security.provider.PolicyParser$KeyStoreEntry)>[8@L1315] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r3}" [color=red,style=dashed];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(long)>/%this}" [color=blue];
  "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<java.security.BasicPermissionCollection: void add(java.security.Permission)>/$r20}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: void parseDN(java.lang.String,java.util.Map)>/$r4}" -> "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/r2}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName(boolean)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$RBClassLoader: java.lang.Class loadClass(java.lang.String)>/r1}" -> "VarNode{<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r6}" -> "InstanceFieldNode{NewObj{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>[21@L454] new java.util.StringJoiner}.<java.util.StringJoiner: java.lang.String suffix>}" [color=red];
  "InstanceFieldNode{NewObj{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>[52@L408] new java.net.Parts}.<java.net.Parts: java.lang.String query>}" -> "VarNode{<java.net.Parts: java.lang.String getQuery()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r30}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r31}" [color=green3,style=dashed];
  "VarNode{<java.net.URISyntaxException: java.lang.String getMessage()>/$r5}" -> "VarNode{<java.net.URISyntaxException: java.lang.String getMessage()>/$r4}" [color=green3,style=dashed];
  "VarNode{<java.net.URISyntaxException: java.lang.String getMessage()>/$r5}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(int)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher$ExtClassLoader: java.io.File[] getExtDirs()>[10@L189] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher$ExtClassLoader: java.io.File[] getExtDirs()>[10@L189] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String[] normalizedList()>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher$ExtClassLoader: java.io.File[] getExtDirs()>[10@L189] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r33}" -> "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/r37}" [];
  "VarNode{<java.lang.Double: java.lang.String toHexString(double)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.Double: java.lang.String toHexString(double)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r0}" [color=blue,style=dashed];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r61}" -> "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r62}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r82}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[1@L278] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[1@L278] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap$Node: java.lang.Object getKey()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[1@L278] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap$KeyIterator: java.lang.Object next()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[1@L278] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[1@L278] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.LinkedHashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[1@L278] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.LinkedHashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r5}" [color=red,style=dashed];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/$r1}" -> "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r22}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/$r1}" -> "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r3}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/$r1}" -> "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r11}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/$r1}" -> "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r17}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/$r1}" -> "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r5}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/$r1}" -> "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r14}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r13}" [color=green3,style=dashed];
  "VarNode{<sun.misc.URLClassPath: sun.misc.Resource getResource(java.lang.String,boolean)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>/%native-arraycopy-temp383}" -> "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" [color=red];
  "VarNode{<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>/%native-arraycopy-temp383}" -> "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[103@L2377] newarray java.lang.String[i26]}}" [color=red];
  "VarNode{<java.net.URI: java.lang.String access$1402(java.net.URI,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.net.URI: java.net.URI create(java.lang.String)>[0@L850] new java.net.URI}.<java.net.URI: java.lang.String path>}" [color=red];
  "VarNode{<java.net.URI: java.lang.String access$1402(java.net.URI,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>[1@L77] new java.net.URI}.<java.net.URI: java.lang.String path>}" [color=red];
  "VarNode{<java.net.URI: java.lang.String access$1402(java.net.URI,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String path>}" [color=red];
  "VarNode{<java.net.URI: java.lang.String access$1402(java.net.URI,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.ApiRoute: org.fengfei.lanproxy.server.config.web.ResponseInfo run(io.netty.handler.codec.http.FullHttpRequest)>[9@L74] new java.net.URI}.<java.net.URI: java.lang.String path>}" [color=red];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r7}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r8}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.security.cert.CertificateException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[24@L464] new java.util.WeakHashMap$Entry}.<java.util.WeakHashMap$Entry: java.lang.Object value>}" -> "VarNode{<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[24@L464] new java.util.WeakHashMap$Entry}.<java.util.WeakHashMap$Entry: java.lang.Object value>}" -> "VarNode{<java.util.WeakHashMap$Entry: java.lang.Object getValue()>/$r1}" [color=red,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)>/r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>[0@L702] new java.net.URL}.<java.net.URL: java.lang.String host>}" -> "VarNode{<java.net.URL: java.lang.String getHost()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.net.URI: java.lang.String access$1102(java.net.URI,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.net.URI: java.net.URI create(java.lang.String)>[0@L850] new java.net.URI}.<java.net.URI: java.lang.String fragment>}" [color=red];
  "VarNode{<java.net.URI: java.lang.String access$1102(java.net.URI,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String fragment>}" [color=red];
  "VarNode{<java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/r13}" [color=blue];
  "VarNode{<java.io.File: java.net.URI toURI()>/$r7}" -> "VarNode{<java.io.File: java.net.URI toURI()>/r10}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>[9@L175] new java.security.MessageDigest$Delegate}.<java.security.MessageDigest: java.lang.String algorithm>}" -> "VarNode{<java.security.MessageDigest: java.lang.String getAlgorithm()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.Collections: void reverse(java.util.List)>/$r3}" -> "VarNode{<java.util.ArrayList$ListItr: void set(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r8}" -> "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r9}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r25}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$i11}" -> "VarNode{<java.util.regex.Pattern: void normalize()>/$r15}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void initPolicyFile(sun.security.provider.PolicyFile$PolicyInfo,java.net.URL)>/$r8}" -> "VarNode{<sun.security.provider.PolicyFile: void initPolicyFile(sun.security.provider.PolicyFile$PolicyInfo,java.net.URL)>/$r9}" [color=green3,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.util.FormatFlagsConversionMismatchException>}.<java.util.FormatFlagsConversionMismatchException: java.lang.String f>}" -> "VarNode{<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>/$r5}" [color=red,style=dashed];
  "VarNode{<sun.text.normalizer.UnicodeSet: void syntaxError(sun.text.normalizer.RuleCharacterIterator,java.lang.String)>/$r11}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.SunEntries: java.io.File getDeviceFile(java.net.URL)>/$r12}" -> "VarNode{<java.net.URI: java.net.URI create(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r13}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r13}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r18}" [color=green3,style=dashed];
  "VarNode{<java.security.KeyStoreException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" -> "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r16}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r17}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)>/$r6}" -> "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)>/r4}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: void parse(sun.security.util.DerValue)>[39@L659] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r6}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: void parse(sun.security.util.DerValue)>[39@L659] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: void parse(sun.security.util.DerValue)>[39@L659] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r11}" [color=red,style=dashed];
  "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r69}" -> "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r70}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r11}" -> "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r10}" [color=green3,style=dashed];
  "VarNode{<sun.security.rsa.RSAUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.security.AlgorithmParameters)>/$r15}" -> "VarNode{<java.security.ProviderException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r31}" -> "VarNode{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r27}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r28}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>/$r1}" -> "VarNode{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>/$r30}" [color=green3,style=dashed];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>/$r13}" -> "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>/$r14}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.Debug: java.lang.String marshal(java.lang.String)>/$r21}" -> "VarNode{<sun.security.util.Debug: java.lang.String marshal(java.lang.String)>/$r22}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.Debug: java.lang.String marshal(java.lang.String)>/$r21}" -> "VarNode{<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.concurrent.PromiseTask: java.lang.StringBuilder toStringBuilder()>/$r5}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.DerInputBuffer: int toDigit(byte,java.lang.String)>/$r6}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r7}" -> "VarNode{<sun.security.util.AlgorithmDecomposer: java.util.Collection getAliases(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r7}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r7}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void <init>(java.lang.String,sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator,int)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r7}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r7}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void <init>(java.lang.String,int,int,int)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r7}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void <init>(java.lang.String,java.lang.String[])>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r7}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String,int)>/$r11}" -> "VarNode{<java.util.ArrayList: boolean add(java.lang.Object)>/r2}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext$WriteTask: io.netty.channel.AbstractChannelHandlerContext$WriteTask newInstance(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask: void init(io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask,io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1784] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1784] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1784] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap$KeyIterator: java.lang.Object next()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1784] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1784] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.LinkedHashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1784] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap$Node: java.lang.Object getKey()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1784] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.LinkedHashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r5}" [color=red,style=dashed];
  "VarNode{<java.util.Vector: java.lang.Object get(int)>/$r1}" -> "VarNode{<java.text.AttributedString$AttributedStringIterator: java.util.Set getAllAttributeKeys()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.util.Vector: java.lang.Object get(int)>/$r1}" -> "VarNode{<java.text.AttributedString$AttributeMap: java.util.Set entrySet()>/$r14}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X509Key: byte[] getEncodedInternal()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.Exception: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig$3: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.jca.ProviderConfig: java.lang.String expand(java.lang.String)>[5@L282] new sun.security.jca.ProviderConfig$3}.<sun.security.jca.ProviderConfig$3: java.lang.String val$value>}" [color=red];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r19}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r17}" -> "VarNode{<java.util.LinkedList: boolean add(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.text.AttributedString: void setAttributes(java.util.Map,int)>/$r10}" -> "VarNode{<java.util.Vector: boolean add(java.lang.Object)>/r2}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r9}" -> "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r3}" -> "VarNode{<java.net.SocketPermission: boolean match(java.lang.String,java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>/$r25}" -> "VarNode{<java.lang.ClassCastException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r11}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r11}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r11}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r11}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(long)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/$r0}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/$r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "ArrayIndexNode{NewObj{<Server: void main(java.lang.String[])>[8@L11] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<io.netty.channel.embedded.EmbeddedChannel: boolean writeInbound(java.lang.Object[])>/r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[82@L1848] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[82@L1848] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[82@L1848] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[82@L1848] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r61}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r61}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r60}" [color=green3,style=dashed];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r26}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/r2}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,char[],java.util.Formatter$Flags,int,java.util.Locale)>/r11}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.SunEntries: java.io.File getDeviceFile(java.net.URL)>[22@L379] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[16@L670] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[157@L876] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[157@L876] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r3}" [color=red,style=dashed];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/r0}" -> "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/$c2}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/r0}" -> "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/r0}" -> "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/$r6}" [color=green3,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuthority(java.net.URL)>/$r4}" -> "VarNode{<java.net.URL: java.net.URI toURI()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r5}" -> "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r26}" [color=green3,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r37}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "ArrayIndexNode{NewObj{<java.util.logging.LogManager: java.lang.String[] parseClassNames(java.lang.String)>[35@L1388] newarray java.lang.String[$i0]}}" -> "VarNode{<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>/r32}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.logging.LogManager: java.lang.String[] parseClassNames(java.lang.String)>[35@L1388] newarray java.lang.String[$i0]}}" -> "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/r4}" [color=red,style=dashed];
  "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r26}" -> "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r27}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.IllegalReferenceCountException: void <init>(int,int)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.IllegalReferenceCountException: void <init>(int,int)>/$r13}" -> "VarNode{<io.netty.util.IllegalReferenceCountException: void <init>(int,int)>/$r4}" [color=green3,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>[2@L3210] newarray java.lang.Object[i0]}}" -> "VarNode{<java.util.ArrayList: java.lang.Object remove(int)>/%native-arraycopy-temp338}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>[2@L3210] newarray java.lang.Object[i0]}}" -> "VarNode{<java.util.ArrayList: java.lang.Object elementData(int)>/$r2}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>[2@L3210] newarray java.lang.Object[i0]}}" -> "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp341}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>[2@L3210] newarray java.lang.Object[i0]}}" -> "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp344}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>[2@L3210] newarray java.lang.Object[i0]}}" -> "VarNode{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>/%native-arraycopy-temp47}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>[2@L3210] newarray java.lang.Object[i0]}}" -> "VarNode{<java.util.ArrayList$Itr: java.lang.Object next()>/$r4}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>[2@L3210] newarray java.lang.Object[i0]}}" -> "VarNode{<java.util.Vector: java.lang.Object elementData(int)>/$r2}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>[2@L3210] newarray java.lang.Object[i0]}}" -> "VarNode{<java.util.ArrayList: void add(int,java.lang.Object)>/%native-arraycopy-temp491}" [color=red,style=dashed];
  "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/r0}" -> "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$c2}" [color=green3,style=dashed];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/r0}" -> "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$c14}" [color=green3,style=dashed];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/r0}" -> "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$c3}" [color=green3,style=dashed];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>/r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>/r2}" -> "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String,int)>/$r5}" -> "VarNode{<java.util.ArrayList: boolean add(java.lang.Object)>/r2}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.SunEntries: java.io.File getDeviceFile(java.net.URL)>[4@L373] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form)>/$r2}" -> "VarNode{<java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>/$r3}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[20@L672] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.misc.URLClassPath$1: void <init>(sun.misc.URLClassPath,java.lang.String,boolean)>/r2}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath: java.util.Enumeration findResources(java.lang.String,boolean)>[0@L267] new sun.misc.URLClassPath$1}.<sun.misc.URLClassPath$1: java.lang.String val$name>}" [color=red];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String,boolean)>/r1}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String getKeyStoreUrl()>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String,boolean)>/r1}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/r0}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String,boolean)>/r1}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String getStorePassURL()>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String,boolean)>/r1}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r18}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String,boolean)>/r1}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" -> "VarNode{<java.util.HashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" [color=blue];
  "VarNode{<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)>/$r1}" -> "VarNode{<java.util.regex.Matcher: java.lang.CharSequence getSubSequence(int,int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: java.util.HashMap computeOidTable()>/r15}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.Class,boolean,int)>/$r2}" -> "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int)>/poolName}" [color=blue];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r18}" -> "VarNode{<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int,java.security.cert.CertPathValidatorException$Reason)>/r1}" [color=blue];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r14}" -> "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r13}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkRead(java.lang.String)>[0@L888] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r30}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkRead(java.lang.String)>[0@L888] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkRead(java.lang.String)>[0@L888] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: java.lang.String access$000(java.io.FilePermission)>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkRead(java.lang.String)>[0@L888] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkRead(java.lang.String)>[0@L888] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r22}" [color=red,style=dashed];
  "VarNode{<java.util.logging.Logger$1: java.util.ResourceBundle run()>/$r5}" -> "VarNode{<java.lang.InternalError: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.SPILocaleProviderAdapter$1: java.util.spi.LocaleServiceProvider run()>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.SPILocaleProviderAdapter$1: java.util.spi.LocaleServiceProvider run()>/$r9}" -> "VarNode{<sun.util.locale.provider.SPILocaleProviderAdapter$1: java.util.spi.LocaleServiceProvider run()>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: boolean validatePromise(io.netty.channel.ChannelPromise,boolean)>/$r21}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<io.netty.util.Signal: void <init>(java.lang.String)>[1@L50] new io.netty.util.UniqueName}.<io.netty.util.UniqueName: java.lang.String name>}" -> "VarNode{<io.netty.util.UniqueName: java.lang.String name()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>/$r10}" -> "VarNode{<java.text.Format: java.lang.String format(java.lang.Object)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-558}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>[12@L1093] new java.util.regex.Matcher}.<java.util.regex.Matcher: java.lang.CharSequence text>}" [color=red];
  "VarNode{<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger,boolean)>/$r1}" -> "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/r4}" [color=blue];
  "VarNode{<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger,boolean)>/$r1}" -> "VarNode{<java.util.logging.LogManager$LoggerContext: java.util.logging.LogManager$LogNode getNode(java.lang.String)>/r9}" [color=blue];
  "VarNode{<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger,boolean)>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger,boolean)>/$r1}" -> "VarNode{<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger,boolean)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger,boolean)>/$r1}" -> "VarNode{<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>/r3}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r52}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.pkcs.PKCS9Attributes: byte[] decode(sun.security.util.DerInputStream)>/$r19}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseString(java.io.Reader,int,int,java.lang.StringBuilder)>/$r47}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>/$r4}" -> "VarNode{<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>/$r4}" -> "VarNode{<java.lang.String: java.lang.String toString()>/%this}" [color=blue];
  "VarNode{<java.net.Parts: java.lang.String getQuery()>/$r1}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r43}" [color=blue,style=dashed];
  "VarNode{<sun.misc.URLClassPath: java.util.Enumeration getResources(java.lang.String)>/r1}" -> "VarNode{<sun.misc.URLClassPath: java.util.Enumeration getResources(java.lang.String,boolean)>/r2}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>[21@L454] new java.util.StringJoiner}.<java.util.StringJoiner: java.lang.String suffix>}" -> "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>[21@L454] new java.util.StringJoiner}.<java.util.StringJoiner: java.lang.String suffix>}" -> "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r10}" [color=red,style=dashed];
  "VarNode{<java.text.DateFormat: java.text.DateFormat get(int,int,int,java.util.Locale)>/$r13}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r23}" -> "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r24}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r34}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r34}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r110}" [color=green3,style=dashed];
  "VarNode{<java.io.File: java.lang.String getParent()>/$r3}" -> "VarNode{<java.io.File: java.io.File getParentFile()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r14}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r14}" -> "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderName(java.lang.CharSequence)>/$r9}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderName(java.lang.CharSequence)>/$r10}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.RDN: java.lang.String toString()>/$r10}" -> "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r12}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.RDN: java.lang.String toString()>/$r10}" -> "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r9}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.RDN: java.lang.String toString()>/$r10}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.jar.JarFile: java.util.jar.Manifest getManifestFromReference()>[21@L201] new java.util.jar.JarVerifier}.<java.util.jar.JarVerifier: java.lang.String manifestName>}" -> "VarNode{<java.util.jar.JarVerifier: void doneWithMeta()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.jar.JarFile: java.util.jar.Manifest getManifestFromReference()>[21@L201] new java.util.jar.JarVerifier}.<java.util.jar.JarVerifier: java.lang.String manifestName>}" -> "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r37}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.jar.JarFile: java.util.jar.Manifest getManifestFromReference()>[21@L201] new java.util.jar.JarVerifier}.<java.util.jar.JarVerifier: java.lang.String manifestName>}" -> "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r15}" [color=red,style=dashed];
  "VarNode{<javax.crypto.JarVerifier: void verify()>/$r9}" -> "VarNode{<java.net.URL: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.misc.Launcher$ExtClassLoader: java.net.URL[] getExtURLs(java.io.File[])>/$r6}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.GregorianCalendar: void computeTime()>/$r19}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>/$r4}" -> "VarNode{<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>/r5}" [color=blue];
  "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r57}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r57}" -> "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r56}" [color=green3,style=dashed];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r32}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r47}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.Package: void <init>(java.lang.String,java.util.jar.Manifest,java.net.URL,java.lang.ClassLoader)>/$r2}" -> "VarNode{<java.lang.String: java.lang.String concat(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.Policy$2: java.security.Policy run()>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URI: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>/r7}" -> "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.net.SocketPermission$1: java.lang.Integer run()>/$r5}" -> "VarNode{<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>/r0}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void expandAffixes()>/$r7}" -> "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String negativeSuffix>}" [color=red];
  "VarNode{<java.text.DecimalFormat: void expandAffixes()>/$r7}" -> "InstanceFieldNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[99@L1481] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String negativeSuffix>}" [color=red];
  "VarNode{<java.util.Vector: void <init>(int,int)>/$r6}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r31}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r17}" -> "VarNode{<io.netty.util.internal.logging.Log4JLogger: void debug(java.lang.String,java.lang.Object)>/arg}" [color=blue];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r17}" -> "VarNode{<io.netty.util.internal.logging.JdkLogger: void debug(java.lang.String,java.lang.Object)>/arg}" [color=blue];
  "VarNode{<java.net.URLClassLoader$1: java.lang.Class run()>/$r2}" -> "VarNode{<java.lang.String: java.lang.String concat(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.embedded.EmbeddedChannel: void doWrite(io.netty.channel.ChannelOutboundBuffer)>/$r1}" -> "VarNode{<java.util.ArrayDeque: boolean add(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVAKeyword: java.lang.String getKeyword(sun.security.util.ObjectIdentifier,int,java.util.Map)>/$r11}" -> "VarNode{<sun.security.x509.AVAKeyword: java.lang.String getKeyword(sun.security.util.ObjectIdentifier,int,java.util.Map)>/$r12}" [color=green3,style=dashed];
  "VarNode{<io.netty.buffer.AbstractByteBuf: io.netty.buffer.ByteBuf setIndex(int,int)>/$r6}" -> "VarNode{<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.CertificateExtensions: sun.security.x509.Extension get(java.lang.String)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>/%this}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r86}" -> "VarNode{<sun.security.util.AlgorithmDecomposer: java.lang.String hashName(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String getKeyStoreUrl()>/$r9}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[39@L188] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[39@L188] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<sun.net.InetAddressCachePolicy$2: java.lang.Integer run()>/$r0}" -> "VarNode{<java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>/r0}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void channelRead0(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/request}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.ApiRoute: org.fengfei.lanproxy.server.config.web.ResponseInfo run(io.netty.handler.codec.http.FullHttpRequest)>/r3}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void channelRead0(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/request}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/request}" [color=blue];
  "ArrayIndexNode{NewObj{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>[70@L1883] newarray java.lang.Object[%intconst4]}}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r39}" [color=red,style=dashed];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r6}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Pattern: void compile()>/$r1}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>[0@L1028] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String normalizedPattern>}" [color=red];
  "VarNode{<java.util.regex.Pattern: void compile()>/$r1}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>[0@L1054] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String normalizedPattern>}" [color=red];
  "VarNode{<java.security.Security: java.lang.Object[] getImpl(java.lang.String,java.lang.String,java.security.Provider)>/r2}" -> "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.security.Provider)>/r1}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r8}" -> "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r9}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/r6}" -> "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r5}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[11@L194] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" -> "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String current()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Locale$Cache: java.util.Locale createObject(java.util.Locale$LocaleKey)>[0@L756] new java.util.Locale}.<java.util.Locale: java.lang.String languageTag>}" -> "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r22}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Locale$Cache: java.util.Locale createObject(java.util.Locale$LocaleKey)>[0@L756] new java.util.Locale}.<java.util.Locale: java.lang.String languageTag>}" -> "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r14}" [color=red,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged javax.crypto.CryptoPolicyParser$ParsingException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.net.URI: java.lang.String toString()>/$r1}" -> "VarNode{<java.net.URI: java.net.URL toURL()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.io.FileDescriptor: void attach(java.io.Closeable)>/r3}" -> "VarNode{<java.util.ArrayList: boolean add(java.lang.Object)>/r2}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r35}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/r62}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/r62}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r17}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.provider.FallbackLocaleProviderAdapter: void <clinit>()>/$r1}" -> "VarNode{<java.util.Collections: java.util.Set singleton(java.lang.Object)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>[13@L181] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String rfc2253Dn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253Name(java.util.Map)>/$r6}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>[13@L181] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String rfc2253Dn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253Name(java.util.Map)>/$r5}" [color=red,style=dashed];
  "VarNode{<java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>/$r3}" -> "VarNode{<java.util.regex.Pattern: void normalize()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>/$r3}" -> "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>/$r3}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r17}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r6}" -> "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r4}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r4}" -> "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r26}" -> "VarNode{<java.lang.Exception: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkExternalForm(java.net.URL)>/$r7}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkExternalForm(java.net.URL)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.util.logging.LogManager: void readPrimordialConfiguration()>/$r8}" -> "VarNode{<java.util.logging.LogManager: void readPrimordialConfiguration()>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.security.Signature: void initVerify(java.security.PublicKey,java.security.spec.AlgorithmParameterSpec)>/$r11}" -> "VarNode{<java.security.Signature: void initVerify(java.security.PublicKey,java.security.spec.AlgorithmParameterSpec)>/$r12}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r20}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpResponse: java.lang.String toString()>/$r3}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<io.netty.channel.AbstractChannel: java.lang.String toString()>/$r15}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<io.netty.channel.AbstractChannel: java.lang.String toString()>/$r15}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<io.netty.channel.AbstractChannel: java.lang.String toString()>/$r15}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r78}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r34}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r34}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" [color=green3,style=dashed];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r41}" -> "VarNode{<java.lang.Throwable$WrappedPrintStream: void println(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r41}" -> "VarNode{<java.lang.Throwable$WrappedPrintWriter: void println(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r9}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r38}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: int escape(boolean,boolean,boolean)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: int escape(boolean,boolean,boolean)>/$r5}" -> "VarNode{<java.util.regex.Pattern: int escape(boolean,boolean,boolean)>/$r16}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object)>/arg}" -> "ArrayIndexNode{NewObj{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object)>[1@L135] newarray java.lang.Object[%intconst0]}}" [color=red];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[24@L674] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: java.lang.String text()>/$r1}" -> "VarNode{<io.netty.handler.codec.http.HttpVersion: java.lang.String toString()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.Debug: java.lang.String marshal(java.lang.String)>/$r13}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>/$r4}" -> "VarNode{<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r25}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.security.AllPermissionCollection: void add(java.security.Permission)>/$r7}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: boolean matches(java.lang.String,java.lang.CharSequence)>/r2}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>/r2}" [color=blue];
  "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.FilePermission: void init(int)>/$r10}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkRead(java.lang.String)>[0@L888] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "VarNode{<java.io.FilePermission: void init(int)>/$r10}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkWrite(java.lang.String)>[0@L979] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "VarNode{<java.io.FilePermission: void init(int)>/$r10}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkDelete(java.lang.String)>[0@L1007] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "VarNode{<java.io.FilePermission: void init(int)>/$r10}" -> "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[22@L684] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "VarNode{<java.io.FilePermission: void init(int)>/$r10}" -> "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[46@L691] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "VarNode{<java.io.FilePermission: void init(int)>/$r10}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[4@L990] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "VarNode{<sun.util.locale.provider.SPILocaleProviderAdapter$1: java.util.spi.LocaleServiceProvider run()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r18}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[0@L823] new java.net.URL}.<java.net.URL: java.lang.String query>}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r19}" [color=red,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>/$r2}" -> "VarNode{<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>/$r7}" [color=blue,style=dashed];
  "VarNode{<sun.text.SupplementaryCharacterData: int getValue(int)>/$r8}" -> "VarNode{<java.lang.AssertionError: void <init>(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r10}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[21@L1381] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r10}" -> "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[55@L296] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r10}" -> "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>[21@L470] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r10}" -> "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency$2: java.io.File run()>[21@L409] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r10}" -> "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[77@L307] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r10}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[35@L1388] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r10}" -> "InstanceFieldNode{NewObj{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>[0@L162] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r10}" -> "InstanceFieldNode{NewObj{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>[63@L215] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r10}" -> "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[60@L297] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r10}" -> "InstanceFieldNode{NewObj{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>[34@L190] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r10}" -> "InstanceFieldNode{NewObj{<java.util.logging.LogManager: void readConfiguration()>[47@L1298] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r10}" -> "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[81@L308] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r10}" -> "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency$2: java.io.File run()>[15@L407] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r10}" -> "InstanceFieldNode{NewObj{<sun.misc.Launcher$ExtClassLoader: java.net.URL[] getExtURLs(java.io.File[])>[16@L204] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "InstanceFieldNode{NewObj{<java.util.Collections: java.util.Set singleton(java.lang.Object)>[0@L4669] new java.util.Collections$SingletonSet}.<java.util.Collections$SingletonSet: java.lang.Object element>}" -> "VarNode{<java.util.Collections$SingletonSet: java.util.Iterator iterator()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>[21@L272] new java.net.URL}.<java.net.URL: java.lang.String file>}" -> "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>[21@L272] new java.net.URL}.<java.net.URL: java.lang.String file>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r25}" [color=red,style=dashed];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r29}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r30}" [color=green3,style=dashed];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r29}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase()>/%this}" [color=blue];
  "VarNode{<java.io.File: java.lang.String getAbsolutePath()>/$r2}" -> "VarNode{<java.io.File: java.io.File getAbsoluteFile()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r51}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509Key: java.security.PublicKey parse(sun.security.util.DerValue)>/$r15}" -> "VarNode{<sun.security.x509.X509Key: java.security.PublicKey parse(sun.security.util.DerValue)>/$r16}" [color=green3,style=dashed];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String)>/r2}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r1}" [color=blue];
  "VarNode{<java.util.LinkedList$Node: void <init>(java.util.LinkedList$Node,java.lang.Object,java.util.LinkedList$Node)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.LinkedList: void linkLast(java.lang.Object)>[1@L142] new java.util.LinkedList$Node}.<java.util.LinkedList$Node: java.lang.Object item>}" [color=red];
  "VarNode{<java.util.LinkedList$Node: void <init>(java.util.LinkedList$Node,java.lang.Object,java.util.LinkedList$Node)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.LinkedList: void linkBefore(java.lang.Object,java.util.LinkedList$Node)>[1@L158] new java.util.LinkedList$Node}.<java.util.LinkedList$Node: java.lang.Object item>}" [color=red];
  "VarNode{<java.util.LinkedList$Node: void <init>(java.util.LinkedList$Node,java.lang.Object,java.util.LinkedList$Node)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.LinkedList: boolean addAll(int,java.util.Collection)>[18@L424] new java.util.LinkedList$Node}.<java.util.LinkedList$Node: java.lang.Object item>}" [color=red];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r20}" -> "ArrayIndexNode{NewObj{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>[6@L313] newarray java.lang.String[%intconst1]}}" [color=red];
  "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r3}" -> "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>/r5}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r32}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/r37}" [];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r32}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r32}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r48}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r0}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r1}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: void getIP()>/$r5}" -> "VarNode{<java.net.SocketPermission: void getIP()>/r11}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: void getIP()>/$r5}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DerValue: sun.security.util.DerInputStream toDerInputStream()>/$r7}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.security.cert.CertificateParsingException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.lang.Throwable: void printStackTrace(java.lang.Throwable$PrintStreamOrWriter)>/$r10}" -> "VarNode{<java.lang.Throwable: void printStackTrace(java.lang.Throwable$PrintStreamOrWriter)>/$r11}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r25}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r27}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r14}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r14}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r14}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.io.File)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r14}" -> "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r14}" -> "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.net.InetAddress: void <clinit>()>[39@L981] new sun.security.action.GetPropertyAction}.<sun.security.action.GetPropertyAction: java.lang.String theProp>}" [color=red];
  "VarNode{<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.net.InetAddress: void <clinit>()>[56@L989] new sun.security.action.GetPropertyAction}.<sun.security.action.GetPropertyAction: java.lang.String theProp>}" [color=red];
  "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ServiceLoader$LazyIterator: boolean hasNextService()>/$r13}" -> "InstanceFieldNode{NewObj{<java.util.ServiceLoader: void reload()>[2@L219] new java.util.ServiceLoader$LazyIterator}.<java.util.ServiceLoader$LazyIterator: java.lang.String nextName>}" [color=red];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String)>/$r7}" -> "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r55}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r56}" [color=green3,style=dashed];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r14}" -> "VarNode{<java.text.MessageFormat: int findKeyword(java.lang.String,java.lang.String[])>/r1}" [color=blue];
  "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/$r14}" -> "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/$r15}" [color=green3,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.util.MissingResourceException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.logging.LoggingPermission: void <init>(java.lang.String,java.lang.String)>/$r12}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r14}" -> "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r15}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>/$r2}" -> "VarNode{<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>/r0}" [color=green3,style=dashed];
  "VarNode{<java.util.Hashtable: void <init>(int,float)>/$r5}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp341}" -> "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[1@L120] newarray java.lang.Object[%intconst0]}}" [color=red];
  "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp341}" -> "ArrayIndexNode{NewObj{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>[2@L3210] newarray java.lang.Object[i0]}}" [color=red];
  "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp341}" -> "ArrayIndexNode{NewObj{<sun.security.util.CurveDB: java.lang.String[] getNamesByOID(java.lang.String)>[5@L167] newarray java.lang.String[%intconst0]}}" [color=red];
  "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp341}" -> "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[40@L1229] newarray java.lang.String[%intconst1]}}" [color=red];
  "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp341}" -> "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" [color=red];
  "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp341}" -> "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[82@L2364] newarray java.lang.String[%intconst0]}}" [color=red];
  "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp341}" -> "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[103@L2377] newarray java.lang.String[i26]}}" [color=red];
  "VarNode{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>/$r32}" -> "VarNode{<java.lang.SecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.resources.LocaleData: sun.util.resources.TimeZoneNamesBundle getTimeZoneNames(java.util.Locale)>/$r6}" -> "VarNode{<sun.util.resources.LocaleData: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>/r1}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r4}" -> "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r5}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r4}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r7}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r120}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/$r17}" -> "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/$r17}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r14}" [color=green3,style=dashed];
  "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>/r9}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>/r9}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>/$r35}" [color=green3,style=dashed];
  "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>/r9}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r27}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r22}" -> "VarNode{<java.lang.ClassCastException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions(int)>/$r1}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions(int)>/$r1}" -> "VarNode{<java.util.PropertyPermissionCollection: void add(java.security.Permission)>/$r8}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.URIName: java.lang.String toString()>/$r6}" -> "VarNode{<sun.security.x509.GeneralName: java.lang.String toString()>/$r2}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1774] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object value>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1774] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object value>}" -> "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1774] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object value>}" -> "VarNode{<java.util.HashMap: java.lang.Object get(java.lang.Object)>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1774] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object value>}" -> "VarNode{<java.util.HashMap$Node: java.lang.Object getValue()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1774] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object value>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r3}" [color=red,style=dashed];
  "VarNode{<io.netty.handler.codec.http.DefaultFullHttpRequest: java.lang.String toString()>/%this}" -> "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: java.lang.StringBuilder appendFullRequest(java.lang.StringBuilder,io.netty.handler.codec.http.FullHttpRequest)>/req}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveFile(java.net.URL,java.lang.String)>[10@L1296] new java.net.URL}.<java.net.URL: java.lang.String host>}" -> "VarNode{<java.net.URL: java.lang.String getHost()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveFile(java.net.URL,java.lang.String)>[10@L1296] new java.net.URL}.<java.net.URL: java.lang.String host>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r24}" [color=red,style=dashed];
  "VarNode{<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AVAKeyword: java.lang.String getKeyword(sun.security.util.ObjectIdentifier,int,java.util.Map)>/$r1}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toKeyword(int,java.util.Map)>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AVAKeyword: java.lang.String getKeyword(sun.security.util.ObjectIdentifier,int,java.util.Map)>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVAKeyword: java.lang.String getKeyword(sun.security.util.ObjectIdentifier,int,java.util.Map)>/$r1}" -> "VarNode{<sun.security.x509.AVAKeyword: java.lang.String getKeyword(sun.security.util.ObjectIdentifier,int,java.util.Map)>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r20}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r20}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r20}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r20}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar getLocalGregorianCalendar(java.lang.String)>/$r25}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r41}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.lang.NoSuchMethodException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.util.DerInputStream: int getLength(int,java.io.InputStream)>/$r18}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r14}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r2}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r5}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r41}" [];
  "VarNode{<java.lang.LinkageError: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.Error: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String access$100(sun.security.jca.ProviderConfig)>/$r1}" -> "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r28}" [color=blue,style=dashed];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String access$100(sun.security.jca.ProviderConfig)>/$r1}" -> "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.util.PropertyPermissionCollection: void add(java.security.Permission)>/$r3}" -> "VarNode{<java.util.PropertyPermission: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.PropertyPermissionCollection: void add(java.security.Permission)>/$r3}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r71}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r72}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r26}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>[0@L625] new sun.security.provider.PolicyParser$PermissionEntry}.<sun.security.provider.PolicyParser$PermissionEntry: java.lang.String signedBy>}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r29}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>[0@L625] new sun.security.provider.PolicyParser$PermissionEntry}.<sun.security.provider.PolicyParser$PermissionEntry: java.lang.String signedBy>}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r98}" [color=red,style=dashed];
  "VarNode{<java.net.URLClassLoader: java.lang.Package definePackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/r2}" -> "VarNode{<java.lang.ClassLoader: java.lang.Package definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>/r2}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.lang.Package definePackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/r2}" -> "VarNode{<java.net.URLClassLoader: java.lang.Package definePackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r3}" [color=green3,style=dashed];
  "VarNode{<java.net.URLClassLoader: java.lang.Package definePackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/r2}" -> "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" [color=blue];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>/$r7}" -> "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.util.PropertyPermission: void <init>(java.lang.String,java.lang.String)>/r2}" -> "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r31}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.x509.SerialNumber: java.lang.String toString()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.SerialNumber: java.lang.String toString()>/$r4}" -> "VarNode{<sun.security.x509.SerialNumber: java.lang.String toString()>/$r1}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r10}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.util.jar.Manifest: java.util.jar.Attributes getTrustedAttributes(java.lang.String)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.jar.Manifest: java.util.jar.Attributes getTrustedAttributes(java.lang.String)>/r1}" -> "VarNode{<java.util.jar.Manifest: java.util.jar.Attributes getTrustedAttributes(java.lang.String)>/$r7}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r29}" -> "VarNode{<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r5}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r5}" -> "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>/$r34}" -> "VarNode{<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r9}" -> "VarNode{<java.lang.InternalError: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Hashtable: java.lang.Object get(java.lang.Object)>/$r4}" -> "VarNode{<java.util.Properties: java.lang.String getProperty(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r27}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.x509.X500Name: void parseDN(java.lang.String,java.util.Map)>[34@L916] new sun.security.x509.RDN}.<sun.security.x509.RDN: java.lang.String canonicalString>}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253String(boolean)>/r5}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r13}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/$r6}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: void updateSigners(java.security.CodeSigner[],java.util.Hashtable,java.lang.String)>/r1}" -> "VarNode{<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>/r3}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r61}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>[1@L854] new java.util.logging.LogManager$LoggerContext$1}.<java.util.logging.LogManager$LoggerContext$1: java.lang.String val$name>}" -> "VarNode{<java.util.logging.LogManager$LoggerContext$1: java.lang.Void run()>/$r6}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r26}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.Extension: void <init>(char,java.lang.String)>/r1}" -> "VarNode{<sun.util.locale.Extension: void setValue(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r16}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r17}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC1779DN(java.util.Map)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC1779DN(java.util.Map)>/$r14}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC1779DN(java.util.Map)>/$r4}" [color=green3,style=dashed];
  "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<java.net.Inet6Address: void <init>(java.lang.String,byte[],java.lang.String)>/r4}" -> "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet complement(int,int)>/$r11}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253Name(java.util.Map)>/$r2}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253Name()>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{MergedObj{<Merged sun.security.provider.PolicyParser$ParsingException>}.<sun.security.provider.PolicyParser$ParsingException: java.lang.String i18nMessage>}" [color=red];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/r0}" -> "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/r0}" -> "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/$r13}" [color=green3,style=dashed];
  "VarNode{<java.security.Policy$2: java.security.Policy run()>/$r12}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r12}" -> "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r11}" [color=green3,style=dashed];
  "VarNode{<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>/r1}" -> "VarNode{<sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r31}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.ClassCastException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/r4}" -> "VarNode{<java.util.logging.LogManager$LoggerContext$1: void <init>(java.util.logging.LogManager$LoggerContext,java.util.logging.Logger,java.util.logging.LogManager,java.lang.String)>/r4}" [color=blue];
  "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/r4}" -> "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/r4}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r9}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>[0@L1032] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String codeBase>}" [color=red];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-556}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>[12@L1093] new java.util.regex.Matcher}.<java.util.regex.Matcher: java.lang.CharSequence text>}" [color=red];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r7}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/r25}" [];
  "VarNode{<sun.security.util.AlgorithmDecomposer: java.util.Set decomposeImpl(java.lang.String)>/r0}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>/$r7}" -> "ArrayIndexNode{NewObj{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>[15@L532] newarray java.lang.Object[%intconst0]}}" [color=red];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: java.lang.String getValue()>/$r1}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r45}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: java.lang.String getValue()>/$r1}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r28}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: java.lang.String getValue()>/$r1}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>/$c1}" -> "VarNode{<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>/$r3}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r9}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.text.DigitList: void set(boolean,java.math.BigInteger,int)>/$r2}" -> "VarNode{<java.text.DigitList: void set(boolean,java.math.BigInteger,int)>/$r3}" [color=green3,style=dashed];
  "VarNode{<java.util.LinkedList: java.lang.String outOfBoundsMsg(int)>/$r6}" -> "VarNode{<java.util.LinkedList: void checkPositionIndex(int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.LinkedList: java.lang.String outOfBoundsMsg(int)>/$r6}" -> "VarNode{<java.util.LinkedList: void checkElementIndex(int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.security.Security: void initialize()>/$r22}" -> "VarNode{<java.security.Security: void initialize()>/$r23}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FixedString: void print(java.lang.Object,java.util.Locale)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r13}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/r5}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r83}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/$r5}" -> "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/$r6}" [color=green3,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r29}" -> "VarNode{<sun.misc.FloatingDecimal: int getHexDigit(java.lang.String,int)>/r0}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/r6}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/$r0}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/r6}" -> "VarNode{<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>/%this}" [color=blue];
  "VarNode{<java.nio.charset.UnsupportedCharsetException: void <init>(java.lang.String)>/$r2}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r7}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r16}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" -> "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.util.logging.LogManager$LoggerContext$1: java.lang.Void run()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.logging.LogManager$LoggerContext$1: java.lang.Void run()>/$r6}" -> "VarNode{<java.util.logging.LogManager$LoggerContext$1: java.lang.Void run()>/$r4}" [color=green3,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>[5@L1505] newarray java.lang.String[%intconst1]}}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r9}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>[5@L1505] newarray java.lang.String[%intconst1]}}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r10}" [color=red,style=dashed];
  "VarNode{<java.util.StringTokenizer: java.lang.String nextToken(java.lang.String)>/$r2}" -> "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r18}" [color=blue,style=dashed];
  "VarNode{<io.netty.channel.AbstractChannel$AbstractUnsafe: void write(java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" -> "VarNode{<io.netty.channel.AbstractChannel: java.lang.Object filterOutboundMessage(java.lang.Object)>/msg}" [color=blue];
  "VarNode{<java.math.BigDecimal: long[] divRemNegativeLong(long,long)>/$r6}" -> "VarNode{<java.lang.AssertionError: void <init>(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext$7: void run()>/$r1}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void access$600(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object)>/x1}" [color=blue];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r22}" -> "ArrayIndexNode{NewObj{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>[6@L313] newarray java.lang.String[%intconst1]}}" [color=red];
  "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r45}" -> "VarNode{<java.util.Currency: void info(java.lang.String,java.lang.Throwable)>/r3}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[173@L889] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[173@L889] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r3}" [color=red,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.io.File)>/$r3}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r15}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r91}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r15}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r90}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r15}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.net.SocketPermission: boolean match(java.lang.String,java.lang.String)>/$r1}" -> "VarNode{<sun.security.util.RegisteredDomain: java.util.Optional from(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String)>/$r12}" -> "InstanceFieldNode{MergedObj{<Merged sun.security.provider.PolicyParser$ParsingException>}.<sun.security.provider.PolicyParser$ParsingException: java.lang.String i18nMessage>}" [color=red];
  "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseQuotedString(java.io.Reader,java.lang.StringBuilder)>/$r12}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderConfig: java.lang.String expand(java.lang.String)>[5@L282] new sun.security.jca.ProviderConfig$3}.<sun.security.jca.ProviderConfig$3: java.lang.String val$value>}" -> "VarNode{<sun.security.jca.ProviderConfig$3: java.lang.String run()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/r35}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/r35}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r31}" [color=green3,style=dashed];
  "VarNode{<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>/$r14}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[77@L307] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[77@L307] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[77@L307] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[77@L307] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkWrite(java.lang.String)>[0@L979] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String actions>}" -> "VarNode{<java.io.FilePermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>/$r5}" -> "VarNode{<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>/$r6}" [color=green3,style=dashed];
  "VarNode{<sun.misc.JarIndex: void addToList(java.lang.String,java.lang.String,java.util.HashMap)>/r1}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" -> "VarNode{<java.lang.ReflectiveOperationException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.String resolveName(java.lang.String)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.jar.Attributes$Name: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.jar.Attributes$Name: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.util.jar.Attributes$Name: void <init>(java.lang.String)>/$r2}" [color=green3,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Currency$CurrencyNameGetter: java.lang.Object getObject(java.util.spi.LocaleServiceProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r3}" -> "VarNode{<java.util.Currency$CurrencyNameGetter: java.lang.String getObject(java.util.spi.CurrencyNameProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r4}" [color=blue];
  "VarNode{<java.security.MessageDigest: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>[9@L175] new java.security.MessageDigest$Delegate}.<java.security.MessageDigest: java.lang.String algorithm>}" [color=red];
  "VarNode{<java.security.MessageDigest: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.security.Provider)>[18@L284] new java.security.MessageDigest$Delegate}.<java.security.MessageDigest: java.lang.String algorithm>}" [color=red];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObject(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,java.lang.String,java.lang.Object[])>/r3}" -> "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>/r15}" [color=blue];
  "VarNode{<java.util.HashMap: void <init>(int,float)>/$r10}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-540}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>[12@L1093] new java.util.regex.Matcher}.<java.util.regex.Matcher: java.lang.CharSequence text>}" [color=red];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r40}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r41}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC2253DN(java.util.Map)>/$r10}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC2253DN(java.util.Map)>/$r4}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC2253DN(java.util.Map)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC2253DN(java.util.Map)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/r0}" -> "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/$r15}" [];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/r0}" -> "VarNode{<sun.text.normalizer.NormalizerBase$NFDMode: java.lang.String normalize(java.lang.String,int)>/r0}" [color=blue];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/r0}" -> "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/$r14}" [];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/r0}" -> "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/$r16}" [];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/r0}" -> "VarNode{<sun.text.normalizer.NormalizerBase$NFKCMode: java.lang.String normalize(java.lang.String,int)>/r0}" [color=blue];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/r0}" -> "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/$r13}" [];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/r0}" -> "VarNode{<sun.text.normalizer.NormalizerBase$NFCMode: java.lang.String normalize(java.lang.String,int)>/r0}" [color=blue];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/r0}" -> "VarNode{<sun.text.normalizer.NormalizerBase$NFKDMode: java.lang.String normalize(java.lang.String,int)>/r0}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r55}" -> "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/r3}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>[0@L1032] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String signedBy>}" [color=red];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r12}" -> "VarNode{<sun.util.locale.Extension: void setValue(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.FilePermission: void init(int)>/$r25}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r30}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.logging.PlatformLogger$LoggerProxy: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.logging.PlatformLogger: void <init>(java.lang.String)>[9@L241] new sun.util.logging.PlatformLogger$DefaultLoggerProxy}.<sun.util.logging.PlatformLogger$LoggerProxy: java.lang.String name>}" [color=red];
  "VarNode{<java.net.URI$Parser: int parseAuthority(int,int)>/$r4}" -> "VarNode{<java.net.URI: java.lang.String access$2202(java.net.URI,java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[0@L417] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String privateuse>}" -> "VarNode{<sun.util.locale.LanguageTag: java.lang.String getPrivateuse()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void <init>(java.lang.String,int,int,int)>/$r12}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String positivePrefix>}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String positivePrefix>}" -> "VarNode{<java.text.DecimalFormat: java.lang.String toPattern(boolean)>/$r39}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String positivePrefix>}" -> "VarNode{<java.text.DecimalFormat: java.lang.String toPattern(boolean)>/$r19}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String positivePrefix>}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r9}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC1779String(java.util.Map)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC1779String(java.util.Map)>/$r2}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toRFC1779String(java.util.Map)>/$r4}" [color=green3,style=dashed];
  "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r26}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHostString(java.lang.String)>/$r5}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHostString(java.lang.String)>/$r6}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>[36@L898] new java.net.URL}.<java.net.URL: java.lang.String host>}" -> "VarNode{<java.net.URL: java.lang.String getHost()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r5}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.io.FileNotFoundException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.JceSecurity: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/$r9}" -> "VarNode{<java.security.NoSuchAlgorithmException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DerInputBuffer: sun.security.util.BitArray getUnalignedBitString()>/$r9}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.DefaultFullHttpRequest: java.lang.String toString()>/$r3}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.jar.Attributes: void read(java.util.jar.Manifest$FastInputStream,byte[])>/$r11}" -> "VarNode{<sun.util.logging.PlatformLogger: void warning(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String[][] getPrincipalInfo(sun.security.provider.PolicyParser$PrincipalEntry,java.security.Principal[])>/$r26}" -> "ArrayIndexNode{MultiArrayObj{alloc=r29 = newmultiarray java.lang.String[%intconst1][%intconst2],type=java.lang.String[] in <sun.security.provider.PolicyFile: java.lang.String[][] getPrincipalInfo(sun.security.provider.PolicyParser$PrincipalEntry,java.security.Principal[])>}}" [color=red];
  "VarNode{<java.util.ArrayDeque: void addLast(java.lang.Object)>/r0}" -> "ArrayIndexNode{NewObj{<java.util.ArrayDeque: void doubleCapacity()>[20@L162] newarray java.lang.Object[$i5]}}" [color=red];
  "VarNode{<java.util.ArrayDeque: void addLast(java.lang.Object)>/r0}" -> "ArrayIndexNode{NewObj{<java.util.ArrayDeque: void <init>()>[2@L193] newarray java.lang.Object[%intconst0]}}" [color=red];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuth(java.lang.String)>/$r5}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuthority(java.net.URL)>/$r6}" [color=blue,style=dashed];
  "VarNode{<io.netty.buffer.WrappedByteBuf: java.lang.String toString()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.jar.JarFile: void <init>(java.lang.String)>[0@L108] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.net.SocketPermission: void getIP()>/r11}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName0(java.lang.String,boolean)>/r0}" [color=blue];
  "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509Key: byte[] getEncodedInternal()>/$r9}" -> "VarNode{<java.security.InvalidKeyException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r39}" -> "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r39}" -> "InstanceFieldNode{NewObj{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>[21@L272] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r39}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r39}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=green3,style=dashed];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r39}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[0@L823] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "InstanceFieldNode{MergedObj{<Merged sun.util.locale.LocaleSyntaxException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath: java.util.Enumeration getResources(java.lang.String,boolean)>[0@L315] new sun.misc.URLClassPath$2}.<sun.misc.URLClassPath$2: java.lang.String val$name>}" -> "VarNode{<sun.misc.URLClassPath$2: boolean next()>/$r5}" [color=red,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r12}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.net.SocketPermission: int[] parsePort(java.lang.String)>/$r2}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r16}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String)>/r2}" -> "VarNode{<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String,int)>/r1}" [color=blue];
  "VarNode{<java.util.ArrayList$ListItr: void set(java.lang.Object)>/r1}" -> "VarNode{<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>/r2}" [color=blue];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r48}" -> "VarNode{<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.text.DateFormat: java.util.Date parse(java.lang.String)>/r2}" -> "VarNode{<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>/r2}" [color=blue];
  "VarNode{<java.text.DateFormat: java.util.Date parse(java.lang.String)>/r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.DateFormat: java.util.Date parse(java.lang.String)>/r2}" -> "VarNode{<java.text.DateFormat: java.util.Date parse(java.lang.String)>/$r6}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.CertificateVersion: java.lang.String toString()>/$r4}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r11}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.DerValue: sun.security.util.ObjectIdentifier getOID()>/$r7}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/$r13}" -> "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/$r14}" [color=green3,style=dashed];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r31}" -> "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r32}" [color=green3,style=dashed];
  "VarNode{<java.util.MissingFormatArgumentException: java.lang.String getMessage()>/$r5}" -> "VarNode{<java.util.MissingFormatArgumentException: java.lang.String getMessage()>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.util.IllformedLocaleException: void <init>(java.lang.String,int)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.IllformedLocaleException: void <init>(java.lang.String,int)>/$r10}" -> "VarNode{<java.util.IllformedLocaleException: void <init>(java.lang.String,int)>/$r3}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: void getCanonName()>/$r7}" -> "VarNode{<java.net.SocketPermission: void getCanonName()>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: void getCanonName()>/$r7}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase()>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r60}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.text.AttributedString: void <init>(java.text.AttributedCharacterIterator,int,int,java.text.AttributedCharacterIterator$Attribute[])>/$r10}" -> "VarNode{<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>/r2}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r47}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r9}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.Signal: io.netty.util.Signal valueOf(java.lang.String)>/r1}" -> "VarNode{<io.netty.util.Signal: void <init>(java.lang.String)>/name}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r33}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r32}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r10}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r11}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r9}" [color=red,style=dashed];
  "VarNode{<java.util.Hashtable$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.Hashtable$Entry)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>[17@L436] new java.util.Hashtable$Entry}.<java.util.Hashtable$Entry: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>/$r2}" -> "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,boolean)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>/$r2}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>/$r2}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>/$r2}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: void throwAccessCheckException(java.lang.Object)>/$r19}" -> "VarNode{<java.lang.IllegalAccessException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,boolean)>/$r3}" -> "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,boolean)>/r4}" [];
  "VarNode{<java.util.IllegalFormatFlagsException: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{MergedObj{<Merged java.util.IllegalFormatFlagsException>}.<java.util.IllegalFormatFlagsException: java.lang.String flags>}" [color=red];
  "VarNode{<java.math.BigInteger: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.math.BigInteger: void <init>(java.lang.String,int)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r25}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)>/$r1}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r82}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r82}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URLClassLoader: void definePackageInternal(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r66}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r67}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r15}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r16}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r43}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVA: void <init>(sun.security.util.DerValue)>/$r12}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r38}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r6}" -> "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r4}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.URIName: sun.security.x509.URIName nameConstraint(sun.security.util.DerValue)>/$r19}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[53@L454] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String mode>}" -> "VarNode{<javax.crypto.Cipher$Transform: int supportsMode(java.security.Provider$Service)>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r34}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r34}" -> "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r33}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r19}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r19}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r19}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r19}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r15}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r14}" [color=green3,style=dashed];
  "VarNode{<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>/r1}" -> "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/r1}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.String getCanonicalName()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/$r12}" -> "VarNode{<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r90}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r90}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r6}" -> "VarNode{<java.util.regex.Pattern: void normalize()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r6}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r6}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r8}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>[65@L630] new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString}.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String str>}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String value()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/$r6}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r32}" -> "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r33}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r24}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.ExpiringCache: void put(java.lang.String,java.lang.String)>/r5}" -> "VarNode{<java.io.ExpiringCache$Entry: void <init>(long,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.ExpiringCache: void put(java.lang.String,java.lang.String)>/r5}" -> "VarNode{<java.io.ExpiringCache$Entry: void setVal(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.AlgorithmDecomposer: java.util.Collection getAliases(java.lang.String)>/r0}" -> "ArrayIndexNode{NewObj{<sun.security.util.AlgorithmDecomposer: java.util.Collection getAliases(java.lang.String)>[14@L149] newarray java.lang.String[%intconst4]}}" [color=red];
  "VarNode{<java.lang.Class: java.lang.String getSimpleName()>/$r11}" -> "VarNode{<java.lang.Class: java.lang.String getCanonicalName()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.Class: java.lang.String getSimpleName()>/$r11}" -> "VarNode{<sun.util.locale.provider.HostLocaleProviderAdapter: java.util.spi.LocaleServiceProvider findInstalledProvider(java.lang.Class)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.Class: java.lang.String getSimpleName()>/$r11}" -> "VarNode{<sun.util.locale.provider.SPILocaleProviderAdapter$1: java.util.spi.LocaleServiceProvider run()>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.Package$1: java.lang.Package run()>/$r19}" -> "VarNode{<java.lang.Package: void <init>(java.lang.String,java.util.jar.Manifest,java.net.URL,java.lang.ClassLoader,java.lang.Package$1)>/r1}" [color=blue];
  "VarNode{<java.lang.Package$1: java.lang.Package run()>/$r19}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r42}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>[12@L1093] new java.util.regex.Matcher}.<java.util.regex.Matcher: java.lang.CharSequence text>}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r6}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>[12@L1093] new java.util.regex.Matcher}.<java.util.regex.Matcher: java.lang.CharSequence text>}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>[12@L1093] new java.util.regex.Matcher}.<java.util.regex.Matcher: java.lang.CharSequence text>}" -> "VarNode{<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>[12@L1093] new java.util.regex.Matcher}.<java.util.regex.Matcher: java.lang.CharSequence text>}" -> "VarNode{<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>[12@L1093] new java.util.regex.Matcher}.<java.util.regex.Matcher: java.lang.CharSequence text>}" -> "VarNode{<java.util.regex.Matcher: java.lang.CharSequence getSubSequence(int,int)>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>[12@L1093] new java.util.regex.Matcher}.<java.util.regex.Matcher: java.lang.CharSequence text>}" -> "VarNode{<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>/$r4}" [color=red,style=dashed];
  "VarNode{<java.text.AttributedString: void setAttributes(java.util.Map,int)>/$r11}" -> "VarNode{<java.util.Vector: boolean add(java.lang.Object)>/r2}" [color=blue];
  "VarNode{<java.security.NoSuchProviderException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r64}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r64}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" [color=green3,style=dashed];
  "VarNode{<java.util.zip.ZipCoder: byte[] getBytes(java.lang.String)>/$r14}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.AttributeEntry: java.lang.Object getValue()>/$r1}" -> "VarNode{<java.text.AttributedString: void setAttributes(java.util.Map,int)>/$r11}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[15@L1817] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[15@L1817] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[15@L1817] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[15@L1817] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253String(java.util.Map)>/$r2}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC2253DN(java.util.Map)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[7@L666] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[76@L706] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[22@L996] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[20@L672] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[68@L701] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[40@L682] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[48@L686] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkPropertyAccess(java.lang.String)>[0@L1294] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[36@L680] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[24@L674] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[32@L678] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[64@L698] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[16@L670] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<java.util.PropertyPermissionCollection: void add(java.security.Permission)>[31@L483] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[72@L704] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[60@L695] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[56@L692] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[28@L676] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[12@L668] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[52@L689] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[44@L684] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[80@L708] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [color=red];
  "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r3}" -> "InstanceFieldNode{NewObj{<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>[3@L794] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" [color=red];
  "VarNode{<sun.security.jca.ProviderConfig$3: java.lang.String run()>/$r1}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.lang.Integer: int parseInt(java.lang.String,int)>/$r12}" -> "VarNode{<java.lang.NumberFormatException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Currency: java.lang.String getSymbol(java.util.Locale)>/$r5}" -> "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObject(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,java.lang.String,java.lang.Object[])>/r3}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r52}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r14}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r39}" [color=green3,style=dashed];
  "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r29}" -> "VarNode{<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r110}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r72}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r73}" [color=green3,style=dashed];
  "VarNode{<java.net.URLClassLoader: boolean isSealed(java.lang.String,java.util.jar.Manifest)>/$r3}" -> "VarNode{<java.lang.String: java.lang.String concat(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.SerialNumber: java.lang.String toString()>/$r6}" -> "VarNode{<sun.security.x509.SerialNumber: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r13}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r2}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r6}" -> "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r7}" [];
  "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r12}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.util.AlgorithmDecomposer: java.lang.String hashName(java.lang.String)>/$r1}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r7}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r34}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r25}" -> "VarNode{<java.io.FilePermission: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>[18@L699] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String suffix>}" -> "VarNode{<sun.security.x509.X509AttributeName: java.lang.String getSuffix()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r24}" -> "VarNode{<java.io.ExpiringCache: void put(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r11}" -> "VarNode{<io.netty.util.internal.logging.Log4JLogger: void debug(java.lang.String,java.lang.Object)>/arg}" [color=blue];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r11}" -> "VarNode{<io.netty.util.internal.logging.JdkLogger: void debug(java.lang.String,java.lang.Object)>/arg}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r3}" -> "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeScript(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/$r15}" -> "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/r16}" [];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r13}" -> "VarNode{<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: java.util.Locale[] getAvailableLocales()>/$r4}" -> "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: java.util.Locale[] getAvailableLocales()>/r5}" [];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String,int)>/r2}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r13}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/r35}" [];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r13}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName0(java.lang.String,boolean)>/r0}" [color=blue];
  "VarNode{<java.util.MissingFormatArgumentException: java.lang.String getMessage()>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.MissingFormatArgumentException: java.lang.String getMessage()>/$r3}" -> "VarNode{<java.util.MissingFormatArgumentException: java.lang.String getMessage()>/$r1}" [color=green3,style=dashed];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/r30}" -> "VarNode{<java.io.FilePermission: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r36}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r28}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.net.InetAddress: void <clinit>()>[39@L981] new sun.security.action.GetPropertyAction}.<sun.security.action.GetPropertyAction: java.lang.String theProp>}" -> "VarNode{<sun.security.action.GetPropertyAction: java.lang.String run()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>/$r9}" -> "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: void config(java.lang.Class,java.lang.String)>/r3}" [color=blue];
  "VarNode{<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int,java.security.cert.CertPathValidatorException$Reason)>/r1}" -> "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>/r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>/r2}" -> "VarNode{<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r3}" -> "VarNode{<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>/r4}" [color=blue];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: java.lang.String getID()>/$r1}" -> "VarNode{<sun.util.locale.Extension: java.lang.String toString()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r16}" -> "VarNode{<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>/r2}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.CalendarProviderImpl: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>[0@L84] new java.util.Calendar$Builder}.<java.util.Calendar$Builder: java.lang.String type>}" -> "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r35}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.CalendarProviderImpl: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>[0@L84] new java.util.Calendar$Builder}.<java.util.Calendar$Builder: java.lang.String type>}" -> "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r17}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getVariant()>/$r1}" -> "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getVariant()>/$r1}" -> "VarNode{<java.util.Locale: java.lang.String getVariant()>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getVariant()>/$r1}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getVariant()>/$r1}" -> "VarNode{<java.util.Locale: java.lang.String toString()>/$r17}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getVariant()>/$r1}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r5}" -> "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.net.URI$Parser: int parseHierarchical(int,int)>/$r2}" -> "VarNode{<java.net.URI: java.lang.String access$1502(java.net.URI,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URLClassLoader: void definePackageInternal(java.lang.String,java.util.jar.Manifest,java.net.URL)>/r1}" -> "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/r1}" [color=blue];
  "VarNode{<java.net.URLClassLoader: void definePackageInternal(java.lang.String,java.util.jar.Manifest,java.net.URL)>/r1}" -> "VarNode{<java.net.URLClassLoader: java.lang.Package definePackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/r2}" [color=blue];
  "VarNode{<java.net.URLClassLoader: void definePackageInternal(java.lang.String,java.util.jar.Manifest,java.net.URL)>/r1}" -> "VarNode{<java.lang.ClassLoader: java.lang.Package definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>/r2}" [color=blue];
  "VarNode{<java.net.URLClassLoader: void definePackageInternal(java.lang.String,java.util.jar.Manifest,java.net.URL)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URLClassLoader: void definePackageInternal(java.lang.String,java.util.jar.Manifest,java.net.URL)>/r1}" -> "VarNode{<java.net.URLClassLoader: void definePackageInternal(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r9}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r15}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r15}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r24}" [color=green3,style=dashed];
  "VarNode{<java.net.URI: void appendEscape(java.lang.StringBuffer,byte)>/r0}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r41}" -> "VarNode{<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.text.normalizer.NormalizerBase$NFCMode: java.lang.String normalize(java.lang.String,int)>/r0}" -> "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String compose(java.lang.String,boolean,int)>/r0}" [color=blue];
  "VarNode{<java.security.Timestamp: java.lang.String toString()>/$r14}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Timestamp: java.lang.String toString()>/$r14}" -> "VarNode{<java.security.Timestamp: java.lang.String toString()>/$r0}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkRead(java.lang.String)>[0@L888] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String actions>}" -> "VarNode{<java.io.FilePermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r57}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/r4}" [color=blue];
  "VarNode{<sun.security.x509.AVAKeyword: java.lang.String getKeyword(sun.security.util.ObjectIdentifier,int,java.util.Map)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r14}" -> "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/r15}" [];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r8}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r9}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.ResourceLeakDetector: java.lang.String newRecord(int)>/$r3}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: void <init>(io.netty.util.ResourceLeakDetector,java.lang.Object)>/$r15}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.ResourceLeakDetector: java.lang.String newRecord(int)>/$r3}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: void record()>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r9}" -> "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r13}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r45}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r8}" -> "VarNode{<sun.security.jca.ProviderConfig: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r8}" -> "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r9}" [color=green3,style=dashed];
  "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r8}" -> "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r10}" [color=green3,style=dashed];
  "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r8}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r8}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r47}" -> "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r48}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.GregorianCalendar: void computeTime()>/$r18}" -> "VarNode{<java.util.GregorianCalendar: void computeTime()>/$r19}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r16}" -> "VarNode{<io.netty.util.ResourceLeakDetector: void reportLeak(io.netty.util.ResourceLeakDetector$Level)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r11}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/r19}" [color=green3,style=dashed];
  "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r70}" -> "VarNode{<java.security.AccessControlException: void <init>(java.lang.String,java.security.Permission)>/r1}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r26}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r26}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r25}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r11}" -> "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.net.URLClassLoader$1: void <init>(java.net.URLClassLoader,java.lang.String)>/r2}" -> "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.lang.Class findClass(java.lang.String)>[0@L362] new java.net.URLClassLoader$1}.<java.net.URLClassLoader$1: java.lang.String val$name>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.String)>/r4}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/r4}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.String)>/r4}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.String)>/r4}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.String)>/r4}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase()>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.String)>/r4}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.math.BigInteger: java.lang.String toString(int)>/$r2}" -> "VarNode{<java.math.BigInteger: java.lang.String toString()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.math.BigInteger: java.lang.String toString(int)>/$r2}" -> "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.IllegalStateException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r45}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r45}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r44}" [color=green3,style=dashed];
  "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r24}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.math.BigDecimal,java.util.Locale)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<sun.security.pkcs.PKCS9Attribute: void throwSingleValuedException()>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[21@L69] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" -> "VarNode{<io.netty.handler.codec.http.HttpMethod: java.lang.String name()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.io.File: void <init>(java.net.URI)>/$r7}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String fromURIPath(java.lang.String)>/r0}" [color=blue];
  "InstanceFieldNode{NewObj{<io.netty.channel.DefaultChannelPipeline: void <init>(io.netty.channel.AbstractChannel)>[7@L87] new io.netty.channel.DefaultChannelPipeline$TailContext}.<io.netty.channel.AbstractChannelHandlerContext: java.lang.String name>}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext: java.lang.String name()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r5}" -> "InstanceFieldNode{NewObj{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>[21@L454] new java.util.StringJoiner}.<java.util.StringJoiner: java.lang.StringBuilder value>}" [color=red];
  "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.AbstractAlgorithmConstraints$1: java.lang.String run()>/$r2}" -> "VarNode{<sun.security.util.AbstractAlgorithmConstraints$1: java.lang.Object run()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r4}" -> "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.lang.String: java.lang.CharSequence subSequence(int,int)>/%this}" -> "VarNode{<java.lang.String: java.lang.CharSequence subSequence(int,int)>/$r1}" [color=green3,style=dashed];
  "VarNode{<java.lang.String: java.lang.CharSequence subSequence(int,int)>/%this}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r3}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>[0@L1028] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String normalizedPattern>}" [color=red];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r3}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>[0@L1054] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String normalizedPattern>}" [color=red];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r10}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r9}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[23@L514] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean isDirectory()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[23@L514] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[23@L514] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[23@L514] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>[55@L1875] newarray java.lang.Object[%intconst4]}}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r39}" [color=red,style=dashed];
  "VarNode{<java.util.Currency: java.lang.String getSymbol(java.util.Locale)>/$r9}" -> "VarNode{<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>/$r26}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/r8}" -> "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/$r6}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/r8}" -> "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/$r4}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/r8}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r29}" -> "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/r37}" [];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuth(java.lang.String)>/$r4}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuth(java.lang.String)>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r7}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r61}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r61}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[32@L678] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/$r3}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/$r9}" -> "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/r13}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/$r38}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r18}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r52}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getJavaTimeNames(java.lang.String)>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String getRegion()>/$r1}" -> "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r8}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String getRegion()>/$r1}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.text.AttributedString$AttributeMap: java.util.Set entrySet()>/$r14}" -> "VarNode{<java.text.AttributedString$AttributeMap: java.util.Set entrySet()>/r19}" [];
  "InstanceFieldNode{MergedObj{<Merged java.lang.ClassNotFoundException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: java.lang.String removePrivateuseVariant(java.lang.String)>/$r4}" -> "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r33}" [color=blue,style=dashed];
  "VarNode{<io.netty.buffer.UnpooledDirectByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,int,int)>/$r12}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.net.URL findResource(java.lang.String)>[0@L574] new java.net.URLClassLoader$2}.<java.net.URLClassLoader$2: java.lang.String val$name>}" -> "VarNode{<java.net.URLClassLoader$2: java.net.URL run()>/$r3}" [color=red,style=dashed];
  "VarNode{<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>/$r13}" -> "VarNode{<java.lang.NoSuchMethodException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>[0@L892] new sun.security.action.GetPropertyAction}.<sun.security.action.GetPropertyAction: java.lang.String defaultVal>}" -> "VarNode{<sun.security.action.GetPropertyAction: java.lang.String run()>/$r3}" [color=red,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>/$r5}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/$r12}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r63}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.io.File)>/$r4}" -> "VarNode{<java.io.File: java.lang.String getAbsolutePath()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.io.File)>/$r4}" -> "VarNode{<java.io.File: java.lang.String getCanonicalPath()>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: byte[] getEncodedInfo()>/$r9}" -> "VarNode{<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r48}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/r38}" [];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r4}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuthority(java.net.URL)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/$r3}" -> "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/r21}" [];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/$r3}" -> "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: int precision(java.lang.String)>/r1}" -> "VarNode{<java.util.Formatter$FormatSpecifier: int precision(java.lang.String)>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: int precision(java.lang.String)>/r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet complement(int,int)>/$r5}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r44}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.security.NoSuchProviderException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r9}" -> "VarNode{<java.text.DecimalFormat: void append(java.lang.StringBuffer,java.lang.String,java.text.Format$FieldDelegate,java.text.FieldPosition[],java.text.Format$Field)>/r1}" [color=blue];
  "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r19}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>/$r6}" -> "VarNode{<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>/r7}" [];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add_unchecked(int)>/$r5}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/r16}" -> "VarNode{<java.lang.SecurityManager: java.lang.String[] getPackages(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.ArrayList: java.lang.Object remove(int)>/%native-arraycopy-temp338}" -> "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[1@L120] newarray java.lang.Object[%intconst0]}}" [color=red];
  "VarNode{<java.util.ArrayList: java.lang.Object remove(int)>/%native-arraycopy-temp338}" -> "ArrayIndexNode{NewObj{<sun.security.util.CurveDB: java.lang.String[] getNamesByOID(java.lang.String)>[5@L167] newarray java.lang.String[%intconst0]}}" [color=red];
  "VarNode{<java.util.ArrayList: java.lang.Object remove(int)>/%native-arraycopy-temp338}" -> "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[103@L2377] newarray java.lang.String[i26]}}" [color=red];
  "VarNode{<java.util.ArrayList: java.lang.Object remove(int)>/%native-arraycopy-temp338}" -> "ArrayIndexNode{NewObj{<java.util.ArrayList: void <init>(int)>[3@L153] newarray java.lang.Object[i0]}}" [color=red];
  "VarNode{<java.util.ArrayList: java.lang.Object remove(int)>/%native-arraycopy-temp338}" -> "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" [color=red];
  "VarNode{<java.util.ArrayList: java.lang.Object remove(int)>/%native-arraycopy-temp338}" -> "ArrayIndexNode{NewObj{<java.util.LinkedList: java.lang.Object[] toArray()>[1@L1050] newarray java.lang.Object[$i0]}}" [color=red];
  "VarNode{<java.util.ArrayList: java.lang.Object remove(int)>/%native-arraycopy-temp338}" -> "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[82@L2364] newarray java.lang.String[%intconst0]}}" [color=red];
  "VarNode{<java.util.ArrayList: java.lang.Object remove(int)>/%native-arraycopy-temp338}" -> "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[40@L1229] newarray java.lang.String[%intconst1]}}" [color=red];
  "VarNode{<java.util.ArrayList: java.lang.Object remove(int)>/%native-arraycopy-temp338}" -> "ArrayIndexNode{NewObj{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>[2@L3210] newarray java.lang.Object[i0]}}" [color=red];
  "VarNode{<io.netty.channel.DefaultChannelHandlerContext: void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.util.concurrent.EventExecutor,java.lang.String,io.netty.channel.ChannelHandler)>/name}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.util.concurrent.EventExecutor,java.lang.String,boolean,boolean)>/name}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$Loader: sun.misc.Resource getResource(java.lang.String,boolean)>[0@L738] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$Loader: sun.misc.Resource getResource(java.lang.String,boolean)>[0@L738] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "VarNode{<io.netty.handler.codec.http.DefaultFullHttpResponse: java.lang.String toString()>/$r3}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r30}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r30}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r32}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendInitialLine(java.lang.StringBuilder,io.netty.handler.codec.http.HttpRequest)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendInitialLine(java.lang.StringBuilder,io.netty.handler.codec.http.HttpRequest)>/$r3}" -> "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendInitialLine(java.lang.StringBuilder,io.netty.handler.codec.http.HttpRequest)>/r0}" [color=green3,style=dashed];
  "VarNode{<java.security.AccessController: void checkPermission(java.security.Permission)>/$r6}" -> "VarNode{<java.security.AccessController: void checkPermission(java.security.Permission)>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.util.Collections$1: java.lang.Object next()>/$r2}" -> "VarNode{<sun.util.locale.provider.LocaleProviderAdapter: java.util.Locale[] toLocaleArray(java.util.Set)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.util.Collections$1: java.lang.Object next()>/$r2}" -> "VarNode{<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r9}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/r27}" [color=green3,style=dashed];
  "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r25}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r5}" -> "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r7}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r5}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r19}" -> "VarNode{<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>/r3}" [color=blue];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC1779String(java.util.Map)>/$r2}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeyword(int,java.util.Map)>/$r3}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeyword(int,java.util.Map)>/$r3}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253String(java.util.Map)>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeyword(int,java.util.Map)>/$r3}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toString()>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeyword(int,java.util.Map)>/$r3}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toRFC1779String(java.util.Map)>/$r2}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>[21@L272] new java.net.URL}.<java.net.URL: java.lang.String path>}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r16}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>[21@L272] new java.net.URL}.<java.net.URL: java.lang.String path>}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r15}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r16}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r15}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>[26@L409] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" -> "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getParentFile()>[9@L506] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getParent()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getParentFile()>[9@L506] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getParent()>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getParentFile()>[9@L506] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getParentFile()>[9@L506] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getParentFile()>[9@L506] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean isDirectory()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getParentFile()>[9@L506] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean mkdir()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getParentFile()>[9@L506] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getParentFile()>[9@L506] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getParentFile()>[9@L506] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r8}" [color=red,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>/$r6}" -> "VarNode{<java.text.Format: java.lang.String format(java.lang.Object)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeScript(java.lang.String)>/r0}" -> "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toTitleString(java.lang.String)>/r0}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <init>(java.lang.String,boolean)>/$r1}" -> "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[33@L87] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" [color=red];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <init>(java.lang.String,boolean)>/$r1}" -> "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[21@L69] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" [color=red];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <init>(java.lang.String,boolean)>/$r1}" -> "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[13@L58] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" [color=red];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <init>(java.lang.String,boolean)>/$r1}" -> "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[25@L75] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" [color=red];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <init>(java.lang.String,boolean)>/$r1}" -> "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[17@L63] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" [color=red];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <init>(java.lang.String,boolean)>/$r1}" -> "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[9@L51] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" [color=red];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <init>(java.lang.String,boolean)>/$r1}" -> "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[5@L45] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" [color=red];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <init>(java.lang.String,boolean)>/$r1}" -> "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[29@L81] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" [color=red];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <init>(java.lang.String,boolean)>/$r1}" -> "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[0@L37] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" [color=red];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r5}" -> "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r4}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r29}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: void parse(sun.security.util.DerValue)>/$r37}" -> "VarNode{<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>/r5}" -> "VarNode{<java.lang.ref.SoftReference: void <init>(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r23}" -> "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r24}" [];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r1}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>/%this}" -> "VarNode{<java.io.FileDescriptor: void attach(java.io.Closeable)>/r3}" [color=blue];
  "InstanceFieldNode{NewObj{<java.io.ExpiringCache: void put(java.lang.String,java.lang.String)>[14@L94] new java.io.ExpiringCache$Entry}.<java.io.ExpiringCache$Entry: java.lang.String val>}" -> "VarNode{<java.io.ExpiringCache$Entry: java.lang.String val()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r15}" -> "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>[1@L1569] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String language>}" [color=red];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[10@L992] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[10@L992] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[10@L992] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<java.util.SimpleTimeZone: void decodeStartRule()>/$r15}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r16}" -> "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r15}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r8}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r7}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r14}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r13}" [color=green3,style=dashed];
  "VarNode{<sun.misc.MessageUtils: void err(java.lang.String)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.MessageUtils: void err(java.lang.String)>/r1}" -> "VarNode{<sun.misc.MessageUtils: void err(java.lang.String)>/$r0}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r7}" -> "VarNode{<java.net.URL: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r8}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r9}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r11}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r12}" [color=green3,style=dashed];
  "VarNode{<sun.security.jca.ProviderConfig: void <init>(java.lang.String,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: void <init>()>[43@L183] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String className>}" [color=red];
  "VarNode{<sun.security.jca.ProviderConfig: void <init>(java.lang.String,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: void <init>()>[34@L179] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String className>}" [color=red];
  "VarNode{<sun.security.jca.ProviderConfig: void <init>(java.lang.String,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: sun.security.jca.ProviderList getJarList(java.lang.String[])>[6@L206] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String className>}" [color=red];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[140@L868] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[140@L868] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r3}" [color=red,style=dashed];
  "VarNode{<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URI: java.lang.String decode(java.lang.String)>/$r9}" -> "VarNode{<java.net.URI: java.lang.String getPath()>/$r4}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: java.lang.String typeName(java.lang.Class)>/$r7}" -> "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class,java.lang.ClassLoader)>/$r1}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: java.lang.String typeName(java.lang.Class)>/$r7}" -> "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: java.lang.String typeName(java.lang.Class)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control$1: java.io.InputStream run()>/$r1}" -> "VarNode{<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control$1: java.io.InputStream run()>/$r1}" -> "VarNode{<java.util.ResourceBundle$RBClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/$r3}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/$r3}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r22}" -> "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty unicodeBlockPropertyFor(java.lang.String)>/$r9}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.PatternSyntaxException error(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.AttributedString: void addAttributeRunData(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>/r7}" -> "VarNode{<java.util.Vector: void addElement(java.lang.Object)>/r2}" [color=blue];
  "VarNode{<java.text.AttributedString: void addAttributeRunData(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>/r7}" -> "VarNode{<java.util.Vector: java.lang.Object set(int,java.lang.Object)>/r2}" [color=blue];
  "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>[19@L81] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean isDirectory()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>[19@L81] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>[19@L81] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>[19@L81] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>[19@L81] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r44}" -> "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r45}" [color=green3,style=dashed];
  "VarNode{<sun.security.pkcs.PKCS9Attribute: void throwSingleValuedException()>/$r10}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>/r0}" -> "VarNode{<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>[100@L149] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String dn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String toString()>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/$r5}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/r13}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/$r5}" -> "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/$r22}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r4}" -> "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeRegion(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r38}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String)>/r0}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[123@L857] new java.security.UnresolvedPermission}.<java.security.UnresolvedPermission: java.lang.String name>}" -> "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r6}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[123@L857] new java.security.UnresolvedPermission}.<java.security.UnresolvedPermission: java.lang.String name>}" -> "VarNode{<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>/$r36}" [color=red,style=dashed];
  "VarNode{<io.netty.util.internal.logging.Log4JLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" [color=blue];
  "VarNode{<java.util.AbstractList: void rangeCheckForAdd(int)>/$r2}" -> "VarNode{<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.MimeType: java.lang.String parseSuffix(java.lang.String)>/r9}" -> "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.util.List getCandidateLocales(java.lang.String,java.util.Locale)>/r4}" -> "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Set getLanguageTagSet(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r46}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r2}" -> "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r3}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r2}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase()>/%this}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/r1}" -> "VarNode{<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/r1}" -> "VarNode{<java.net.URLClassLoader: boolean isSealed(java.lang.String,java.util.jar.Manifest)>/r2}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/r1}" -> "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r13}" [color=green3,style=dashed];
  "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/r1}" -> "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.net.InetAddress: java.lang.String getHostFromNameService(java.net.InetAddress,boolean)>/r12}" -> "VarNode{<java.net.InetAddress: java.lang.String getHostName(boolean)>/$r6}" [color=blue,style=dashed];
  "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r2}" -> "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r1}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>[2@L879] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean isDirectory()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>[2@L879] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean mkdir()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>[2@L879] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>[2@L879] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>[2@L879] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>[2@L879] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.text.SimpleDateFormat: void zeroPaddingNumber(int,int,int,java.lang.StringBuffer)>/r3}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>/r2}" [color=blue];
  "VarNode{<java.text.SimpleDateFormat: void zeroPaddingNumber(int,int,int,java.lang.StringBuffer)>/r3}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<java.text.SimpleDateFormat: void zeroPaddingNumber(int,int,int,java.lang.StringBuffer)>/r3}" -> "VarNode{<java.text.SimpleDateFormat: void zeroPaddingNumber(int,int,int,java.lang.StringBuffer)>/r3}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/$r20}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.math.BigInteger: void <init>(java.lang.String,int)>/r1}" -> "VarNode{<java.math.BigInteger: void <init>(java.lang.String,int)>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.math.BigInteger: void <init>(java.lang.String,int)>/r1}" -> "VarNode{<java.math.BigInteger: void <init>(java.lang.String,int)>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.math.BigInteger: void <init>(java.lang.String,int)>/r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r7}" -> "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r8}" [];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuthority(java.net.URL)>/$r2}" -> "VarNode{<java.net.URL: java.net.URI toURI()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.math.BigInteger: void implMulAddCheck(int[],int[],int,int,int)>/$r15}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI$Parser: int parseIPv4Address(int,int)>/$r2}" -> "VarNode{<java.net.URI: java.lang.String access$2402(java.net.URI,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r43}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Matcher: int start(int)>/$r5}" -> "VarNode{<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.SimpleTimeZone: void decodeEndRule()>/$r10}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>/$r30}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r9}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r0}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>[21@L454] new java.util.StringJoiner}.<java.util.StringJoiner: java.lang.String prefix>}" -> "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>[21@L454] new java.util.StringJoiner}.<java.util.StringJoiner: java.lang.String prefix>}" -> "VarNode{<java.util.StringJoiner: java.lang.StringBuilder prepareBuilder()>/$r3}" [color=red,style=dashed];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>/$r8}" -> "VarNode{<java.util.ServiceConfigurationError: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.ResourceBundle: java.util.ResourceBundle getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>[5@L1333] new java.util.ResourceBundle$CacheKey}.<java.util.ResourceBundle$CacheKey: java.lang.String name>}" -> "VarNode{<java.util.ResourceBundle$CacheKey: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r21}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r21}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r21}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r21}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>/$r6}" -> "VarNode{<java.lang.NumberFormatException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>/$r11}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.String toPattern(boolean)>/$r3}" -> "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/r0}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String positiveSuffix>}" -> "VarNode{<java.text.DecimalFormat: java.lang.String toPattern(boolean)>/$r6}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String positiveSuffix>}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/$r11}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String positiveSuffix>}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r16}" [color=red,style=dashed];
  "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r19}" -> "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r20}" [color=green3,style=dashed];
  "VarNode{<java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>/%native-arraycopy-temp362}" -> "ArrayIndexNode{NewObj{<sun.misc.JarIndex: void read(java.io.InputStream)>[29@L327] newarray java.lang.String[$i0]}}" [color=red];
  "VarNode{<java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>/$r5}" -> "VarNode{<java.text.DateFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>/$r5}" -> "VarNode{<java.text.DateFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>/$r7}" [color=blue,style=dashed];
  "VarNode{<sun.util.resources.LocaleData$2: sun.util.resources.OpenListResourceBundle run()>/$r1}" -> "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.util.ResourceBundle$Control)>/r0}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[28@L517] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[28@L517] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[28@L517] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: java.lang.String getProtocol()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[28@L517] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" [color=red,style=dashed];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r12}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r13}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r13}" -> "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r12}" [color=green3,style=dashed];
  "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/$r2}" -> "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/r18}" [];
  "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/$r2}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/$r2}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" -> "VarNode{<java.io.File: java.net.URI toURI()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" -> "VarNode{<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.io.File)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" -> "VarNode{<java.io.File: java.lang.String toString()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.io.File)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" -> "VarNode{<java.io.FileInputStream: void <init>(java.io.File)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" -> "VarNode{<java.util.zip.ZipFile: void <init>(java.io.File,int,java.nio.charset.Charset)>/$r9}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/r1}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r82}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/r1}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r61}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/r1}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r47}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,char[],java.util.Formatter$Flags,int,java.util.Locale)>/r11}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r40}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,char[],java.util.Formatter$Flags,int,java.util.Locale)>/r11}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r46}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,char[],java.util.Formatter$Flags,int,java.util.Locale)>/r11}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r31}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,char[],java.util.Formatter$Flags,int,java.util.Locale)>/r11}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,char[],java.util.Formatter$Flags,int,java.util.Locale)>/r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.net.URISyntaxException: java.lang.String getMessage()>/$r2}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URISyntaxException: java.lang.String getMessage()>/$r2}" -> "VarNode{<java.net.URISyntaxException: java.lang.String getMessage()>/$r5}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.OIDMap$OIDInfo: java.lang.Class getClazz()>/$r7}" -> "VarNode{<sun.security.x509.OIDMap$OIDInfo: java.lang.Class getClazz()>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r12}" -> "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r13}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.pkcs.PKCS9Attribute: void <init>(sun.security.util.DerValue)>/$r53}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r7}" -> "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/r5}" [];
  "InstanceFieldNode{NewObj{<io.netty.channel.embedded.EmbeddedEventLoop: io.netty.channel.ChannelFuture register(io.netty.channel.Channel)>[0@L115] new io.netty.channel.DefaultChannelPromise}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/r7}" [color=red,style=dashed];
  "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/$r10}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/$r10}" -> "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/r2}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/r8}" -> "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,boolean)>/r0}" [color=blue];
  "VarNode{<java.security.UnresolvedPermissionCollection: void add(java.security.Permission)>/$r12}" -> "VarNode{<java.security.UnresolvedPermissionCollection: void add(java.security.Permission)>/$r13}" [color=green3,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: java.lang.String stripLeadingZeros(java.lang.String)>/r0}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r29}" [color=blue,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: java.lang.String stripLeadingZeros(java.lang.String)>/r0}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: java.lang.String stripLeadingZeros(java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<sun.misc.FloatingDecimal: java.lang.String stripLeadingZeros(java.lang.String)>/r0}" -> "VarNode{<sun.misc.FloatingDecimal: java.lang.String stripLeadingZeros(java.lang.String)>/$r1}" [color=green3,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: java.lang.String stripLeadingZeros(java.lang.String)>/r0}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.util.ArrayList: void subListRangeCheck(int,int,int)>/$r17}" -> "VarNode{<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/$r11}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r74}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[23@L764] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[23@L764] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[23@L764] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: java.lang.String getProtocol()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] checkLookupTable(java.lang.String)>/r1}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getCachedAddresses(java.lang.String)>/r7}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] checkLookupTable(java.lang.String)>/r1}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.UniqueIdentity: java.lang.String toString()>/$r7}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r112}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.UniqueIdentity: java.lang.String toString()>/$r7}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r105}" [color=blue,style=dashed];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/r1}" -> "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,boolean)>/r1}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/r1}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "ArrayIndexNode{NewObj{<io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask: void execute()>[17@L1382] newarray java.lang.Object[%intconst1]}}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r14}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask: void execute()>[17@L1382] newarray java.lang.Object[%intconst1]}}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r11}" [color=red,style=dashed];
  "VarNode{<sun.security.util.AlgorithmDecomposer: java.util.Set decompose(java.lang.String)>/r0}" -> "VarNode{<sun.security.util.AlgorithmDecomposer: java.util.Set decomposeImpl(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r20}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String)>/r1}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r46}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/r38}" [];
  "VarNode{<java.security.CodeSigner: java.lang.String toString()>/$r8}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.CodeSigner: java.lang.String toString()>/$r8}" -> "VarNode{<java.security.CodeSigner: java.lang.String toString()>/$r0}" [color=green3,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: int getHexDigit(java.lang.String,int)>/$c3}" -> "VarNode{<sun.misc.FloatingDecimal: int getHexDigit(java.lang.String,int)>/$r3}" [color=green3,style=dashed];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "ArrayIndexNode{NewObj{<java.util.ArrayDeque: void doubleCapacity()>[20@L162] newarray java.lang.Object[$i5]}}" -> "VarNode{<java.util.ArrayDeque: void doubleCapacity()>/%native-arraycopy-temp167}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayDeque: void doubleCapacity()>[20@L162] newarray java.lang.Object[$i5]}}" -> "VarNode{<java.util.ArrayDeque: void doubleCapacity()>/%native-arraycopy-temp170}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayDeque: void doubleCapacity()>[20@L162] newarray java.lang.Object[$i5]}}" -> "VarNode{<java.util.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])>/%native-arraycopy-temp473}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayDeque: void doubleCapacity()>[20@L162] newarray java.lang.Object[$i5]}}" -> "VarNode{<java.util.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])>/%native-arraycopy-temp476}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayDeque: void doubleCapacity()>[20@L162] newarray java.lang.Object[$i5]}}" -> "VarNode{<java.util.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])>/%native-arraycopy-temp479}" [color=red,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r20}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r27}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>/$r22}" -> "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>/$r23}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r11}" -> "VarNode{<java.util.ArrayList: boolean add(java.lang.Object)>/r2}" [color=blue];
  "VarNode{<sun.security.rsa.RSAUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.security.AlgorithmParameters)>/$r10}" -> "VarNode{<java.security.ProviderException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.channel.ChannelOutboundBuffer$Entry: int cancel()>/$r1}" -> "VarNode{<io.netty.util.ReferenceCountUtil: void safeRelease(java.lang.Object)>/r0}" [color=blue];
  "VarNode{<java.security.Security: void initialize()>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/$r9}" -> "VarNode{<java.net.UnknownHostException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r3}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r20}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r3}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r16}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r3}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r14}" [color=green3,style=dashed];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r22}" -> "VarNode{<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r26}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r5}" -> "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r4}" [color=green3,style=dashed];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r38}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r3}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/r26}" [];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r13}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r12}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r10}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.cert.Certificate[] getCertificates(java.security.KeyStore,java.lang.String,sun.security.provider.PolicyFile$PolicyInfo)>/r1}" [color=blue];
  "VarNode{<java.util.LinkedHashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" -> "VarNode{<java.util.LinkedHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" [color=blue];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r31}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r31}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" [color=green3,style=dashed];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r25}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r25}" -> "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r38}" [color=green3,style=dashed];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r25}" -> "VarNode{<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>/r3}" -> "VarNode{<java.lang.ref.SoftReference: void <init>(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.util.Currency: java.lang.String getCurrencyCode()>/$r1}" -> "VarNode{<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>/$r23}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarFieldValueNamesMapGetter: java.util.Map getObject(java.util.spi.CalendarNameProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r8}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.util.Map getDisplayNames(java.lang.String,int,int,java.util.Locale)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarFieldValueNamesMapGetter: java.util.Map getObject(java.util.spi.CalendarNameProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r8}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.util.Map getJavaTimeDisplayNames(java.lang.String,int,int,java.util.Locale)>/r1}" [color=blue];
  "VarNode{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>/r5}" -> "VarNode{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>/$r15}" [color=green3,style=dashed];
  "VarNode{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>/r5}" -> "VarNode{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>/$r11}" [color=green3,style=dashed];
  "VarNode{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>/r5}" -> "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[18@L196] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" -> "VarNode{<sun.util.locale.StringTokenIterator: sun.util.locale.StringTokenIterator setStart(int)>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[18@L196] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" -> "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String next()>/$r2}" [color=red,style=dashed];
  "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r25}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r2}" [color=blue];
  "VarNode{<java.util.jar.JarFile: byte[] getBytes(java.util.zip.ZipEntry)>/$r10}" -> "VarNode{<java.io.EOFException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.DefaultFileRegion: void <init>(java.nio.channels.FileChannel,long,long)>/$r6}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: void <init>(io.netty.util.ResourceLeakDetector,java.lang.Object)>/$r15}" -> "InstanceFieldNode{NewObj{<io.netty.util.ResourceLeakDetector: io.netty.util.ResourceLeak open(java.lang.Object)>[20@L211] new io.netty.util.ResourceLeakDetector$DefaultResourceLeak}.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String creationRecord>}" [color=red];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: void <init>(io.netty.util.ResourceLeakDetector,java.lang.Object)>/$r15}" -> "InstanceFieldNode{NewObj{<io.netty.util.ResourceLeakDetector: io.netty.util.ResourceLeak open(java.lang.Object)>[25@L217] new io.netty.util.ResourceLeakDetector$DefaultResourceLeak}.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String creationRecord>}" [color=red];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: void <init>(io.netty.util.ResourceLeakDetector,java.lang.Object)>/$r15}" -> "InstanceFieldNode{NewObj{<io.netty.util.ResourceLeakDetector: void <init>(java.lang.String,int,long)>[1@L147] new io.netty.util.ResourceLeakDetector$DefaultResourceLeak}.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String creationRecord>}" [color=red];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: void <init>(io.netty.util.ResourceLeakDetector,java.lang.Object)>/$r15}" -> "InstanceFieldNode{NewObj{<io.netty.util.ResourceLeakDetector: void <init>(java.lang.String,int,long)>[4@L148] new io.netty.util.ResourceLeakDetector$DefaultResourceLeak}.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String creationRecord>}" [color=red];
  "VarNode{<sun.security.util.DerInputStream: int getLength(int,java.io.InputStream)>/$r7}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r59}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r59}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r58}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.zip.ZipFile: void <init>(java.io.File,int,java.nio.charset.Charset)>[28@L216] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: long lastModified()>/$r3}" [color=red,style=dashed];
  "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/$r10}" -> "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/$r11}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderName(java.lang.CharSequence)>/$r4}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderName(java.lang.CharSequence)>/$r5}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseLanguage(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" -> "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[21@L199] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String language>}" [color=red];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[25@L451] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String mode>}" -> "VarNode{<javax.crypto.Cipher$Transform: int supportsMode(java.security.Provider$Service)>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r65}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r65}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r64}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/r13}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/$r11}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/r13}" -> "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/r13}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/$r14}" [];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/r13}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/r13}" -> "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/$r20}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/r13}" -> "VarNode{<sun.security.x509.X509Key: java.security.PublicKey buildX509Key(sun.security.x509.AlgorithmId,sun.security.util.BitArray)>/$r5}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/r13}" -> "VarNode{<sun.security.pkcs.SignerInfo: java.util.Set verifyAlgorithms(sun.security.pkcs.SignerInfo[],sun.security.util.JarConstraintsParameters,java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/r13}" -> "VarNode{<sun.security.x509.X509Key: java.security.PublicKey buildX509Key(sun.security.x509.AlgorithmId,sun.security.util.BitArray)>/$r25}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/r13}" -> "VarNode{<sun.security.x509.AlgorithmId: void decodeParams()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/r13}" -> "VarNode{<sun.security.pkcs.SignerInfo: java.util.Set verifyAlgorithms(sun.security.pkcs.SignerInfo[],sun.security.util.JarConstraintsParameters,java.lang.String)>/$r14}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/r13}" -> "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/$r4}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r7}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>/r2}" [color=blue];
  "VarNode{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>/%native-arraycopy-temp47}" -> "ArrayIndexNode{NewObj{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>[2@L3210] newarray java.lang.Object[i0]}}" [color=red];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r28}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r28}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r36}" [color=green3,style=dashed];
  "VarNode{<java.text.AttributedString$AttributeMap: java.util.Set entrySet()>/$r17}" -> "VarNode{<java.text.AttributedString$AttributeMap: java.util.Set entrySet()>/r19}" [];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(long,java.util.Locale)>/$r40}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/r18}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/r3}" [color=blue];
  "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/r18}" -> "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/r18}" [color=green3,style=dashed];
  "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/r18}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r67}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r6}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/r1}" [color=blue];
  "VarNode{<sun.security.jca.Providers: sun.security.jca.ProviderList beginThreadProviderList(sun.security.jca.ProviderList)>/$r9}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector: void reportLeak(io.netty.util.ResourceLeakDetector$Level)>/$r4}" -> "VarNode{<io.netty.util.internal.logging.Log4JLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector: void reportLeak(io.netty.util.ResourceLeakDetector$Level)>/$r4}" -> "VarNode{<io.netty.util.internal.logging.JdkLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" [color=blue];
  "VarNode{<java.nio.charset.CoderResult: java.lang.String toString()>/$r8}" -> "VarNode{<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.CoderResult: java.lang.String toString()>/$r8}" -> "VarNode{<java.util.zip.ZipCoder: java.lang.String toString(byte[],int)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.CoderResult: java.lang.String toString()>/$r8}" -> "VarNode{<java.util.zip.ZipCoder: java.lang.String toString(byte[],int)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.CoderResult: java.lang.String toString()>/$r8}" -> "VarNode{<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.CoderResult: java.lang.String toString()>/$r8}" -> "VarNode{<java.util.zip.ZipCoder: byte[] getBytes(java.lang.String)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.CoderResult: java.lang.String toString()>/$r8}" -> "VarNode{<java.util.zip.ZipCoder: byte[] getBytes(java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.util.List getCandidateLocales(java.lang.String,java.util.Locale)>/$r15}" -> "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.util.List getCandidateLocales(java.lang.String,java.util.Locale)>/r4}" [];
  "VarNode{<java.lang.Long: long parseLong(java.lang.String,int)>/r0}" -> "VarNode{<java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>/r3}" [color=blue];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String current()>/$r1}" -> "VarNode{<sun.util.locale.LanguageTag: boolean parsePrivateuse(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String current()>/$r1}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/$r18}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String current()>/$r1}" -> "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r14}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String current()>/$r1}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/$r26}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String current()>/$r1}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r34}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String current()>/$r1}" -> "VarNode{<sun.util.locale.LanguageTag: boolean parsePrivateuse(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r6}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String current()>/$r1}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String current()>/$r1}" -> "VarNode{<sun.util.locale.LanguageTag: boolean parseRegion(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String current()>/$r1}" -> "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String current()>/$r1}" -> "VarNode{<sun.util.locale.LanguageTag: boolean parseScript(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String current()>/$r1}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>/$r6}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String current()>/$r1}" -> "VarNode{<sun.util.locale.LanguageTag: boolean parseLanguage(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String current()>/$r1}" -> "VarNode{<sun.util.locale.LanguageTag: boolean parseExtlangs(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String current()>/$r1}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r35}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String current()>/$r1}" -> "VarNode{<sun.util.locale.LanguageTag: boolean parseVariants(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.net.URLClassLoader$2: void <init>(java.net.URLClassLoader,java.lang.String)>/r2}" -> "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.net.URL findResource(java.lang.String)>[0@L574] new java.net.URLClassLoader$2}.<java.net.URLClassLoader$2: java.lang.String val$name>}" [color=red];
  "InstanceFieldNode{MergedObj{<Merged java.io.UTFDataFormatException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27853}" [];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27855}" [];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.net.URI: java.net.URI create(java.lang.String)>[0@L850] new java.net.URI}.<java.net.URI: java.lang.String decodedPath>}" -> "VarNode{<java.net.URI: java.lang.String getPath()>/$r5}" [color=red,style=dashed];
  "VarNode{<java.util.PropertyPermission: void <init>(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.security.BasicPermission: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r56}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r56}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/$r11}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/$r11}" -> "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/r2}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.OIDMap$OIDInfo: java.lang.Class getClazz()>/$r8}" -> "VarNode{<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.util.HashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1774] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.HashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L271] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.HashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1789] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.HashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L256] new java.util.LinkedHashMap$Entry}.<java.util.HashMap$Node: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.HashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[1@L278] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.HashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[1@L264] new java.util.LinkedHashMap$Entry}.<java.util.HashMap$Node: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.HashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1784] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.HashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1779] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object key>}" [color=red];
  "VarNode{<io.netty.buffer.AbstractByteBuf: java.lang.String toString()>/$r11}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<io.netty.buffer.AbstractByteBuf: java.lang.String toString()>/$r11}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<io.netty.buffer.AbstractByteBuf: java.lang.String toString()>/$r11}" -> "VarNode{<io.netty.buffer.WrappedByteBuf: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.util.logging.Logger: void setupResourceInfo(java.lang.String,java.lang.Class)>/$r22}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseString(java.io.Reader,int,int,java.lang.StringBuilder)>/$r30}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r36}" -> "VarNode{<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String,int)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r9}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r10}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509Key: byte[] getEncodedInternal()>/$r8}" -> "VarNode{<sun.security.x509.X509Key: byte[] getEncodedInternal()>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.util.IllegalFormatConversionException: java.lang.String getMessage()>/$r5}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.util.IllegalFormatConversionException: java.lang.String getMessage()>/$r5}" -> "VarNode{<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty getInstance()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.IllegalFormatConversionException: java.lang.String getMessage()>/$r5}" -> "VarNode{<sun.text.normalizer.UCharacter: void <clinit>()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.util.IllegalFormatConversionException: java.lang.String getMessage()>/$r5}" -> "VarNode{<sun.text.normalizer.NormalizerImpl: void <clinit>()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.util.IllegalFormatConversionException: java.lang.String getMessage()>/$r5}" -> "VarNode{<java.lang.Throwable: java.lang.String getLocalizedMessage()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/$r6}" -> "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/$r6}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r7}" -> "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r8}" [color=green3,style=dashed];
  "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r7}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "VarNode{<java.lang.StringBuffer: java.lang.AbstractStringBuilder append(java.lang.AbstractStringBuilder)>/r1}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.AbstractStringBuilder)>/r1}" [color=blue];
  "VarNode{<sun.reflect.Reflection: boolean isSameClassPackage(java.lang.ClassLoader,java.lang.String,java.lang.ClassLoader,java.lang.String)>/$r8}" -> "VarNode{<java.lang.InternalError: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r1}" -> "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r2}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r1}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String expand(java.lang.String)>/$r3}" -> "VarNode{<sun.security.jca.ProviderConfig: void <init>(java.lang.String,java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>/r4}" -> "VarNode{<java.net.URI: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>/r7}" [color=blue];
  "InstanceFieldNode{NewObj{<java.net.URI: java.net.URI create(java.lang.String)>[0@L850] new java.net.URI}.<java.net.URI: java.lang.String path>}" -> "VarNode{<java.net.URI: java.lang.String getPath()>/$r3}" [color=red,style=dashed];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r63}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r63}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r62}" [color=green3,style=dashed];
  "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger getLogger(java.lang.String)>/r0}" -> "VarNode{<sun.util.logging.PlatformLogger: void <init>(java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger getLogger(java.lang.String)>/r0}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.SPILocaleProviderAdapter$1: java.util.spi.LocaleServiceProvider run()>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.AbstractAlgorithmConstraints$1: java.lang.Object run()>/$r1}" -> "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String describeChar(char)>/$r9}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkUserInfo(java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String describeChar(char)>/$r9}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String describeChar(char)>/$r9}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String describeChar(char)>/$r9}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuth(java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String describeChar(char)>/$r9}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkExternalForm(java.net.URL)>/$r6}" [color=blue,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String describeChar(char)>/$r9}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHostString(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r3}" -> "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r39}" -> "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[0@L417] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String script>}" [color=red];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r9}" -> "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r8}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r1}" -> "VarNode{<io.netty.util.internal.logging.Log4JLogger: void debug(java.lang.String,java.lang.Object)>/arg}" [color=blue];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r1}" -> "VarNode{<io.netty.util.internal.logging.JdkLogger: void debug(java.lang.String,java.lang.Object)>/arg}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r47}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r4}" -> "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r3}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r4}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r1}" -> "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r3}" [color=blue];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r18}" -> "VarNode{<java.security.KeyStoreException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.String toString()>/$r6}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.Class: java.lang.String toString()>/$r6}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.lang.Class: java.lang.String toString()>/$r6}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.Class: java.lang.String toString()>/$r6}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.Class: java.lang.String toString()>/$r6}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.AbstractStringBuilder)>/$r2}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.StringBuffer>}.<java.lang.AbstractStringBuilder: char[] value>}" [color=red];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.AbstractStringBuilder)>/$r2}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.StringBuilder>}.<java.lang.AbstractStringBuilder: char[] value>}" [color=red];
  "VarNode{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" -> "VarNode{<java.util.HashMap$TreeNode: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void defineString()>/$r10}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void defineString()>/$r10}" -> "VarNode{<java.net.URI: void defineString()>/$r22}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r18}" -> "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/r24}" [];
  "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r6}" -> "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toString()>/$r3}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toString()>/$r10}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toString()>/$r3}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r3}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r4}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L271] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.LinkedHashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L271] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap$Node: java.lang.Object getKey()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L271] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.LinkedHashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L271] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L271] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap$KeyIterator: java.lang.Object next()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L271] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r4}" [color=red,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r24}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r25}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.OtherName: java.lang.String toString()>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.OtherName: java.lang.String toString()>/$r3}" -> "VarNode{<sun.security.x509.OtherName: java.lang.String toString()>/$r1}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r9}" -> "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpVersion: void <clinit>()>[13@L45] new io.netty.handler.codec.http.HttpVersion}.<io.netty.handler.codec.http.HttpVersion: java.lang.String text>}" [color=red];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>[0@L1032] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String signedBy>}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r42}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>[0@L1032] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String signedBy>}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r10}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>[0@L1032] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String signedBy>}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r16}" [color=red,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r27}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r28}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/r3}" -> "VarNode{<java.net.URL: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/r3}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(double,java.util.Locale)>/$r12}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/r4}" [color=blue];
  "VarNode{<java.util.Formatter: java.util.Formatter$FormatString[] parse(java.lang.String)>/$r9}" -> "VarNode{<java.util.Formatter$FixedString: void <init>(java.util.Formatter,java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.security.util.DerValue: java.lang.String getIA5String()>/$r7}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.text.normalizer.Utility: java.lang.StringBuffer appendNumber(java.lang.StringBuffer,int,int,int)>/$r4}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r58}" -> "InstanceFieldNode{NewObj{<java.util.Locale$Builder: void <init>()>[1@L2373] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String language>}" [color=red];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r58}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r58}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r49}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[4@L990] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[4@L990] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[4@L990] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>/$r1}" -> "VarNode{<java.util.regex.Matcher: java.lang.CharSequence getSubSequence(int,int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r32}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/r12}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r32}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r37}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r32}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r32}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.CurrencyNameProviderImpl: java.lang.String getSymbol(java.lang.String,java.util.Locale)>/r1}" -> "VarNode{<sun.util.locale.provider.CurrencyNameProviderImpl: java.lang.String getSymbol(java.lang.String,java.util.Locale)>/$r3}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.provider.CurrencyNameProviderImpl: java.lang.String getSymbol(java.lang.String,java.util.Locale)>/r1}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[16@L994] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[16@L994] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[16@L994] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.net.URI: void defineString()>/$r7}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String string>}" [color=red];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.util.Map getDisplayNames(java.lang.String,int,int,java.util.Locale)>/r1}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.util.Map getDisplayNamesImpl(java.lang.String,int,int,java.util.Locale,boolean)>/r1}" [color=blue];
  "VarNode{<java.net.URI: java.lang.String access$1502(java.net.URI,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String query>}" [color=red];
  "VarNode{<java.net.URI: java.lang.String access$1502(java.net.URI,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.net.URI: java.net.URI create(java.lang.String)>[0@L850] new java.net.URI}.<java.net.URI: java.lang.String query>}" [color=red];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise await()>/$r2}" -> "VarNode{<java.lang.InterruptedException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/r51}" -> "ArrayIndexNode{NewObj{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>[93@L1893] newarray java.lang.Object[%intconst4]}}" [color=red];
  "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/r3}" -> "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/r3}" -> "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r20}" -> "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r21}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle: void setExpirationTime(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle$Control)>/$r8}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r38}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.logging.PlatformLogger: void <init>(java.lang.String)>[9@L241] new sun.util.logging.PlatformLogger$DefaultLoggerProxy}.<sun.util.logging.PlatformLogger$LoggerProxy: java.lang.String name>}" -> "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.logging.PlatformLogger: void <init>(java.lang.String)>[9@L241] new sun.util.logging.PlatformLogger$DefaultLoggerProxy}.<sun.util.logging.PlatformLogger$LoggerProxy: java.lang.String name>}" -> "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String getCallerInfo()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.logging.PlatformLogger: void <init>(java.lang.String)>[9@L241] new sun.util.logging.PlatformLogger$DefaultLoggerProxy}.<sun.util.logging.PlatformLogger$LoggerProxy: java.lang.String name>}" -> "VarNode{<sun.util.logging.PlatformLogger: void redirectToJavaLoggerProxy()>/$r7}" [color=red,style=dashed];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r14}" -> "VarNode{<java.util.ServiceLoader: void access$300(java.lang.Class,java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[0@L823] new java.net.URL}.<java.net.URL: java.lang.String host>}" -> "VarNode{<java.net.URL: java.lang.String getHost()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[0@L823] new java.net.URL}.<java.net.URL: java.lang.String host>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r24}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>[51@L1872] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>[51@L1872] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r3}" [color=red,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>/r4}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r7}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r7}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r7}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r7}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>/%this}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r16}" -> "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/r25}" [];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: void <init>(java.net.URL)>[15@L1351] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String substring(int,int)>/$r1}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.CharSequence subSequence(int,int)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String substring(int,int)>/$r1}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.String substring(int)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r3}" -> "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r4}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r3}" -> "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.net.URL getBootstrapResource(java.lang.String)>/r1}" -> "VarNode{<sun.misc.URLClassPath: sun.misc.Resource getResource(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarFieldValueNamesMapGetter: java.lang.Object getObject(java.util.spi.LocaleServiceProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r3}" -> "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarFieldValueNamesMapGetter: java.util.Map getObject(java.util.spi.CalendarNameProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r8}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/r10}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r1}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r7}" -> "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r8}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC1779String(java.util.Map)>/$r11}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC1779DN(java.util.Map)>/$r13}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC1779String(java.util.Map)>/$r11}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC1779DN(java.util.Map)>/$r10}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r2}" -> "VarNode{<sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.time.DateTimeException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>/$r25}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.CRLExtensions: void init(sun.security.util.DerInputStream)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.CRLExtensions: void init(sun.security.util.DerInputStream)>/$r9}" -> "VarNode{<sun.security.x509.CRLExtensions: void init(sun.security.util.DerInputStream)>/$r8}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)>/o}" -> "VarNode{<io.netty.handler.codec.http.DefaultFullHttpRequest: java.lang.String toString()>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)>/o}" -> "VarNode{<java.lang.String: java.lang.String toString()>/%this}" [color=blue];
  "VarNode{<java.text.DigitList: long getLong()>/$r2}" -> "VarNode{<java.text.DigitList: long getLong()>/$r1}" [color=green3,style=dashed];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r30}" -> "VarNode{<java.util.ServiceLoader: void access$300(java.lang.Class,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName0(java.lang.String,java.lang.String)>/r0}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.Extension: java.lang.String toString()>/$r1}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.Extension: java.lang.String toString()>/$r1}" -> "VarNode{<sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>/$r1}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>[117@L1543] new java.security.UnresolvedPermission}.<java.security.UnresolvedPermission: java.lang.String actions>}" -> "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r9}" [color=red,style=dashed];
  "VarNode{<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>/r2}" -> "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[3@L127] newarray java.lang.Object[%intconst0]}}" [color=red];
  "VarNode{<sun.security.pkcs.PKCS9Attribute: void derEncode(java.io.OutputStream)>/$r51}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>/$r6}" -> "VarNode{<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<sun.security.util.AlgorithmDecomposer: java.util.Set decomposeOneHash(java.lang.String)>/r0}" -> "VarNode{<sun.security.util.AlgorithmDecomposer: java.util.Set decomposeImpl(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r55}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r56}" [color=green3,style=dashed];
  "VarNode{<java.util.LinkedHashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r5}" -> "VarNode{<java.util.LinkedHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$Node group0()>/$r26}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.IllformedLocaleException: void <init>(java.lang.String,int)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Hashtable$Enumerator: java.lang.Object next()>/$r2}" -> "VarNode{<java.util.AbstractCollection: java.lang.Object[] toArray()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.util.Hashtable$Enumerator: java.lang.Object next()>/$r2}" -> "VarNode{<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.Hashtable$Enumerator: java.lang.Object next()>/$r2}" -> "VarNode{<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.Collections$SingletonSet: java.util.Iterator iterator()>/$r1}" -> "VarNode{<java.util.Collections: java.util.Iterator singletonIterator(java.lang.Object)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: void <init>()>[34@L179] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String className>}" -> "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: void <init>()>[34@L179] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String className>}" -> "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: void <init>()>[34@L179] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String className>}" -> "VarNode{<sun.security.jca.ProviderConfig: java.lang.String access$100(sun.security.jca.ProviderConfig)>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/r25}" -> "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeExtension(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.reflect.MethodAccessorGenerator: java.lang.String buildInternalSignature()>/$r8}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r51}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27897}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1774] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27897}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1789] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27897}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1784] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27897}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1779] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object key>}" [color=red];
  "VarNode{<java.security.KeyStore$1: java.lang.Object run()>/$r1}" -> "VarNode{<java.security.KeyStore: java.lang.String getDefaultType()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r18}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r19}" [color=green3,style=dashed];
  "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>/$r5}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r6}" -> "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r5}" [color=green3,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r18}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/r27}" [];
  "VarNode{<java.io.File: boolean isFile()>/$r3}" -> "VarNode{<java.lang.SecurityManager: void checkRead(java.lang.String)>/r2}" [color=blue];
  "VarNode{<io.netty.buffer.WrappedByteBuf: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.BitSet: boolean get(int)>/$r6}" -> "VarNode{<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CRLImpl: void parse(sun.security.util.DerValue)>[104@L1116] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String dn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String toString()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r13}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r21}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r18}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r15}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r19}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r23}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r14}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r29}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r17}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r22}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r26}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r16}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r20}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r30}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r28}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.AlgorithmId: java.util.HashMap computeOidTable()>[39@L665] new sun.security.util.ObjectIdentifier}.<sun.security.util.ObjectIdentifier: java.lang.String stringForm>}" -> "VarNode{<sun.security.util.ObjectIdentifier: java.lang.String toString()>/r11}" [color=red,style=dashed];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27767}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[3@L540] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27767}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[47@L577] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27767}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>[26@L2571] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" [color=red];
  "VarNode{<java.net.URLClassLoader: java.net.URL findResource(java.lang.String)>/r2}" -> "VarNode{<java.net.URLClassLoader$2: void <init>(java.net.URLClassLoader,java.lang.String)>/r2}" [color=blue];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline fireChannelRead(java.lang.Object)>/msg}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>/msg}" [color=blue];
  "VarNode{<io.netty.buffer.EmptyByteBuf: java.lang.String toString()>/$r1}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<io.netty.buffer.EmptyByteBuf: java.lang.String toString()>/$r1}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r57}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r57}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r9}" -> "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>[0@L311] new sun.util.locale.BaseLocale}.<sun.util.locale.BaseLocale: java.lang.String script>}" [color=red];
  "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/r0}" -> "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/$r11}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/r0}" -> "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/$r4}" [color=green3,style=dashed];
  "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r14}" -> "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r15}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r25}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r3}" -> "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r5}" [color=green3,style=dashed];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r3}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase()>/%this}" [color=blue];
  "VarNode{<sun.net.www.URLConnection: boolean isProxiedHost(java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase()>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[32@L1825] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[32@L1825] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[32@L1825] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[32@L1825] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[128@L530] new sun.security.provider.PolicyParser$PrincipalEntry}.<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String principalName>}" -> "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r6}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[128@L530] new sun.security.provider.PolicyParser$PrincipalEntry}.<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String principalName>}" -> "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[128@L530] new sun.security.provider.PolicyParser$PrincipalEntry}.<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String principalName>}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String[][] getPrincipalInfo(sun.security.provider.PolicyParser$PrincipalEntry,java.security.Principal[])>/$r26}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[128@L530] new sun.security.provider.PolicyParser$PrincipalEntry}.<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String principalName>}" -> "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName(boolean)>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[128@L530] new sun.security.provider.PolicyParser$PrincipalEntry}.<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String principalName>}" -> "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName(boolean)>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r62}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getTimeZoneNames(java.lang.String)>/r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getTimeZoneNames(java.lang.String)>/r2}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getTimeZoneNames(java.lang.String)>/$r1}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r5}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r49}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/%this}" [color=blue];
  "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r1}" -> "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r2}" -> "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r4}" [color=blue];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: void callHandlerAdded0(io.netty.channel.AbstractChannelHandlerContext)>/$r20}" -> "VarNode{<io.netty.channel.ChannelPipelineException: void <init>(java.lang.String,java.lang.Throwable)>/message}" [color=blue];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r9}" -> "VarNode{<java.io.FileInputStream: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask: void write(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void access$1800(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/x1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath: java.util.Enumeration findResources(java.lang.String,boolean)>[0@L267] new sun.misc.URLClassPath$1}.<sun.misc.URLClassPath$1: java.lang.String val$name>}" -> "VarNode{<sun.misc.URLClassPath$1: boolean next()>/$r5}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r20}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r14}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r15}" [color=green3,style=dashed];
  "VarNode{<java.text.AttributedString: java.lang.Object getAttributeCheckRange(java.text.AttributedCharacterIterator$Attribute,int,int,int)>/$r2}" -> "VarNode{<java.text.AttributedString: java.lang.Object access$400(java.text.AttributedString,java.text.AttributedCharacterIterator$Attribute,int,int,int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.concurrent.PromiseTask: java.lang.StringBuilder toStringBuilder()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.DateFormatProviderImpl: java.text.DateFormat getInstance(int,int,java.util.Locale)>/$r7}" -> "VarNode{<java.text.SimpleDateFormat: void applyPattern(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.KeyException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" -> "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/r14}" -> "VarNode{<java.net.Inet6Address: java.lang.String getHostAddress()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.text.AttributedString: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute,int)>/$r6}" -> "VarNode{<java.text.AttributedString: java.lang.Object getAttributeCheckRange(java.text.AttributedCharacterIterator$Attribute,int,int,int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.SecurityManager$1: java.lang.Object run()>/$r1}" -> "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/$r15}" [color=blue,style=dashed];
  "VarNode{<javax.crypto.CryptoPolicyParser: java.security.spec.AlgorithmParameterSpec getInstance(java.lang.String,java.lang.Integer[])>/$r13}" -> "VarNode{<javax.crypto.CryptoPolicyParser: java.security.spec.AlgorithmParameterSpec getInstance(java.lang.String,java.lang.Integer[])>/$r14}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/$r12}" -> "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/$r13}" [color=green3,style=dashed];
  "VarNode{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.PlatformDependent: long maxDirectMemory0()>/$r29}" -> "VarNode{<java.lang.Long: long parseLong(java.lang.String)>/r0}" [color=blue];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannel: java.lang.String toString()>/$r8}" -> "InstanceFieldNode{NewObj{<Server: void main(java.lang.String[])>[2@L10] new io.netty.channel.embedded.EmbeddedChannel}.<io.netty.channel.AbstractChannel: java.lang.String strVal>}" [color=red];
  "InstanceFieldNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[99@L1481] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String negativeSuffix>}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r19}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[99@L1481] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String negativeSuffix>}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/$r14}" [color=red,style=dashed];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>/r2}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/r2}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/r0}" -> "VarNode{<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier algOID(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/r0}" -> "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/$r11}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/r0}" -> "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.util.jar.JarFile: java.util.jar.Manifest getManifestFromReference()>/$r11}" -> "VarNode{<java.util.jar.JarVerifier: void <init>(java.lang.String,byte[])>/r6}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[55@L458] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" -> "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String next()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[55@L458] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" -> "VarNode{<sun.util.locale.StringTokenIterator: sun.util.locale.StringTokenIterator setStart(int)>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r40}" -> "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r41}" [color=green3,style=dashed];
  "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r2}" -> "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r9}" [];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r17}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r18}" [color=green3,style=dashed];
  "VarNode{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>/$r12}" -> "VarNode{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>/$r13}" [color=green3,style=dashed];
  "VarNode{<java.util.jar.JarVerifier: void <init>(java.lang.String,byte[])>/r6}" -> "InstanceFieldNode{NewObj{<java.util.jar.JarFile: java.util.jar.Manifest getManifestFromReference()>[21@L201] new java.util.jar.JarVerifier}.<java.util.jar.JarVerifier: java.lang.String manifestName>}" [color=red];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r21}" -> "VarNode{<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int,java.security.cert.CertPathValidatorException$Reason)>/r1}" [color=blue];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r11}" -> "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r14}" [];
  "VarNode{<java.util.ServiceConfigurationError: void <init>(java.lang.String,java.lang.Throwable)>/r1}" -> "VarNode{<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r46}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.resources.LocaleData: java.util.ResourceBundle getNumberFormatData(java.util.Locale)>/$r6}" -> "VarNode{<sun.util.resources.LocaleData: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext newContext(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)>[0@L95] new io.netty.channel.DefaultChannelHandlerContext}.<io.netty.channel.AbstractChannelHandlerContext: java.lang.String name>}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext: java.lang.String name()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/$r12}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/$r17}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>/$r8}" -> "VarNode{<sun.util.locale.provider.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>/$r9}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r8}" -> "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toTitleString(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r8}" -> "VarNode{<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>/r0}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.PropertyPermissionCollection: void add(java.security.Permission)>[31@L483] new java.util.PropertyPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.PropertyPermissionCollection: void add(java.security.Permission)>[31@L483] new java.util.PropertyPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.PropertyPermissionCollection: void add(java.security.Permission)>[31@L483] new java.util.PropertyPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<sun.reflect.MethodAccessorGenerator: sun.reflect.MagicAccessorImpl generate(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int,boolean,boolean,java.lang.Class)>/$r48}" -> "VarNode{<java.lang.InternalError: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void <init>(java.lang.String,int,int,int)>/$r22}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r12}" -> "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r13}" [color=green3,style=dashed];
  "VarNode{<java.net.URI: void defineString()>/$r18}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void defineString()>/$r18}" -> "VarNode{<java.net.URI: void defineString()>/$r22}" [color=green3,style=dashed];
  "VarNode{<java.util.GregorianCalendar: int computeFields(int,int)>/$r63}" -> "VarNode{<java.lang.AssertionError: void <init>(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>/%this}" [color=green3,style=dashed];
  "VarNode{<java.util.zip.ZipFile: void <init>(java.io.File,int,java.nio.charset.Charset)>/$r9}" -> "VarNode{<java.lang.SecurityManager: void checkRead(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.util.zip.ZipFile: void <init>(java.io.File,int,java.nio.charset.Charset)>/$r9}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>[11@L941] new java.util.jar.JarFile}.<java.util.zip.ZipFile: java.lang.String name>}" [color=red];
  "VarNode{<java.util.zip.ZipFile: void <init>(java.io.File,int,java.nio.charset.Charset)>/$r9}" -> "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void loadPolicies(java.io.File,javax.crypto.CryptoPermissions,javax.crypto.CryptoPermissions)>[0@L353] new java.util.jar.JarFile}.<java.util.zip.ZipFile: java.lang.String name>}" [color=red];
  "VarNode{<java.util.zip.ZipFile: void <init>(java.io.File,int,java.nio.charset.Charset)>/$r9}" -> "VarNode{<java.lang.SecurityManager: void checkDelete(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.util.zip.ZipFile: void <init>(java.io.File,int,java.nio.charset.Charset)>/$r9}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r26}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r26}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r26}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r26}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r26}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r44}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r3}" [color=green3,style=dashed];
  "VarNode{<java.io.File: java.lang.String getName()>/$r2}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r3}" [color=green3,style=dashed];
  "VarNode{<java.io.File: java.lang.String getName()>/$r2}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r11}" [color=green3,style=dashed];
  "VarNode{<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.Throwable: void printStackTrace(java.lang.Throwable$PrintStreamOrWriter)>/$r11}" -> "VarNode{<java.lang.Throwable$WrappedPrintStream: void println(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.lang.Throwable: void printStackTrace(java.lang.Throwable$PrintStreamOrWriter)>/$r11}" -> "VarNode{<java.lang.Throwable$WrappedPrintWriter: void println(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.JdkLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" [color=blue];
  "VarNode{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r4}" -> "VarNode{<java.util.TreeMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.util.TreeMap$Entry)>/r2}" [color=blue];
  "VarNode{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r4}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.Object setValue(java.lang.Object)>/r2}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r22}" -> "VarNode{<sun.util.locale.provider.FallbackLocaleProviderAdapter: void <clinit>()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>/$r7}" -> "VarNode{<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty getInstance()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>/$r7}" -> "VarNode{<sun.text.normalizer.NormalizerImpl: void <clinit>()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>/$r7}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>/$r7}" -> "VarNode{<sun.text.normalizer.UCharacter: void <clinit>()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>/$r7}" -> "VarNode{<java.lang.Throwable: java.lang.String getLocalizedMessage()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: boolean parsePrivateuse(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r3}" -> "VarNode{<sun.util.locale.LanguageTag: boolean parsePrivateuse(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r5}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: boolean parsePrivateuse(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: boolean parsePrivateuse(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r3}" -> "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void invokeChannelRead(java.lang.Object)>/msg}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline$TailContext: void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)>/msg}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void invokeChannelRead(java.lang.Object)>/msg}" -> "VarNode{<io.netty.channel.ChannelInboundHandlerAdapter: void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)>/msg}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void invokeChannelRead(java.lang.Object)>/msg}" -> "VarNode{<io.netty.channel.embedded.EmbeddedChannel$LastInboundHandler: void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)>/msg}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void invokeChannelRead(java.lang.Object)>/msg}" -> "VarNode{<io.netty.channel.SimpleChannelInboundHandler: void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)>/msg}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName(boolean)>/$r6}" -> "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName(boolean)>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>/r1}" -> "VarNode{<sun.misc.Launcher$AppClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>/r0}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>/r1}" -> "VarNode{<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>/r1}" [color=blue];
  "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r10}" -> "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r11}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/$r5}" -> "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r12}" -> "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r0}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r49}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.LocaleExtensions: java.lang.String getUnicodeLocaleType(java.lang.String)>/$r8}" -> "VarNode{<java.util.Locale: java.lang.String getUnicodeLocaleType(java.lang.String)>/$r8}" [color=blue,style=dashed];
  "ArrayIndexNode{NewObj{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object)>[1@L135] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r14}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object)>[1@L135] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r11}" [color=red,style=dashed];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>/$r12}" -> "VarNode{<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>/$r11}" [color=green3,style=dashed];
  "VarNode{<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>/$r26}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r39}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.pkcs.PKCS9Attributes: java.lang.Object getAttributeValue(sun.security.util.ObjectIdentifier)>/$r9}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>[33@L2678] new java.util.ResourceBundle$Control$1}.<java.util.ResourceBundle$Control$1: java.lang.String val$resourceName>}" -> "VarNode{<java.util.ResourceBundle$Control$1: java.io.InputStream run()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>[33@L2678] new java.util.ResourceBundle$Control$1}.<java.util.ResourceBundle$Control$1: java.lang.String val$resourceName>}" -> "VarNode{<java.util.ResourceBundle$Control$1: java.io.InputStream run()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.security.Policy$2: java.security.Policy run()>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Policy$2: java.security.Policy run()>/$r9}" -> "VarNode{<java.security.Policy$2: java.security.Policy run()>/$r8}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253String(java.util.Map)>/$r27}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253String(java.util.Map)>/$r13}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253String(java.util.Map)>/$r27}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253String(java.util.Map)>/$r27}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: java.lang.String get(java.lang.String)>/$r1}" -> "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r1}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: java.lang.String get(java.lang.String)>/$r1}" -> "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r0}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: java.lang.String get(java.lang.String)>/$r1}" -> "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r2}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: java.lang.String get(java.lang.String)>/$r1}" -> "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r10}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/r11}" [];
  "VarNode{<io.netty.handler.codec.DecoderResult: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r10}" -> "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r11}" [color=green3,style=dashed];
  "VarNode{<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>/$r21}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: void add0(int,int,java.lang.CharSequence,java.lang.CharSequence)>/value}" -> "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry: void <init>(io.netty.handler.codec.http.DefaultHttpHeaders,int,java.lang.CharSequence,java.lang.CharSequence)>/value}" [color=blue];
  "VarNode{<java.security.MessageDigest: java.lang.String getAlgorithm()>/$r1}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r53}" [color=blue,style=dashed];
  "VarNode{<java.security.MessageDigest: java.lang.String getAlgorithm()>/$r1}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r64}" [color=blue,style=dashed];
  "VarNode{<java.security.MessageDigest: java.lang.String getAlgorithm()>/$r1}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r45}" [color=blue,style=dashed];
  "VarNode{<java.security.MessageDigest: java.lang.String getAlgorithm()>/$r1}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r57}" [color=blue,style=dashed];
  "VarNode{<java.security.MessageDigest: java.lang.String getAlgorithm()>/$r1}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r35}" [color=blue,style=dashed];
  "VarNode{<java.security.MessageDigest: java.lang.String getAlgorithm()>/$r1}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r23}" [color=blue,style=dashed];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r9}" -> "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r34}" -> "VarNode{<java.net.MalformedURLException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r10}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r11}" [color=green3,style=dashed];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r7}" -> "VarNode{<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.AlgorithmDecomposer: java.lang.String hashName(java.lang.String)>/r0}" -> "VarNode{<sun.security.util.AlgorithmDecomposer: java.lang.String hashName(java.lang.String)>/$r1}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.AlgorithmDecomposer: java.lang.String hashName(java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r14}" -> "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r15}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r13}" -> "VarNode{<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>/r3}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: java.lang.String get(java.lang.CharSequence)>/r7}" -> "VarNode{<java.lang.String: java.lang.String toString()>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1774] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap$Node: java.lang.Object getKey()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1774] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1774] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1774] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1774] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap$KeyIterator: java.lang.Object next()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[91@L831] new sun.security.provider.PolicyFile$SelfPermission}.<sun.security.provider.PolicyFile$SelfPermission: java.lang.String name>}" -> "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r6}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[91@L831] new sun.security.provider.PolicyFile$SelfPermission}.<sun.security.provider.PolicyFile$SelfPermission: java.lang.String name>}" -> "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String getSelfName()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.IllformedLocaleException: void <init>(java.lang.String,int)>/r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.IllformedLocaleException: void <init>(java.lang.String,int)>/r2}" -> "VarNode{<java.util.IllformedLocaleException: void <init>(java.lang.String,int)>/$r11}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r12}" -> "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>[38@L1527] newarray java.lang.String[i21]}}" [color=red];
  "VarNode{<java.security.spec.EllipticCurve: void checkValidity(java.security.spec.ECField,java.math.BigInteger,java.lang.String)>/$r15}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.StringWriter: void write(java.lang.String,int,int)>/$r3}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.StringWriter: void write(java.lang.String,int,int)>/$r3}" -> "VarNode{<java.io.StringWriter: void write(java.lang.String,int,int)>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.lang.Class: java.lang.String getCanonicalName()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.String getCanonicalName()>/$r6}" -> "VarNode{<java.lang.Class: java.lang.String getCanonicalName()>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.lang.Package: java.lang.Package getSystemPackage(java.lang.String)>/$r3}" -> "VarNode{<java.lang.String: java.lang.String concat(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.handler.stream.ChunkedNioFile: void <init>(java.nio.channels.FileChannel,long,long,int)>/$r7}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>/$r5}" -> "VarNode{<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>/r6}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext$7: void <init>(io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.AbstractChannelHandlerContext,java.lang.Object)>/r3}" -> "InstanceFieldNode{NewObj{<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>[12@L280] new io.netty.channel.AbstractChannelHandlerContext$7}.<io.netty.channel.AbstractChannelHandlerContext$7: java.lang.Object val$msg>}" [color=red];
  "VarNode{<sun.security.x509.X509CRLImpl: void <init>(sun.security.util.DerValue)>/$r9}" -> "VarNode{<sun.security.x509.X509CRLImpl: void <init>(sun.security.util.DerValue)>/$r10}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.HostLocaleProviderAdapter: java.util.spi.LocaleServiceProvider findInstalledProvider(java.lang.Class)>/$r6}" -> "VarNode{<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>/r2}" [color=blue];
  "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r25}" -> "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r26}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r1}" -> "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r2}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r1}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase()>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r4}" -> "VarNode{<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>/r0}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r2}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r27}" [color=green3,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.lang.NullPointerException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r1}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/$r2}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/$r2}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/r33}" -> "VarNode{<java.net.Inet6Address: void <init>(java.lang.String,byte[],java.lang.String)>/r4}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/r3}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r18}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/r3}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r19}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/r3}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/r3}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.util.jar.JavaUtilJarAccessImpl: java.util.jar.Attributes getTrustedAttributes(java.util.jar.Manifest,java.lang.String)>/r1}" -> "VarNode{<java.util.jar.Manifest: java.util.jar.Attributes getTrustedAttributes(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r36}" -> "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r37}" [color=green3,style=dashed];
  "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.CertificateExtensions: sun.security.x509.Extension get(java.lang.String)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.CertificateExtensions: sun.security.x509.Extension get(java.lang.String)>/r1}" -> "VarNode{<sun.security.x509.CertificateExtensions: sun.security.x509.Extension get(java.lang.String)>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>/$r23}" -> "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: void config(java.lang.Class,java.lang.String)>/r3}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/$r7}" -> "VarNode{<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r14}" -> "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r15}" [color=green3,style=dashed];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/$r16}" -> "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/r2}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r5}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r52}" [color=green3,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.security.cert.CertPathValidatorException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/$r11}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.net.URLClassLoader$1: java.lang.Class run()>/$r1}" -> "VarNode{<java.net.URLClassLoader$1: java.lang.Class run()>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.net.URLClassLoader$1: java.lang.Class run()>/$r1}" -> "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.net.URISyntaxException>}.<java.net.URISyntaxException: java.lang.String input>}" -> "VarNode{<java.net.URISyntaxException: java.lang.String getMessage()>/$r3}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r14}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r13}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r4}" -> "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>/r7}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r24}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.math.BigInteger: java.lang.String smallToString(int)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.math.BigInteger: java.lang.String smallToString(int)>/$r11}" -> "VarNode{<java.math.BigInteger: java.lang.String smallToString(int)>/$r27}" [color=green3,style=dashed];
  "VarNode{<java.util.AbstractCollection: java.lang.Object[] toArray()>/$r3}" -> "ArrayIndexNode{NewObj{<java.util.AbstractCollection: java.lang.Object[] toArray()>[1@L136] newarray java.lang.Object[$i0]}}" [color=red];
  "VarNode{<java.nio.charset.CharsetDecoder: void throwIllegalStateException(int,int)>/$r10}" -> "VarNode{<java.lang.IllegalStateException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>/$r25}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control$1: void <init>(java.util.ResourceBundle$Control,boolean,java.lang.ClassLoader,java.lang.String)>/r3}" -> "InstanceFieldNode{NewObj{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>[33@L2678] new java.util.ResourceBundle$Control$1}.<java.util.ResourceBundle$Control$1: java.lang.String val$resourceName>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.NumberFormatProviderImpl: void adjustForCurrencyDefaultFractionDigits(java.text.DecimalFormat,java.text.DecimalFormatSymbols)>/$r3}" -> "VarNode{<java.util.Currency: java.util.Currency getInstance(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.math.BigInteger: java.lang.String smallToString(int)>/$r6}" -> "VarNode{<java.math.BigInteger: java.lang.String toString(int)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.math.BigInteger: java.lang.String smallToString(int)>/$r6}" -> "VarNode{<java.math.BigInteger: void toString(java.math.BigInteger,java.lang.StringBuilder,int,int)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r13}" -> "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r5}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>[0@L692] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String prefix>}" -> "VarNode{<sun.security.x509.X509AttributeName: java.lang.String getPrefix()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.misc.Launcher$AppClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>/r0}" -> "VarNode{<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>/r1}" [color=blue];
  "VarNode{<sun.misc.Launcher$AppClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>/r0}" -> "VarNode{<java.lang.ClassNotFoundException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.Launcher$AppClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>/r0}" -> "VarNode{<sun.misc.Launcher$AppClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>/$r6}" [color=green3,style=dashed];
  "VarNode{<sun.misc.Launcher$AppClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.security.Security: void initialize()>/$r34}" -> "VarNode{<java.security.Security: void initialize()>/$r35}" [color=green3,style=dashed];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/r1}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.StringJoiner: java.lang.StringBuilder prepareBuilder()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.StringJoiner: java.lang.StringBuilder prepareBuilder()>/$r6}" -> "VarNode{<java.util.StringJoiner: java.lang.StringBuilder prepareBuilder()>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r27}" -> "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r28}" [color=green3,style=dashed];
  "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/$r18}" -> "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/r1}" [];
  "VarNode{<java.lang.String: boolean matches(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: boolean matches(java.lang.String,java.lang.CharSequence)>/r2}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r6}" -> "VarNode{<io.netty.util.internal.SystemPropertyUtil: java.lang.String get(java.lang.String,java.lang.String)>/def}" [color=blue];
  "VarNode{<java.io.File: java.io.File getAbsoluteFile()>/$r1}" -> "VarNode{<java.io.File: java.io.File getAbsoluteFile()>/r6}" [];
  "VarNode{<java.io.File: java.io.File getAbsoluteFile()>/$r1}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/r0}" [color=blue];
  "InstanceFieldNode{NewObj{<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>[2@L148] new java.security.AlgorithmParameters}.<java.security.AlgorithmParameters: java.lang.String algorithm>}" -> "VarNode{<java.security.AlgorithmParameters: java.lang.String getAlgorithm()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.BitSet: void set(int)>/$r6}" -> "VarNode{<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.SPILocaleProviderAdapter$1: java.util.spi.LocaleServiceProvider run()>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.SPILocaleProviderAdapter$1: java.util.spi.LocaleServiceProvider run()>/$r13}" -> "VarNode{<sun.util.locale.provider.SPILocaleProviderAdapter$1: java.util.spi.LocaleServiceProvider run()>/$r11}" [color=green3,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r7}" -> "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeScript(java.lang.String)>/r0}" [color=blue];
  "ArrayIndexNode{NewObj{<java.util.ArrayDeque: java.lang.Object[] toArray()>[1@L787] newarray java.lang.Object[$i0]}}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r22}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>/$r8}" -> "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>/$r9}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/r72}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/r72}" -> "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: void <init>(java.lang.String,java.lang.String)>/r4}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/r72}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/r72}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r67}" [color=green3,style=dashed];
  "VarNode{<java.util.Currency: boolean isPastCutoverDate(java.lang.String)>/$r4}" -> "VarNode{<java.text.DateFormat: java.util.Date parse(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>/$r35}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>[17@L436] new java.util.Hashtable$Entry}.<java.util.Hashtable$Entry: java.lang.Object key>}" -> "VarNode{<java.util.Hashtable$Enumerator: java.lang.Object nextElement()>/$r6}" [color=red,style=dashed];
  "VarNode{<sun.security.util.Debug: java.lang.String marshal(java.lang.String)>/$r6}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r9}" -> "InstanceFieldNode{NewObj{<sun.security.util.ManifestEntryVerifier: sun.security.util.JarConstraintsParameters getParams(java.util.Map,java.util.Map)>[8@L270] new sun.security.util.JarConstraintsParameters}.<sun.security.util.JarConstraintsParameters: java.lang.String message>}" [color=red];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r9}" -> "InstanceFieldNode{NewObj{<sun.security.util.ManifestEntryVerifier: sun.security.util.JarConstraintsParameters getParams(java.util.Map,java.util.Map)>[19@L278] new sun.security.util.JarConstraintsParameters}.<sun.security.util.JarConstraintsParameters: java.lang.String message>}" [color=red];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r9}" -> "InstanceFieldNode{NewObj{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>[33@L299] new sun.security.util.JarConstraintsParameters}.<sun.security.util.JarConstraintsParameters: java.lang.String message>}" [color=red];
  "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>/r3}" -> "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>/r10}" [color=blue];
  "VarNode{<java.net.URISyntaxException: java.lang.String getReason()>/$r1}" -> "VarNode{<java.net.URISyntaxException: java.lang.String getMessage()>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.misc.Launcher$AppClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>/$r6}" -> "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/$c2}" -> "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/r1}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r1}" -> "VarNode{<java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>/r0}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/$r7}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r8}" [];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC1779String(java.util.Map)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC1779String(java.util.Map)>/$r8}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toRFC1779String(java.util.Map)>/$r2}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r15}" -> "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r4}" [color=blue];
  "VarNode{<sun.util.locale.provider.BreakIteratorProviderImpl: java.text.BreakIterator getBreakInstance(java.util.Locale,int,java.lang.String,java.lang.String)>/$r20}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseString(java.io.Reader,int,int,java.lang.StringBuilder)>/$r23}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.resources.LocaleData: java.util.ResourceBundle getDateFormatData(java.util.Locale)>/$r6}" -> "VarNode{<sun.util.resources.LocaleData: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[59@L704] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String actions>}" -> "VarNode{<java.net.SocketPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[3@L152] new java.net.NetPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[3@L152] new java.net.NetPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r11}" -> "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r12}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.text.normalizer.NormalizerBase$NFKDMode: java.lang.String normalize(java.lang.String,int)>/r0}" -> "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String decompose(java.lang.String,boolean,int)>/r2}" [color=blue];
  "ArrayIndexNode{NewObj{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>[1@L159] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r14}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>[1@L159] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r11}" [color=red,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String group()>/$r1}" -> "VarNode{<sun.security.util.Debug: java.lang.String marshal(java.lang.String)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String group()>/$r1}" -> "VarNode{<sun.security.util.Debug: java.lang.String marshal(java.lang.String)>/$r21}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r15}" -> "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>/r5}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r15}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r14}" [color=green3,style=dashed];
  "ArrayIndexNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[177@L892] newarray java.lang.Object[%intconst12]}}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r39}" [color=red,style=dashed];
  "VarNode{<java.security.BasicPermission: java.lang.String getCanonicalName()>/$r1}" -> "VarNode{<java.security.BasicPermissionCollection: void add(java.security.Permission)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>/$r6}" -> "VarNode{<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.AbstractList$Itr: java.lang.Object next()>/$r2}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r74}" [color=blue,style=dashed];
  "VarNode{<java.util.AbstractList$Itr: java.lang.Object next()>/$r2}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.util.AbstractList$Itr: java.lang.Object next()>/$r2}" -> "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.util.AbstractList$Itr: java.lang.Object next()>/$r2}" -> "VarNode{<java.util.AbstractCollection: boolean addAll(java.util.Collection)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.AbstractList$Itr: java.lang.Object next()>/$r2}" -> "VarNode{<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.AbstractList$Itr: java.lang.Object next()>/$r2}" -> "VarNode{<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.AbstractList$Itr: java.lang.Object next()>/$r2}" -> "VarNode{<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>/$r8}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r48}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r49}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: boolean match(java.lang.String,java.lang.String)>/r0}" -> "VarNode{<java.net.SocketPermission: boolean match(java.lang.String,java.lang.String)>/$r1}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: boolean match(java.lang.String,java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase()>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.ServiceLoader: void reload()>[2@L219] new java.util.ServiceLoader$LazyIterator}.<java.util.ServiceLoader$LazyIterator: java.lang.String nextName>}" -> "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/r1}" [color=red,style=dashed];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r15}" -> "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r14}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r12}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r13}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>[33@L299] new sun.security.util.JarConstraintsParameters}.<sun.security.util.JarConstraintsParameters: java.lang.String message>}" -> "VarNode{<sun.security.util.JarConstraintsParameters: java.lang.String extendedExceptionMsg()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r42}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r19}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r18}" [color=green3,style=dashed];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r39}" -> "VarNode{<java.lang.String: java.lang.String toString()>/%this}" [color=blue];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r39}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r40}" [];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-82}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>[12@L1093] new java.util.regex.Matcher}.<java.util.regex.Matcher: java.lang.CharSequence text>}" [color=red];
  "VarNode{<sun.security.x509.X509Key: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/r0}" -> "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>[18@L1511] newarray java.lang.String[%intconst1]}}" [color=red];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/r0}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r22}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/r0}" -> "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/r0}" -> "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>[5@L1505] newarray java.lang.String[%intconst1]}}" [color=red];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/r0}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/r0}" -> "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>[21@L1513] newarray java.lang.String[%intconst2]}}" [color=red];
  "VarNode{<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>/r0}" -> "VarNode{<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>/%taint-temp-154}" [];
  "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r4}" -> "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r3}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>/r2}" -> "VarNode{<java.util.regex.Matcher: void <init>(java.util.regex.Pattern,java.lang.CharSequence)>/r2}" [color=blue];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/$r17}" -> "VarNode{<java.lang.NumberFormatException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: java.lang.String getUnicodeLocaleType(java.lang.String)>/$r4}" -> "VarNode{<sun.util.locale.LocaleExtensions: java.lang.String getUnicodeLocaleType(java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: java.lang.String getUnicodeLocaleType(java.lang.String)>/$r4}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r25}" [color=blue,style=dashed];
  "VarNode{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>/$r10}" -> "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/r0}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r4}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r4}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r24}" [color=green3,style=dashed];
  "VarNode{<java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>/r0}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>/r0}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.nio.charset.IllegalCharsetNameException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[17@L446] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String pad>}" -> "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/r32}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[17@L446] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String pad>}" -> "VarNode{<javax.crypto.Cipher$Transform: int supportsPadding(java.security.Provider$Service)>/$r2}" [color=red,style=dashed];
  "VarNode{<java.util.zip.ZipFile: java.util.zip.ZipEntry getZipEntry(java.lang.String,long)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.zip.ZipFile: java.util.zip.ZipEntry getZipEntry(java.lang.String,long)>[0@L576] new java.util.zip.ZipEntry}.<java.util.zip.ZipEntry: java.lang.String name>}" [color=red];
  "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r15}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<java.util.Currency: boolean isPastCutoverDate(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<sun.security.util.CurveDB: java.lang.String[] getNamesByOID(java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.cert.Certificate[] getCertificates(java.security.KeyStore,java.lang.String,sun.security.provider.PolicyFile$PolicyInfo)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<io.netty.handler.codec.http.HttpMethod: void <init>(java.lang.String,boolean)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<java.text.MessageFormat: int findKeyword(java.lang.String,java.lang.String[])>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/$r0}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<io.netty.buffer.ByteBufUtil: void <clinit>()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r10}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser$DomainEntry: void add(sun.security.provider.PolicyParser$KeyStoreEntry)>/$r8}" -> "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r27}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r46}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector: void <init>(java.lang.String,int,long)>/$r16}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.logging.LogManager: void readConfiguration()>/r31}" -> "VarNode{<java.io.FileInputStream: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r29}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/r12}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r29}" -> "VarNode{<java.util.ArrayList: boolean add(java.lang.Object)>/r2}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r29}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r32}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r29}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r29}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String getSelfName()>/$r1}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r9}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String getSelfName()>/$r1}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r32}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String getSelfName()>/$r1}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r15}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String getSelfName()>/$r1}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r4}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/$r1}" -> "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r4}" [color=blue];
  "VarNode{<sun.util.locale.provider.HostLocaleProviderAdapter: java.util.spi.LocaleServiceProvider findInstalledProvider(java.lang.Class)>/$r13}" -> "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: void config(java.lang.Class,java.lang.String)>/r3}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.LocaleExtensions getLocaleExtensions()>[11@L533] new sun.util.locale.LocaleExtensions}.<sun.util.locale.LocaleExtensions: java.lang.String id>}" -> "VarNode{<sun.util.locale.LocaleExtensions: java.lang.String getID()>/$r1}" [color=red,style=dashed];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String convertOldISOCodes(java.lang.String)>/r2}" -> "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.io.ByteArrayOutputStream: void <init>(int)>/$r6}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.text.normalizer.UnicodeSet: void applyPropertyPattern(sun.text.normalizer.RuleCharacterIterator,java.lang.StringBuffer,sun.text.normalizer.SymbolTable)>/$r6}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r1}" -> "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/r23}" [];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r1}" -> "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r17}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r1}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "VarNode{<java.util.StringJoiner: java.lang.StringBuilder prepareBuilder()>/$r5}" -> "VarNode{<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X509CertImpl: void <init>(sun.security.util.DerValue)>/$r7}" -> "VarNode{<sun.security.x509.X509CertImpl: void <init>(sun.security.util.DerValue)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-98}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>[12@L1093] new java.util.regex.Matcher}.<java.util.regex.Matcher: java.lang.CharSequence text>}" [color=red];
  "VarNode{<java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r4}" -> "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.Formatter$Flags: java.lang.String toString()>/$r11}" -> "VarNode{<java.util.Formatter$Flags: java.util.Formatter$Flags parse(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$Flags: java.lang.String toString()>/$r11}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void failMismatch(java.util.Formatter$Flags,char)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$Flags: java.lang.String toString()>/$r11}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void checkText()>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$Flags: java.lang.String toString()>/$r11}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void checkText()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$Flags: java.lang.String toString()>/$r11}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void checkNumeric()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$Flags: java.lang.String toString()>/$r11}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.math.BigInteger,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/r4}" [color=blue];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>[28@L1051] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String actions>}" -> "VarNode{<java.net.SocketPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<java.security.Provider: void putId()>/$r5}" -> "VarNode{<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>/r0}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r59}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r2}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r45}" [color=blue,style=dashed];
  "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r2}" -> "VarNode{<java.util.StringTokenizer: java.lang.String nextToken(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r2}" -> "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r2}" -> "VarNode{<java.lang.SecurityManager: java.lang.String[] getPackages(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r2}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r61}" [color=blue,style=dashed];
  "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r2}" -> "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Set createLanguageTagSet(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r2}" -> "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r2}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.cert.Certificate[] getCertificates(java.security.KeyStore,java.lang.String,sun.security.provider.PolicyFile$PolicyInfo)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r2}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r63}" [color=blue,style=dashed];
  "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r2}" -> "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r2}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r8}" [color=blue,style=dashed];
  "VarNode{<sun.security.pkcs.SignerInfo: java.util.Set verifyAlgorithms(sun.security.pkcs.SignerInfo[],sun.security.util.JarConstraintsParameters,java.lang.String)>/$r12}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,java.security.AlgorithmParameters,sun.security.util.ConstraintsParameters)>/r1}" [color=blue];
  "VarNode{<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>/$r20}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>/$r2}" -> "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.calendar.CalendarSystem: java.util.Properties getCalendarProperties()>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.URIName: void <init>(java.lang.String)>/$r40}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object)>/msg}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" [color=blue];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r27}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r61}" [];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r21}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[0@L427] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String signedBy>}" [color=red];
  "VarNode{<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>/r0}" -> "VarNode{<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>/r3}" [color=blue];
  "VarNode{<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>/r0}" -> "InstanceFieldNode{NewObj{<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>[17@L436] new java.util.Hashtable$Entry}.<java.util.Hashtable$Entry: java.lang.Object value>}" [color=red];
  "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>[1@L77] new java.net.URI}.<java.net.URI: java.lang.String decodedPath>}" -> "VarNode{<java.net.URI: java.lang.String getPath()>/$r5}" [color=red,style=dashed];
  "VarNode{<sun.security.rsa.RSAUtil$KeyType: sun.security.rsa.RSAUtil$KeyType lookup(java.lang.String)>/r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.rsa.RSAUtil$KeyType: sun.security.rsa.RSAUtil$KeyType lookup(java.lang.String)>/r0}" -> "VarNode{<sun.security.rsa.RSAUtil$KeyType: sun.security.rsa.RSAUtil$KeyType lookup(java.lang.String)>/$r4}" [color=green3,style=dashed];
  "VarNode{<java.io.ExpiringCache: void put(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r29}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r30}" [color=green3,style=dashed];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>[8@L599] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" -> "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String next()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>[8@L599] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" -> "VarNode{<sun.util.locale.StringTokenIterator: sun.util.locale.StringTokenIterator setStart(int)>/$r2}" [color=red,style=dashed];
  "VarNode{<java.lang.SecurityManager: void checkWrite(java.lang.String)>/r2}" -> "VarNode{<java.io.FilePermission: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r69}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.EDIPartyName: java.lang.String toString()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.buffer.WrappedByteBuf: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkExternalForm(java.net.URL)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r75}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.pkcs.PKCS9Attribute: void throwSingleValuedException()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r40}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.StringCoding: char[] decode(byte[],int,int)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r107}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r55}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.CertificateExtensions: sun.security.x509.Extension get(java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r67}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.MessageDigest: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r67}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: int escape(boolean,boolean,boolean)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: void callHandlerAdded0(io.netty.channel.AbstractChannelHandlerContext)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r37}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r50}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r41}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r39}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.FloatingDecimal: int getHexDigit(java.lang.String,int)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.File: java.net.URI toURI()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r65}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.rsa.RSAUtil$KeyType: sun.security.rsa.RSAUtil$KeyType lookup(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509Key: java.security.PublicKey buildX509Key(sun.security.x509.AlgorithmId,sun.security.util.BitArray)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Signature: void initVerify(java.security.PublicKey,java.security.spec.AlgorithmParameterSpec)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.File: java.net.URI toURI()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r39}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$Node group0()>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: void checkDuplicateName(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r40}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r44}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r44}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHostString(java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class,java.lang.ClassLoader)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r62}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r47}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkUserInfo(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.MissingFormatArgumentException: java.lang.String getMessage()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Policy$2: java.security.Policy run()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.OtherName: java.lang.String toString()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r39}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.logging.LogManager$LoggerContext$1: java.lang.Void run()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.pkcs.PKCS7: void parse(sun.security.util.DerInputStream,boolean)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r45}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r43}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r49}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509Key: java.lang.String toString()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.DateFormat: java.util.Date parse(java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r41}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CRLEntryImpl: void <init>(sun.security.util.DerValue)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.jar.JarFile: boolean isKnownNotToHaveSpecialAttributes()>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: java.lang.String typeName(java.lang.Class)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Class: java.lang.String resolveName(java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r33}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.IllformedLocaleException: void <init>(java.lang.String,int)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Class: java.lang.String getCanonicalName()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: void checkDuplicateName(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r63}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.URLClassPath: sun.misc.Resource getResource(java.lang.String,boolean)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r36}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r44}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r38}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.SPILocaleProviderAdapter$1: java.util.spi.LocaleServiceProvider run()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r71}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.handler.codec.DecoderResult: java.lang.String toString()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r60}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkUserInfo(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Security: void initialize()>/$r33}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r64}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r72}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509Key: byte[] getEncodedInternal()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r36}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Policy$2: java.security.Policy run()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r31}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r35}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r114}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r83}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r68}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r58}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.jar.JarFile: boolean isKnownNotToHaveSpecialAttributes()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.calendar.CalendarSystem: java.util.Properties getCalendarProperties()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r54}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.HostLocaleProviderAdapter: java.util.spi.LocaleServiceProvider findInstalledProvider(java.lang.Class)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r61}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.URLClassPath: sun.misc.Resource getResource(java.lang.String,boolean)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.Extension: void setValue(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.KeyFactory: void <init>(java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r46}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.pkcs.PKCS9Attribute: void throwSingleValuedException()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r48}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r33}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r82}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.jar.JarFile: boolean isKnownNotToHaveSpecialAttributes()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void init()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.StringCoding: char[] decode(byte[],int,int)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger,boolean)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r31}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName(boolean)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: int escape(boolean,boolean,boolean)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.HostLocaleProviderAdapter: java.util.spi.LocaleServiceProvider findInstalledProvider(java.lang.Class)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r35}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r41}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.handler.codec.DecoderResult: java.lang.String toString()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Class: java.lang.String resolveName(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r53}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r41}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r38}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r48}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.GregorianCalendar: void computeTime()>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509Key: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r31}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r41}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.SerialNumber: java.lang.String toString()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.Locale: java.lang.String toString()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void init()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.OtherName: java.lang.String toString()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r43}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CRLEntryImpl: void <init>(sun.security.util.DerValue)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URLClassLoader: void definePackageInternal(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r44}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.Debug: void <clinit>()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r56}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Signature: void initVerify(java.security.PublicKey,java.security.spec.AlgorithmParameterSpec)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>/$r37}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String toString()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r37}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r58}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.rsa.RSAUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.security.AlgorithmParameters)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Security: void initialize()>/$r64}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: void normalize()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r35}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.jar.JarFile: boolean isKnownNotToHaveSpecialAttributes()>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509Key: java.lang.String toString()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.DateFormat: java.util.Date parse(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String,java.lang.String,sun.text.normalizer.SymbolTable)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r31}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r35}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.rsa.RSAUtil$KeyType: sun.security.rsa.RSAUtil$KeyType lookup(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.MessageDigest: java.lang.String toString()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r35}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r61}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r43}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class,java.lang.ClassLoader)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r36}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.calendar.CalendarSystem: java.util.Properties getCalendarProperties()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class,java.lang.ClassLoader)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CRLImpl: void <init>(sun.security.util.DerValue)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r51}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r62}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r31}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Security: void initialize()>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.calendar.CalendarSystem: java.util.Properties getCalendarProperties()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r44}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r48}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.PermissionCollection getPermissions(java.security.Permissions,java.security.ProtectionDomain)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getCalendarNames(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkExternalForm(java.net.URL)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.jar.Manifest: java.util.jar.Attributes getTrustedAttributes(java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.time.Instant: java.time.Instant from(java.time.temporal.TemporalAccessor)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.StringCoding: byte[] encode(char[],int,int)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r103}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509Key: byte[] getEncodedInternal()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.MessageUtils: void err(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r40}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.MissingFormatArgumentException: java.lang.String getMessage()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r54}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r55}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r36}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r77}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.jar.JarFile: boolean isKnownNotToHaveSpecialAttributes()>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: void normalize()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r60}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.security.CodeSigner[] getSigners(sun.security.pkcs.SignerInfo[],sun.security.pkcs.PKCS7)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Policy$2: java.security.Policy run()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CRLImpl: void <init>(sun.security.util.DerValue)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.MessageDigest: java.lang.String toString()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.calendar.CalendarSystem: java.util.Properties getCalendarProperties()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.SerialNumber: java.lang.String toString()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.GregorianCalendar: void computeTime()>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/$r31}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r81}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName(boolean)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r71}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r33}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r60}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.AVAKeyword: java.lang.String getKeyword(sun.security.util.ObjectIdentifier,int,java.util.Map)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r47}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.CRLExtensions: void init(sun.security.util.DerInputStream)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.CertificateExtensions: sun.security.x509.Extension get(java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r62}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.pkcs.PKCS9Attributes: byte[] decode(sun.security.util.DerInputStream)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r58}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>/$r33}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r33}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.SPILocaleProviderAdapter$1: java.util.spi.LocaleServiceProvider run()>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.calendar.CalendarSystem: java.util.Properties getCalendarProperties()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.IllegalReferenceCountException: void <init>(int,int)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.StringJoiner: java.lang.StringBuilder prepareBuilder()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r40}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r64}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509Key: java.security.PublicKey parse(sun.security.util.DerValue)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.jar.JarFile: boolean isKnownNotToHaveSpecialAttributes()>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r57}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r49}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r31}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r60}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r58}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.CRLExtensions: void init(sun.security.util.DerInputStream)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r58}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r33}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r31}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r80}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r50}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r44}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r33}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.calendar.ZoneInfoFile$1: java.lang.Object run()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Security: void initialize()>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r33}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.jar.Manifest: java.util.jar.Attributes getTrustedAttributes(java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Signature: void initVerify(java.security.PublicKey,java.security.spec.AlgorithmParameterSpec)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r55}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r82}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.Extension: void setValue(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r44}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String toString()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r59}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$Node group0()>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r47}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Signature: void initVerify(java.security.PublicKey,java.security.spec.AlgorithmParameterSpec)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r113}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r52}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r37}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509Key: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r52}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.PermissionCollection getPermissions(java.security.Permissions,java.security.ProtectionDomain)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getTimeZoneNames(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.calendar.ZoneInfoFile$1: java.lang.Object run()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r33}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.KeyFactory: void <init>(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuth(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r44}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.time.Instant: java.time.Instant from(java.time.temporal.TemporalAccessor)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r39}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r66}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r53}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r45}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class,java.lang.ClassLoader)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r36}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.IllformedLocaleException: void <init>(java.lang.String,int)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.SerialNumber: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r54}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r54}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.EDIPartyName: java.lang.String toString()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.IllegalReferenceCountException: void <init>(int,int)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r38}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Class: java.lang.String getCanonicalName()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URLClassLoader: void definePackageInternal(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r37}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r51}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r52}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.StringCoding: byte[] encode(char[],int,int)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r42}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r47}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.LanguageTag: boolean parsePrivateuse(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r46}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r63}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.AVAKeyword: java.lang.String getKeyword(sun.security.util.ObjectIdentifier,int,java.util.Map)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r53}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r66}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r74}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r56}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r39}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.EDIPartyName: java.lang.String toString()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>/$r31}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.jar.JarFile: boolean isKnownNotToHaveSpecialAttributes()>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.MissingFormatArgumentException: java.lang.String getMessage()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509Key: java.security.PublicKey parse(sun.security.util.DerValue)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r46}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.calendar.ZoneInfoFile$1: java.lang.Object run()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r45}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r33}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r47}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuth(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r35}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionDependency$2: java.io.File run()>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.pkcs.PKCS9Attribute: void throwSingleValuedException()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName(boolean)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r53}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>/$r35}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r53}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r35}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r42}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: java.lang.String typeName(java.lang.Class)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r58}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHostString(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.DateFormat: java.util.Date parse(java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r38}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r52}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: int escape(boolean,boolean,boolean)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r52}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getJavaTimeNames(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.EDIPartyName: java.lang.String toString()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r79}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String,java.lang.String,sun.text.normalizer.SymbolTable)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$Node group0()>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.SPILocaleProviderAdapter$1: java.util.spi.LocaleServiceProvider run()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r60}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r106}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r47}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r110}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.rsa.RSAUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.security.AlgorithmParameters)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r35}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r56}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.Debug: void <clinit>()>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r13}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: void <clinit>()>/$r13}" -> "VarNode{<io.netty.util.Signal: io.netty.util.Signal valueOf(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r3}" -> "InstanceFieldNode{NewObj{<java.util.Locale$Builder: void <init>()>[1@L2373] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String region>}" [color=red];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r3}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r39}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void init()>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/$r21}" -> "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/r50}" [];
  "VarNode{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>/$r9}" -> "VarNode{<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getCachedAddresses(java.lang.String)>/r7}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase()>/%this}" [color=blue];
  "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r2}" -> "InstanceFieldNode{NewObj{<java.util.Locale$Builder: void <init>()>[1@L2373] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String script>}" [color=red];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r2}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r44}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r8}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase()>/%this}" [color=blue];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r6}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>/r0}" -> "VarNode{<io.netty.util.UniqueName: void <init>(java.util.concurrent.ConcurrentMap,java.lang.String,java.lang.Object[])>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.net.InetAddress$Cache: java.net.InetAddress$Cache put(java.lang.String,java.net.InetAddress[])>/r15}" -> "VarNode{<java.util.LinkedList: boolean add(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r2}" -> "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r3}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r2}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>[7@L893] new sun.security.action.GetPropertyAction}.<sun.security.action.GetPropertyAction: java.lang.String defaultVal>}" -> "VarNode{<sun.security.action.GetPropertyAction: java.lang.String run()>/$r3}" [color=red,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r32}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r32}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.security.MessageDigest getDigest(java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r32}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r32}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r45}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkWrite(java.lang.String)>[0@L979] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r22}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkWrite(java.lang.String)>[0@L979] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: java.lang.String access$000(java.io.FilePermission)>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkWrite(java.lang.String)>[0@L979] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r30}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkWrite(java.lang.String)>[0@L979] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkWrite(java.lang.String)>[0@L979] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r9}" [color=red,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuth(java.lang.String)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuth(java.lang.String)>/$r3}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuth(java.lang.String)>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-96}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>[12@L1093] new java.util.regex.Matcher}.<java.util.regex.Matcher: java.lang.CharSequence text>}" [color=red];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ArrayList$Itr: java.lang.Object next()>/$r4}" -> "VarNode{<java.util.ServiceLoader$LazyIterator: boolean hasNextService()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.util.ArrayList$Itr: java.lang.Object next()>/$r4}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.util.ArrayList$Itr: java.lang.Object next()>/$r4}" -> "VarNode{<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.ArrayList$Itr: java.lang.Object next()>/$r4}" -> "VarNode{<java.util.Collections: void reverse(java.util.List)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.util.ArrayList$Itr: java.lang.Object next()>/$r4}" -> "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r59}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r60}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CertImpl: void <init>(sun.security.util.DerValue)>/$r8}" -> "VarNode{<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.util.LinkedHashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" -> "VarNode{<java.util.HashMap$TreeNode: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" [color=blue];
  "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/$r12}" -> "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/r13}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r9}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r10}" [color=green3,style=dashed];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String,java.lang.String,sun.text.normalizer.SymbolTable)>/r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String,java.lang.String,sun.text.normalizer.SymbolTable)>/r4}" -> "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String,java.lang.String,sun.text.normalizer.SymbolTable)>/$r3}" [color=green3,style=dashed];
  "VarNode{<java.util.GregorianCalendar: int computeFields(int,int)>/$r41}" -> "VarNode{<java.lang.AssertionError: void <init>(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.util.regex.PatternSyntaxException: void <init>(java.lang.String,java.lang.String,int)>/r1}" -> "InstanceFieldNode{MergedObj{<Merged java.util.regex.PatternSyntaxException>}.<java.util.regex.PatternSyntaxException: java.lang.String desc>}" [color=red];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>[0@L311] new sun.util.locale.BaseLocale}.<sun.util.locale.BaseLocale: java.lang.String variant>}" -> "VarNode{<sun.util.locale.BaseLocale: java.lang.String getVariant()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r7}" -> "VarNode{<java.io.ExpiringCache: void put(java.lang.String,java.lang.String)>/r5}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[22@L996] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.ChannelInboundHandlerAdapter: void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)>/msg}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>/msg}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: java.lang.CharSequence toCharSequence(java.lang.Object)>/$r1}" -> "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Object)>/$r3}" [color=blue,style=dashed];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: java.lang.CharSequence toCharSequence(java.lang.Object)>/$r1}" -> "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Object)>/r4}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.provider.CurrencyNameProviderImpl: java.lang.String getDisplayName(java.lang.String,java.util.Locale)>/$r3}" -> "VarNode{<sun.util.locale.provider.CurrencyNameProviderImpl: java.lang.String getString(java.lang.String,java.util.Locale)>/r5}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig: void <init>(java.lang.String,java.lang.String)>/r2}" -> "VarNode{<sun.security.jca.ProviderConfig: java.lang.String expand(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r11}" -> "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r11}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r11}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void <init>(java.util.Formatter,java.util.regex.Matcher)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r11}" -> "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r11}" -> "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r11}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r38}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r11}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void <init>(java.util.Formatter,java.util.regex.Matcher)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r11}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r11}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r11}" -> "VarNode{<io.netty.util.internal.PlatformDependent: long maxDirectMemory0()>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r11}" -> "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r11}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void <init>(java.util.Formatter,java.util.regex.Matcher)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r11}" -> "VarNode{<java.util.regex.Matcher: java.lang.String group()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r11}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r39}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r11}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r11}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r40}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r36}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r25}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r26}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r54}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.TreeMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.util.TreeMap$Entry)>/r2}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[3@L540] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.TreeMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.util.TreeMap$Entry)>/r2}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[47@L577] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.TreeMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.util.TreeMap$Entry)>/r2}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>[26@L2571] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" [color=red];
  "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>[20@L444] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>[20@L444] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency: java.io.File[] getExtDirs()>[20@L444] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String[] normalizedList()>/$r9}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.DefaultChannelPipeline$HeadContext: void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" -> "VarNode{<io.netty.channel.AbstractChannel$AbstractUnsafe: void write(java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r55}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r10}" -> "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r4}" [color=blue];
  "VarNode{<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>/$r4}" -> "VarNode{<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: int escape(boolean,boolean,boolean)>/$r19}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.PatternSyntaxException error(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r20}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/$r42}" -> "VarNode{<java.security.SignatureException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>[21@L272] new java.net.URL}.<java.net.URL: java.lang.String host>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r49}" [color=green3,style=dashed];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r32}" [color=green3,style=dashed];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[0@L823] new java.net.URL}.<java.net.URL: java.lang.String host>}" [color=red];
  "VarNode{<io.netty.channel.AdaptiveRecvByteBufAllocator: void <init>(int,int,int)>/$r12}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.File: java.lang.String getName()>/$r5}" -> "VarNode{<sun.misc.ExtensionDependency$2: java.io.File run()>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.io.File: java.lang.String getName()>/$r5}" -> "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.io.File: java.lang.String getName()>/$r5}" -> "VarNode{<sun.misc.ExtensionDependency$1: java.util.jar.Manifest run()>/$r7}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[40@L477] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getParent()>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[40@L477] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean isDirectory()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[40@L477] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[40@L477] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getParent()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[40@L477] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[40@L477] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[40@L477] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/r11}" -> "VarNode{<sun.security.util.AbstractAlgorithmConstraints: boolean checkAlgorithm(java.util.List,java.lang.String,sun.security.util.AlgorithmDecomposer)>/r0}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/r11}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r16}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r5}" -> "VarNode{<io.netty.util.internal.logging.Log4JLogger: void debug(java.lang.String,java.lang.Object)>/arg}" [color=blue];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r5}" -> "VarNode{<io.netty.util.internal.logging.JdkLogger: void debug(java.lang.String,java.lang.Object)>/arg}" [color=blue];
  "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>/$r6}" -> "ArrayIndexNode{NewObj{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>[15@L532] newarray java.lang.Object[%intconst0]}}" [color=red];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r45}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r46}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r10}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r9}" [color=green3,style=dashed];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r14}" -> "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r15}" [color=green3,style=dashed];
  "VarNode{<java.util.HashMap$TreeNode: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" -> "VarNode{<java.util.LinkedHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DerValue: java.lang.String getGeneralString()>/$r7}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r43}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<io.netty.channel.AdaptiveRecvByteBufAllocator: void <init>(int,int,int)>/$r7}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String,boolean)>/$r2}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String getKeyStoreUrl()>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String,boolean)>/$r2}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String getStorePassURL()>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String,boolean)>/$r2}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r18}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String,boolean)>/$r2}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URI: java.net.URI create(java.lang.String)>[0@L850] new java.net.URI}.<java.net.URI: java.lang.String authority>}" -> "VarNode{<java.net.URI: java.lang.String getAuthority()>/$r3}" [color=red,style=dashed];
  "VarNode{<java.net.URI: void appendEncoded(java.lang.StringBuffer,char)>/r6}" -> "VarNode{<java.net.URI: void appendEscape(java.lang.StringBuffer,byte)>/r0}" [color=blue];
  "VarNode{<java.net.URI: void appendEncoded(java.lang.StringBuffer,char)>/r6}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>[0@L1028] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String normalizedPattern>}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r11}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>[0@L1028] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String normalizedPattern>}" -> "VarNode{<java.util.regex.Pattern: void normalize()>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>[0@L1028] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String normalizedPattern>}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.PatternSyntaxException error(java.lang.String)>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>[0@L1028] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String normalizedPattern>}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>[0@L1028] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String normalizedPattern>}" -> "VarNode{<java.util.regex.Pattern: void normalize()>/$r13}" [color=red,style=dashed];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r2}" -> "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r10}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry: java.lang.Object getValue()>/$r1}" -> "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r47}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[25@L75] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" -> "VarNode{<io.netty.handler.codec.http.HttpMethod: java.lang.String name()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>[12@L280] new io.netty.channel.AbstractChannelHandlerContext$7}.<io.netty.channel.AbstractChannelHandlerContext$7: java.lang.Object val$msg>}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext$7: void run()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void init()>/$r11}" -> "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void init()>/$r12}" [color=green3,style=dashed];
  "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r16}" -> "VarNode{<java.lang.SecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r21}" -> "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r22}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r21}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[0@L1368] new java.net.URL}.<java.net.URL: java.lang.String file>}" -> "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[55@L204] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[55@L204] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r33}" -> "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r34}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r4}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String getScript()>/$r1}" -> "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r7}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String getScript()>/$r1}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r16}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.PolicyUtil: java.io.InputStream getInputStream(java.net.URL)>/$r4}" -> "VarNode{<sun.security.util.PolicyUtil: java.io.InputStream getInputStream(java.net.URL)>/$r5}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.PolicyUtil: java.io.InputStream getInputStream(java.net.URL)>/$r4}" -> "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask: void execute()>/$r11}" -> "ArrayIndexNode{NewObj{<io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask: void execute()>[17@L1382] newarray java.lang.Object[%intconst1]}}" [color=red];
  "VarNode{<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String,int)>/r1}" -> "VarNode{<java.lang.Exception: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/r8}" -> "ArrayIndexNode{NewObj{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>[20@L1417] newarray java.lang.Object[%intconst5]}}" [color=red];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/r8}" -> "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r7}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry: void <init>(io.netty.handler.codec.http.DefaultHttpHeaders,int,java.lang.CharSequence,java.lang.CharSequence)>/value}" -> "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.DefaultHttpHeaders: void add0(int,int,java.lang.CharSequence,java.lang.CharSequence)>[3@L142] new io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry}.<io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry: java.lang.CharSequence value>}" [color=red];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/r37}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.MimeType: java.lang.String parseSuffix(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r26}" -> "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r27}" [color=green3,style=dashed];
  "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>[36@L898] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: java.lang.String getProtocol()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>[36@L898] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>[36@L898] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r12}" -> "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r13}" [];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r20}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r21}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r20}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$Loader: sun.misc.Resource getResource(java.lang.String,boolean)>[0@L738] new java.net.URL}.<java.net.URL: java.lang.String host>}" -> "VarNode{<java.net.URL: java.lang.String getHost()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.net.SocketPermission: void getIP()>/$r4}" -> "VarNode{<java.net.SocketPermission: void getIP()>/r11}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: void getIP()>/$r4}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.security.SecureClassLoader: java.security.ProtectionDomain getProtectionDomain(java.security.CodeSource)>/$r12}" -> "VarNode{<java.security.SecureClassLoader: java.security.ProtectionDomain getProtectionDomain(java.security.CodeSource)>/$r13}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.UnicodeLocaleExtension: void <clinit>()>[5@L50] new sun.util.locale.UnicodeLocaleExtension}.<sun.util.locale.Extension: java.lang.String value>}" -> "VarNode{<sun.util.locale.Extension: java.lang.String getValue()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r113}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/$r4}" -> "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/r22}" [];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)>/$r5}" -> "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)>/$r6}" [];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getDisplayNameImpl(java.lang.String,int,int,int,java.util.Locale,boolean)>/$r17}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getJavaTimeNames(java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getDisplayNameImpl(java.lang.String,int,int,int,java.util.Locale,boolean)>/$r17}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getCalendarNames(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r9}" -> "VarNode{<java.util.MissingFormatArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.jar.JarFile: boolean isKnownNotToHaveSpecialAttributes()>/$r30}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>[74@L132] new sun.security.x509.IPAddressName}.<sun.security.x509.IPAddressName: java.lang.String name>}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r33}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>[74@L132] new sun.security.x509.IPAddressName}.<sun.security.x509.IPAddressName: java.lang.String name>}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r26}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>[74@L132] new sun.security.x509.IPAddressName}.<sun.security.x509.IPAddressName: java.lang.String name>}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>[74@L132] new sun.security.x509.IPAddressName}.<sun.security.x509.IPAddressName: java.lang.String name>}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r38}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253Name(java.util.Map)>/$r6}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253Name()>/$r2}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[3@L540] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" -> "VarNode{<java.util.TreeMap: void deleteEntry(java.util.TreeMap$Entry)>/$r19}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[3@L540] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" -> "VarNode{<java.util.TreeMap: java.lang.Object get(java.lang.Object)>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[3@L540] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.Object getValue()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[3@L540] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkLink(java.lang.String)>[5@L835] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkLink(java.lang.String)>[5@L835] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask: void init(io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask,io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" -> "InstanceFieldNode{NewObj{<io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask$1: io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask newObject(io.netty.util.Recycler$Handle)>[0@L939] new io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask}.<io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask: java.lang.Object msg>}" [color=red];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask: void init(io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask,io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" -> "InstanceFieldNode{NewObj{<io.netty.channel.AbstractChannelHandlerContext$WriteTask$1: io.netty.channel.AbstractChannelHandlerContext$WriteTask newObject(io.netty.util.Recycler$Handle)>[0@L913] new io.netty.channel.AbstractChannelHandlerContext$WriteTask}.<io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask: java.lang.Object msg>}" [color=red];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String toString()>/$r4}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String toString()>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.util.ArrayList: void rangeCheckForAdd(int)>/$r2}" -> "VarNode{<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: void <init>()>[34@L179] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String argument>}" -> "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r6}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>[20@L60] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>[20@L60] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>[20@L60] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[42@L225] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" -> "VarNode{<java.lang.ref.Reference: java.lang.Object get()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r62}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r64}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r65}" [color=green3,style=dashed];
  "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/r9}" -> "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r56}" [color=blue,style=dashed];
  "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/r9}" -> "VarNode{<java.security.KeyStore$1: java.lang.String run()>/$r0}" [color=blue,style=dashed];
  "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/r9}" -> "VarNode{<sun.security.util.AbstractAlgorithmConstraints$1: java.lang.String run()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/r9}" -> "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/r9}" -> "VarNode{<sun.net.InetAddressCachePolicy$1: java.lang.Integer run()>/$r0}" [color=blue,style=dashed];
  "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/r9}" -> "VarNode{<java.lang.SecurityManager$1: java.lang.String run()>/$r0}" [color=blue,style=dashed];
  "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/r9}" -> "VarNode{<java.security.Policy$1: java.lang.String run()>/$r0}" [color=blue,style=dashed];
  "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/r9}" -> "VarNode{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/r9}" -> "VarNode{<sun.net.InetAddressCachePolicy$2: java.lang.Integer run()>/$r0}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void <init>(java.lang.String,sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator,int)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>[98@L383] new sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint}.<sun.security.util.DisabledAlgorithmConstraints$Constraint: java.lang.String algorithm>}" [color=red];
  "VarNode{<java.util.SimpleTimeZone: void decodeStartRule()>/$r26}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.DecimalFormatSymbolsProviderImpl: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>[4@L85] new java.text.DecimalFormatSymbols}.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol>}" -> "VarNode{<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>/$r28}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.DecimalFormatSymbolsProviderImpl: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>[4@L85] new java.text.DecimalFormatSymbols}.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol>}" -> "VarNode{<java.text.DecimalFormatSymbols: java.lang.String getCurrencySymbol()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.Signature: java.security.Signature getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>[10@L288] new java.security.Signature$Delegate}.<java.security.Signature: java.lang.String algorithm>}" -> "VarNode{<java.security.Signature: java.lang.String getAlgorithm()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.Signature: java.security.Signature getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>[10@L288] new java.security.Signature$Delegate}.<java.security.Signature: java.lang.String algorithm>}" -> "VarNode{<java.security.Signature: void initVerify(java.security.PublicKey,java.security.spec.AlgorithmParameterSpec)>/$r7}" [color=red,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r11}" -> "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r12}" [color=green3,style=dashed];
  "VarNode{<java.net.URI: java.net.URI create(java.lang.String)>/$r4}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URI$Parser: void fail(java.lang.String,int)>/r2}" -> "VarNode{<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String,int)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>[93@L122] new sun.util.locale.UnicodeLocaleExtension}.<sun.util.locale.Extension: java.lang.String value>}" -> "VarNode{<sun.util.locale.Extension: java.lang.String getValue()>/$r1}" [color=red,style=dashed];
  "VarNode{<org.fengfei.lanproxy.server.config.web.ApiRoute: org.fengfei.lanproxy.server.config.web.ResponseInfo run(io.netty.handler.codec.http.FullHttpRequest)>/$r4}" -> "VarNode{<java.net.URI: void <init>(java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.Parts: void <init>(java.lang.String)>/$r5}" -> "InstanceFieldNode{NewObj{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>[52@L408] new java.net.Parts}.<java.net.Parts: java.lang.String path>}" [color=red];
  "VarNode{<java.net.Parts: void <init>(java.lang.String)>/$r5}" -> "VarNode{<java.net.Parts: void <init>(java.lang.String)>/$r1}" [color=green3,style=dashed];
  "VarNode{<java.net.Parts: void <init>(java.lang.String)>/$r5}" -> "VarNode{<java.net.Parts: void <init>(java.lang.String)>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.net.Parts: void <init>(java.lang.String)>/$r5}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.net.Parts: void <init>(java.lang.String)>/$r5}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>[8@L599] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" -> "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String current()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.Security: void initialize()>[118@L147] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.Security: void initialize()>[118@L147] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "VarNode{<java.util.ServiceLoader: void access$100(java.lang.Class,java.lang.String,java.lang.Throwable)>/r1}" -> "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>/r6}" [color=blue];
  "VarNode{<io.netty.util.concurrent.BlockingOperationException: void <init>(java.lang.String)>/s}" -> "VarNode{<java.lang.IllegalStateException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r4}" -> "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r6}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Currency$1: java.lang.Void run()>[106@L257] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Currency$1: java.lang.Void run()>[106@L257] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Currency$1: java.lang.Void run()>[106@L257] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Currency$1: java.lang.Void run()>[106@L257] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String internalize(java.lang.String)>/r0}" -> "VarNode{<sun.reflect.AccessorGenerator: java.lang.String internalize(java.lang.String)>/$r1}" [color=green3,style=dashed];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String internalize(java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" [color=blue];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r3}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27799}" [];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r3}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27801}" [];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Locale: java.util.Locale initDefault()>/r14}" -> "VarNode{<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>/r3}" [color=blue];
  "VarNode{<java.lang.System: java.lang.String getenv(java.lang.String)>/$r7}" -> "VarNode{<java.lang.RuntimePermission: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.action.GetPropertyAction: java.lang.Object run()>/$r1}" -> "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r17}" [color=blue,style=dashed];
  "VarNode{<sun.security.action.GetPropertyAction: java.lang.Object run()>/$r1}" -> "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r23}" [color=blue,style=dashed];
  "VarNode{<sun.security.action.GetPropertyAction: java.lang.Object run()>/$r1}" -> "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r11}" [color=blue,style=dashed];
  "VarNode{<sun.security.action.GetPropertyAction: java.lang.Object run()>/$r1}" -> "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r101}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>[13@L181] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String dn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String toString()>/$r2}" [color=red,style=dashed];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r29}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r11}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r10}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r114}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r115}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getAbsoluteFile()>[7@L581] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getAbsoluteFile()>[7@L581] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean isDirectory()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getAbsoluteFile()>[7@L581] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getAbsoluteFile()>[7@L581] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.UnparseableExtension: void <init>(sun.security.x509.Extension,java.lang.Throwable)>/$r12}" -> "InstanceFieldNode{NewObj{<sun.security.x509.CertificateExtensions: void parseExtension(sun.security.x509.Extension)>[50@L124] new sun.security.x509.UnparseableExtension}.<sun.security.x509.UnparseableExtension: java.lang.String name>}" [color=red];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r63}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.regex.Matcher: void <init>(java.util.regex.Pattern,java.lang.CharSequence)>/r2}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>[12@L1093] new java.util.regex.Matcher}.<java.util.regex.Matcher: java.lang.CharSequence text>}" [color=red];
  "InstanceFieldNode{NewObj{<java.util.logging.LogManager: void readConfiguration()>[44@L1297] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r8}" [color=red,style=dashed];
  "VarNode{<java.util.jar.JarFile: byte[] getBytes(java.util.zip.ZipEntry)>/$r15}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int)>/poolName}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int)>/poolName}" -> "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r51}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r51}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<java.net.Parts: void <init>(java.lang.String)>/r3}" -> "VarNode{<java.net.Parts: void <init>(java.lang.String)>/$r5}" [];
  "VarNode{<java.net.Parts: void <init>(java.lang.String)>/r3}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.net.Parts: void <init>(java.lang.String)>/r3}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r2}" -> "InstanceFieldNode{NewObj{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>[21@L272] new java.net.URL}.<java.net.URL: java.lang.String file>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r2}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[0@L823] new java.net.URL}.<java.net.URL: java.lang.String file>}" [color=red];
  "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/$r12}" -> "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/$r13}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Locale$Builder: void <init>()>[1@L2373] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String variant>}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r14}" [color=red,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.AlgorithmDecomposer: java.util.Set decomposeImpl(java.lang.String)>/r7}" -> "VarNode{<java.util.HashSet: boolean add(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/$r31}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String parentOrNull(java.lang.String)>/$r1}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String parentOrNull(java.lang.String)>/$r1}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/r14}" -> "VarNode{<sun.security.util.SignatureUtil: java.lang.String checkName(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: java.util.Locale[] getAvailableLocales()>/r5}" -> "VarNode{<java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.String resolveName(java.lang.String)>/$r7}" -> "VarNode{<java.lang.Class: java.lang.String resolveName(java.lang.String)>/r8}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String userInfo>}" -> "VarNode{<java.net.URI: void defineString()>/$r17}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.util.concurrent.PromiseTask: java.util.concurrent.Callable toCallable(java.lang.Runnable,java.lang.Object)>[0@L24] new io.netty.util.concurrent.PromiseTask$RunnableAdapter}.<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.Object result>}" -> "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.Object call()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.util.concurrent.PromiseTask: java.util.concurrent.Callable toCallable(java.lang.Runnable,java.lang.Object)>[0@L24] new io.netty.util.concurrent.PromiseTask$RunnableAdapter}.<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.Object result>}" -> "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r6}" [color=red,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-144}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>[12@L1093] new java.util.regex.Matcher}.<java.util.regex.Matcher: java.lang.CharSequence text>}" [color=red];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r53}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r54}" [color=green3,style=dashed];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r9}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.TreeSet: boolean add(java.lang.Object)>/r1}" -> "VarNode{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r2}" [color=blue];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r24}" -> "VarNode{<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>/r3}" [color=blue];
  "VarNode{<java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>/$r3}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String getDateTimePattern(java.lang.String,int,int,java.lang.String)>/r16}" [color=blue,style=dashed];
  "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r58}" -> "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r59}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r22}" -> "VarNode{<io.netty.util.internal.logging.Log4JLogger: void debug(java.lang.String,java.lang.Object)>/arg}" [color=blue];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r22}" -> "VarNode{<io.netty.util.internal.logging.JdkLogger: void debug(java.lang.String,java.lang.Object)>/arg}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r34}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r35}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r16}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r17}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r18}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r18}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r18}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r18}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.AdaptiveRecvByteBufAllocator: void <init>(int,int,int)>/$r17}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r7}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control$1: java.io.InputStream run()>/$r3}" -> "VarNode{<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control$1: java.io.InputStream run()>/$r3}" -> "VarNode{<java.util.ResourceBundle$RBClassLoader: java.net.URL getResource(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r10}" -> "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>[0@L311] new sun.util.locale.BaseLocale}.<sun.util.locale.BaseLocale: java.lang.String region>}" [color=red];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r43}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.Extension: void setValue(java.lang.String)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[56@L231] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" -> "VarNode{<java.lang.ref.Reference: java.lang.Object get()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.math.BigInteger: void <clinit>()>/$r70}" -> "ArrayIndexNode{NewObj{<java.math.BigInteger: void <clinit>()>[195@L3938] newarray java.lang.String[%intconst86]}}" [color=red];
  "VarNode{<java.lang.Double: java.lang.String toHexString(double)>/$r7}" -> "VarNode{<java.lang.Double: java.lang.String toHexString(double)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.lang.Double: java.lang.String toHexString(double)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<java.lang.Double: java.lang.String toHexString(double)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.Double: java.lang.String toHexString(double)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/$r14}" -> "VarNode{<sun.security.pkcs.SignerInfo: java.util.Set verifyAlgorithms(sun.security.pkcs.SignerInfo[],sun.security.util.JarConstraintsParameters,java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/$r14}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/$r14}" -> "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/$r20}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/$r14}" -> "VarNode{<sun.security.pkcs.SignerInfo: java.util.Set verifyAlgorithms(sun.security.pkcs.SignerInfo[],sun.security.util.JarConstraintsParameters,java.lang.String)>/$r14}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/$r14}" -> "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/$r14}" -> "VarNode{<sun.security.x509.AlgorithmId: void decodeParams()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/$r14}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/$r11}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/$r14}" -> "VarNode{<sun.security.x509.X509Key: java.security.PublicKey buildX509Key(sun.security.x509.AlgorithmId,sun.security.util.BitArray)>/$r25}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/$r14}" -> "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/$r14}" -> "VarNode{<sun.security.x509.X509Key: java.security.PublicKey buildX509Key(sun.security.x509.AlgorithmId,sun.security.util.BitArray)>/$r5}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" -> "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" -> "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r3}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" -> "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r10}" [color=green3,style=dashed];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r34}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.util.Vector: void addElement(java.lang.Object)>/r2}" -> "ArrayIndexNode{NewObj{<java.util.Vector: void <init>(int,int)>[12@L138] newarray java.lang.Object[i0]}}" [color=red];
  "VarNode{<java.util.Vector: void addElement(java.lang.Object)>/r2}" -> "ArrayIndexNode{NewObj{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>[2@L3210] newarray java.lang.Object[i0]}}" [color=red];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r11}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuthority(java.net.URL)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/r37}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: java.lang.String removePrivateuseVariant(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/r37}" -> "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.util.logging.PlatformLogger: void <init>(java.lang.String)>/r2}" -> "VarNode{<sun.util.logging.PlatformLogger$JavaLoggerProxy: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.logging.PlatformLogger: void <init>(java.lang.String)>/r2}" -> "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/$r11}" -> "VarNode{<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>/r1}" [color=blue];
  "VarNode{<sun.reflect.AccessorGenerator: short unboxingMethodForPrimitiveType(java.lang.Class)>/$r14}" -> "VarNode{<java.lang.InternalError: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getJavaTimeNames(java.lang.String)>/r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getJavaTimeNames(java.lang.String)>/r2}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getJavaTimeNames(java.lang.String)>/$r1}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getJavaTimeNames(java.lang.String)>/r2}" -> "VarNode{<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: void getCanonName()>/$r8}" -> "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[134@L444] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String cname>}" [color=red];
  "VarNode{<java.net.SocketPermission: void getCanonName()>/$r8}" -> "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[140@L447] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String cname>}" [color=red];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r73}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/r72}" [];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r73}" -> "VarNode{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r59}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r17}" -> "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r16}" [color=green3,style=dashed];
  "VarNode{<java.net.URI: void defineString()>/$r19}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void defineString()>/$r19}" -> "VarNode{<java.net.URI: void defineString()>/$r22}" [color=green3,style=dashed];
  "VarNode{<sun.util.calendar.ZoneInfoFile$1: java.lang.Object run()>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r7}" -> "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/%taint-temp-24054}" [];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: void parse(sun.security.util.DerValue)>[39@L659] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String dn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String toString()>/$r2}" [color=red,style=dashed];
  "VarNode{<java.math.BigInteger: void toString(java.math.BigInteger,java.lang.StringBuilder,int,int)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.math.BigInteger: void toString(java.math.BigInteger,java.lang.StringBuilder,int,int)>/$r8}" -> "VarNode{<java.math.BigInteger: void toString(java.math.BigInteger,java.lang.StringBuilder,int,int)>/r5}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.stream.ChunkedNioFile: void <init>(java.nio.channels.FileChannel,long,long,int)>/$r19}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r38}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.util.Debug: java.lang.String marshal(java.lang.String)>/$r22}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureUtil: java.security.AlgorithmParameters createAlgorithmParameters(java.lang.String,byte[])>/r5}" -> "VarNode{<sun.security.util.SignatureUtil: java.lang.String checkName(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,boolean)>/$c3}" -> "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,boolean)>/r1}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r33}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "VarNode{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>/r43}" -> "VarNode{<javax.crypto.CryptoPermission: void <init>(java.lang.String,int,java.security.spec.AlgorithmParameterSpec,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r17}" -> "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r3}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Locale$Builder: void <init>()>[1@L2373] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String script>}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r2}" [color=red,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r7}" -> "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r17}" -> "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r18}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$c8}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/r75}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$c8}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r58}" [color=green3,style=dashed];
  "VarNode{<java.util.Collections: java.util.Iterator singletonIterator(java.lang.Object)>/r1}" -> "VarNode{<java.util.Collections$1: void <init>(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/r1}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r18}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/r1}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/r89}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r19}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/r89}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "VarNode{<io.netty.buffer.ByteBufUtil: void <clinit>()>/$r7}" -> "VarNode{<io.netty.util.internal.logging.Log4JLogger: void debug(java.lang.String,java.lang.Object)>/arg}" [color=blue];
  "VarNode{<io.netty.buffer.ByteBufUtil: void <clinit>()>/$r7}" -> "VarNode{<io.netty.util.internal.logging.JdkLogger: void debug(java.lang.String,java.lang.Object)>/arg}" [color=blue];
  "InstanceFieldNode{NewObj{<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>[1@L3791] new java.text.DigitList}.<java.text.DigitList: char[] digits>}" -> "VarNode{<java.text.DigitList: long getLong()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>[1@L3791] new java.text.DigitList}.<java.text.DigitList: char[] digits>}" -> "VarNode{<java.text.DigitList: double getDouble()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>[1@L3791] new java.text.DigitList}.<java.text.DigitList: char[] digits>}" -> "VarNode{<java.text.DigitList: void set(boolean,java.math.BigInteger,int)>/$r3}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.security.cert.Certificate[] getCertificates(java.security.KeyStore,java.lang.String,sun.security.provider.PolicyFile$PolicyInfo)>/$r3}" -> "VarNode{<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r2}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.cert.Certificate[] getCertificates(java.security.KeyStore,java.lang.String,sun.security.provider.PolicyFile$PolicyInfo)>/$r3}" -> "VarNode{<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r3}" [color=blue];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r19}" -> "VarNode{<java.lang.Throwable$WrappedPrintStream: void println(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r19}" -> "VarNode{<java.lang.Throwable$WrappedPrintWriter: void println(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHostString(java.lang.String)>/$r6}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkExternalForm(java.net.URL)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r16}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r21}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.math.BigInteger: void implSquareToLenChecks(int[],int,int[],int)>/$r27}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r112}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r112}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r110}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.jar.JarFile: java.util.zip.ZipEntry getEntry(java.lang.String)>[2@L253] new java.util.jar.JarFile$JarFileEntry}.<java.util.zip.ZipEntry: java.lang.String name>}" -> "VarNode{<java.util.zip.ZipEntry: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>[83@L377] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" -> "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.StringJoiner: java.lang.StringBuilder prepareBuilder()>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.StringJoiner: java.lang.StringBuilder prepareBuilder()>/$r3}" -> "VarNode{<java.util.StringJoiner: java.lang.StringBuilder prepareBuilder()>/$r2}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r55}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r68}" -> "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r69}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r11}" -> "VarNode{<java.security.SignatureException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r3}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r36}" [];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r26}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r29}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r14}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r28}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r16}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r20}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r21}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r30}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r13}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r15}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r23}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r18}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r19}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r22}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r17}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String toString()>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String toString()>/$r3}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String toString()>/$r1}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.logging.Log4JLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" [color=blue];
  "VarNode{<io.netty.util.IllegalReferenceCountException: void <init>(java.lang.String)>/message}" -> "VarNode{<java.lang.IllegalStateException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: java.lang.String toString()>/$r1}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r30}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r81}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r21}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/r51}" [];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r21}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r27}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r21}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r39}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r21}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r21}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/$r12}" -> "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/$r13}" [color=green3,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: byte[] textToNumericFormatV6(java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.io.File: java.lang.String getName()>/$r3}" -> "VarNode{<sun.misc.ExtensionDependency$2: java.io.File run()>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.io.File: java.lang.String getName()>/$r3}" -> "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.io.File: java.lang.String getName()>/$r3}" -> "VarNode{<sun.misc.ExtensionDependency$1: java.util.jar.Manifest run()>/$r7}" [color=blue,style=dashed];
  "VarNode{<sun.misc.MessageUtils: void err(java.lang.String)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r16}" -> "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[61@L1837] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r16}" -> "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[82@L1848] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r16}" -> "InstanceFieldNode{NewObj{<sun.util.calendar.ZoneInfoFile$1: java.lang.Object run()>[13@L255] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r16}" -> "InstanceFieldNode{NewObj{<java.util.logging.LogManager: void readConfiguration()>[44@L1297] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r16}" -> "InstanceFieldNode{NewObj{<sun.security.util.AnchorCertificates$1: java.lang.Void run()>[0@L57] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/r1}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/$r3}" [color=green3,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/r1}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/r1}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/r1}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/$c3}" [color=green3,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r40}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r40}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r0}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.X500Name: void parseDER(sun.security.util.DerInputStream)>[27@L802] new sun.security.x509.RDN}.<sun.security.x509.RDN: java.lang.String canonicalString>}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253String(boolean)>/r5}" [color=red,style=dashed];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r33}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[77@L148] new java.net.URL}.<java.net.URL: java.lang.String file>}" -> "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[79@L228] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String actions>}" -> "VarNode{<java.net.SocketPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.RDN: java.lang.String toString()>/$r4}" -> "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r12}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.RDN: java.lang.String toString()>/$r4}" -> "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r9}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.RDN: java.lang.String toString()>/$r4}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.Vector: void removeElementAt(int)>/$r10}" -> "VarNode{<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r13}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.jar.Manifest: java.util.jar.Attributes getTrustedAttributes(java.lang.String)>/$r8}" -> "VarNode{<java.util.jar.Manifest: java.util.jar.Attributes getTrustedAttributes(java.lang.String)>/$r9}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String host>}" -> "VarNode{<java.net.URI: void defineString()>/$r14}" [color=red,style=dashed];
  "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r8}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher$ExtClassLoader: java.net.URL[] getExtURLs(java.io.File[])>[16@L204] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean isDirectory()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher$ExtClassLoader: java.net.URL[] getExtURLs(java.io.File[])>[16@L204] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher$ExtClassLoader: java.net.URL[] getExtURLs(java.io.File[])>[16@L204] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher$ExtClassLoader: java.net.URL[] getExtURLs(java.io.File[])>[16@L204] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r6}" -> "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r19}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r20}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r26}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r75}" -> "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r76}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: java.lang.String toPattern(boolean)>/$r4}" -> "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/r8}" [color=blue];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r10}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r11}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: java.lang.String toPattern(boolean)>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r55}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[42@L452] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" -> "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.net.RegisteredDomain: java.lang.String getRegisteredDomain(java.lang.String)>/r49}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<sun.net.RegisteredDomain: java.lang.String getRegisteredDomain(java.lang.String)>/r49}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.net.RegisteredDomain: java.lang.String getRegisteredDomain(java.lang.String)>/r49}" -> "VarNode{<sun.net.RegisteredDomain: java.lang.String getRegisteredDomain(java.lang.String)>/$r48}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r33}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r33}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-82}" [];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r33}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r33}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-80}" [];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r33}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/r3}" [color=green3,style=dashed];
  "VarNode{<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r16}" -> "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/r17}" [];
  "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String,int)>/%this}" -> "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String,int)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String,int)>/%this}" -> "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String,int)>/$r11}" [color=green3,style=dashed];
  "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String,int)>/%this}" -> "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String,int)>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String,int)>/%this}" -> "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[82@L2364] newarray java.lang.String[%intconst0]}}" [color=red];
  "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String,int)>/%this}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/r2}" [color=blue];
  "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String,int)>/%this}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: void <init>()>[43@L183] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String className>}" -> "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: void <init>()>[43@L183] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String className>}" -> "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: void <init>()>[43@L183] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String className>}" -> "VarNode{<sun.security.jca.ProviderConfig: java.lang.String access$100(sun.security.jca.ProviderConfig)>/$r1}" [color=red,style=dashed];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r0}" -> "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/$r13}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<io.netty.buffer.ByteBufUtil: void <clinit>()>/$r6}" -> "VarNode{<io.netty.buffer.ByteBufUtil: void <clinit>()>/$r7}" [color=green3,style=dashed];
  "VarNode{<io.netty.buffer.ByteBufUtil: void <clinit>()>/$r6}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[0@L823] new java.net.URL}.<java.net.URL: java.lang.String path>}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r16}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[0@L823] new java.net.URL}.<java.net.URL: java.lang.String path>}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r2}" [color=red,style=dashed];
  "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r25}" -> "VarNode{<java.util.Currency: void info(java.lang.String,java.lang.Throwable)>/r3}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>[21@L272] new java.net.URL}.<java.net.URL: java.lang.String query>}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r19}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.PropertyPermissionCollection: void add(java.security.Permission)>[31@L483] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toTitleString(java.lang.String)>/r0}" -> "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeScript(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toTitleString(java.lang.String)>/r0}" -> "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toTitleString(java.lang.String)>/r0}" -> "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/r4}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,char[],java.util.Formatter$Flags,int,java.util.Locale)>/r11}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/r4}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/r4}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/%this}" [color=blue];
  "VarNode{<java.util.Properties: java.lang.String getProperty(java.lang.String)>/$r2}" -> "VarNode{<java.util.Properties: java.lang.String getProperty(java.lang.String)>/$r6}" [];
  "VarNode{<java.lang.RuntimePermission: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.security.BasicPermission: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r28}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/$r5}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/$r5}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/$r5}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.util.Calendar,char,java.util.Locale)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/$r5}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(long,java.util.Locale)>/$r40}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/$r5}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.math.BigInteger,java.util.Locale)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/$r5}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(double,java.util.Locale)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/$r5}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.math.BigDecimal,java.util.Locale)>/$r9}" [color=blue,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.io.FileNotFoundException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r34}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[47@L577] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[47@L577] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.Object getKey()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[47@L577] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" -> "VarNode{<java.util.TreeMap$KeyIterator: java.lang.Object next()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[47@L577] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" -> "VarNode{<java.util.TreeMap: void deleteEntry(java.util.TreeMap$Entry)>/$r18}" [color=red,style=dashed];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r38}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/r2}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigInteger,java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean)>/r3}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/r2}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/r5}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r5}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/$r6}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.util.MissingFormatWidthException>}.<java.util.MissingFormatWidthException: java.lang.String s>}" -> "VarNode{<java.util.MissingFormatWidthException: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<io.netty.buffer.AbstractByteBuf: java.lang.String toString()>/$r18}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<io.netty.buffer.AbstractByteBuf: java.lang.String toString()>/$r18}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<io.netty.buffer.AbstractByteBuf: java.lang.String toString()>/$r18}" -> "VarNode{<io.netty.buffer.WrappedByteBuf: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>/$r38}" -> "VarNode{<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r17}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/r87}" [];
  "VarNode{<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>/r7}" -> "VarNode{<sun.misc.JarIndex: void addMapping(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addPerms(java.security.Permissions,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r14}" -> "VarNode{<sun.security.provider.PolicyFile: void addPerms(java.security.Permissions,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r15}" [color=green3,style=dashed];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r52}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r52}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r51}" [color=green3,style=dashed];
  "VarNode{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>/$r32}" -> "VarNode{<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>/$r3}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>/$r3}" -> "VarNode{<java.net.URI: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>/r2}" [color=green3,style=dashed];
  "VarNode{<java.util.HashMap: void <init>(int,float)>/$r5}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.Log4JLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>/argA}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>/argA}" [color=blue];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>/r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>/r3}" -> "VarNode{<java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>/$r2}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r103}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r1}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r58}" [];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: java.lang.String toString()>/$r6}" -> "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r38}" -> "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[0@L417] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String region>}" [color=red];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getEncAlgFromSigAlg(java.lang.String)>/r3}" -> "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.text.AttributedString: java.lang.Object access$400(java.text.AttributedString,java.text.AttributedCharacterIterator$Attribute,int,int,int)>/$r2}" -> "VarNode{<java.text.AttributedString$AttributedStringIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.text.AttributedString: java.lang.Object access$400(java.text.AttributedString,java.text.AttributedCharacterIterator$Attribute,int,int,int)>/$r2}" -> "VarNode{<java.text.AttributedString$AttributeMap: java.util.Set entrySet()>/$r17}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r32}" -> "InstanceFieldNode{NewObj{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>[74@L132] new sun.security.x509.IPAddressName}.<sun.security.x509.IPAddressName: java.lang.String name>}" [color=red];
  "VarNode{<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>/$r31}" -> "VarNode{<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>/$r32}" [];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[44@L684] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r56}" -> "VarNode{<java.lang.SecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureUtil: java.security.AlgorithmParameters createAlgorithmParameters(java.lang.String,byte[])>/$r0}" -> "VarNode{<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getLanguage()>/$r1}" -> "VarNode{<java.util.Locale: java.lang.String toString()>/$r22}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getLanguage()>/$r1}" -> "VarNode{<java.util.Locale: java.lang.String getLanguage()>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getLanguage()>/$r1}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getLanguage()>/$r1}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getLanguage()>/$r1}" -> "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Vector: java.lang.Object elementData(int)>/$r2}" -> "VarNode{<java.util.Vector: java.lang.Object elementAt(int)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.Vector: java.lang.Object elementData(int)>/$r2}" -> "VarNode{<java.util.Vector: java.lang.Object get(int)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.net.URI: void defineString()>/$r22}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<java.net.URI: void defineString()>/$r22}" -> "VarNode{<java.net.URI: void defineString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.net.URI: void defineString()>/$r22}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(int)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r79}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>/$r13}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName0(java.lang.String,java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.net.InetAddress: void <clinit>()>/$r36}" -> "VarNode{<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void <init>(java.util.Formatter,java.util.regex.Matcher)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: int width(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.DNSName: java.lang.String toString()>/$r5}" -> "VarNode{<sun.security.x509.GeneralName: java.lang.String toString()>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/$r7}" -> "VarNode{<java.lang.InternalError: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.SimpleDateFormat: void initialize(java.util.Locale)>/$r1}" -> "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.util.logging.PlatformLogger: void info(java.lang.String)>/r1}" -> "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>/r3}" [color=blue];
  "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.pkcs.PKCS7: void parse(sun.security.util.DerInputStream,boolean)>/$r19}" -> "VarNode{<sun.security.pkcs.ParsingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[134@L444] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String hostname>}" -> "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r19}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[134@L444] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String hostname>}" -> "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[134@L444] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String hostname>}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r14}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[134@L444] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String hostname>}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[38@L222] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" -> "VarNode{<java.lang.ref.Reference: java.lang.Object get()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r22}" -> "VarNode{<java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.resources.LocaleData: sun.util.resources.OpenListResourceBundle getCurrencyNames(java.util.Locale)>/$r6}" -> "VarNode{<sun.util.resources.LocaleData: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: byte[] getEncodedInfo()>/$r12}" -> "VarNode{<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FixedString: java.lang.String toString()>/$r1}" -> "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FixedString: java.lang.String toString()>/$r1}" -> "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FixedString: java.lang.String toString()>/$r1}" -> "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FixedString: java.lang.String toString()>/$r1}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String substring(int)>/$r1}" -> "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.util.Currency: java.util.Currency getInstance(java.util.Locale)>/$r22}" -> "VarNode{<java.util.Currency: java.util.Currency getInstance(java.util.Locale)>/$r16}" [color=green3,style=dashed];
  "VarNode{<java.util.Currency: java.util.Currency getInstance(java.util.Locale)>/$r22}" -> "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Currency: java.util.Currency getInstance(java.util.Locale)>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/r2}" -> "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/$r7}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.ApiRoute: org.fengfei.lanproxy.server.config.web.ResponseInfo run(io.netty.handler.codec.http.FullHttpRequest)>[9@L74] new java.net.URI}.<java.net.URI: java.lang.String path>}" -> "VarNode{<java.net.URI: java.lang.String getPath()>/$r3}" [color=red,style=dashed];
  "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/$r34}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/r35}" [];
  "VarNode{<sun.security.x509.CertificateExtensions: void parseExtension(sun.security.x509.Extension)>/$r37}" -> "VarNode{<sun.security.x509.CertificateExtensions: void parseExtension(sun.security.x509.Extension)>/$r38}" [color=green3,style=dashed];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r54}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form)>/r0}" -> "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/r0}" [color=blue];
  "VarNode{<java.net.URI: void defineString()>/$r11}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void defineString()>/$r11}" -> "VarNode{<java.net.URI: void defineString()>/$r22}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r43}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r19}" -> "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.lang.VirtualMachineError: void <init>(java.lang.String,java.lang.Throwable)>/r1}" -> "VarNode{<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r65}" -> "ArrayIndexNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[1@L1418] newarray java.lang.String[$i0]}}" [color=red];
  "VarNode{<sun.util.locale.Extension: java.lang.String getValue()>/$r1}" -> "VarNode{<sun.util.locale.UnicodeLocaleExtension: java.lang.String getValue()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.Extension: java.lang.String getValue()>/$r1}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r45}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.Extension: java.lang.String getValue()>/$r1}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r28}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.Extension: java.lang.String getValue()>/$r1}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r14}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r11}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.util.Locale: java.lang.String convertOldISOCodes(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/$r3}" -> "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/r7}" [color=green3,style=dashed];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r16}" -> "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r14}" [color=green3,style=dashed];
  "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>[98@L383] new sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint}.<sun.security.util.DisabledAlgorithmConstraints$Constraint: java.lang.String algorithm>}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r10}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>[13@L181] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>[13@L181] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r11}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>[13@L181] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r6}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getJavaTimeDisplayName(java.lang.String,int,int,int,java.util.Locale)>/r1}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getDisplayNameImpl(java.lang.String,int,int,int,java.util.Locale,boolean)>/r1}" [color=blue];
  "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r10}" -> "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[17@L446] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String pad>}" [color=red];
  "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r10}" -> "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[25@L451] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String pad>}" [color=red];
  "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r10}" -> "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[36@L452] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String pad>}" [color=red];
  "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r10}" -> "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[44@L453] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String pad>}" [color=red];
  "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r10}" -> "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[53@L454] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String pad>}" [color=red];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r18}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r45}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[99@L1481] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String positiveSuffix>}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r16}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[99@L1481] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String positiveSuffix>}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/$r11}" [color=red,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r16}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r17}" [color=green3,style=dashed];
  "VarNode{<java.util.Collections$1: void <init>(java.lang.Object)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.Collections: java.util.Iterator singletonIterator(java.lang.Object)>[0@L4673] new java.util.Collections$1}.<java.util.Collections$1: java.lang.Object val$e>}" [color=red];
  "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: java.util.HashMap computeOidTable()>/$r11}" -> "VarNode{<sun.security.x509.AlgorithmId: java.util.HashMap computeOidTable()>/r15}" [];
  "VarNode{<sun.security.x509.AlgorithmId: java.util.HashMap computeOidTable()>/$r11}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <init>(int)>[3@L153] newarray java.lang.Object[i0]}}" -> "VarNode{<java.util.ArrayList$Itr: java.lang.Object next()>/$r4}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <init>(int)>[3@L153] newarray java.lang.Object[i0]}}" -> "VarNode{<java.util.ArrayList: java.lang.Object elementData(int)>/$r2}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <init>(int)>[3@L153] newarray java.lang.Object[i0]}}" -> "VarNode{<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>/%native-arraycopy-temp44}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <init>(int)>[3@L153] newarray java.lang.Object[i0]}}" -> "VarNode{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>/%native-arraycopy-temp47}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <init>(int)>[3@L153] newarray java.lang.Object[i0]}}" -> "VarNode{<java.util.ArrayList: java.lang.Object remove(int)>/%native-arraycopy-temp338}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r3}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.Cipher$Transform: boolean matches(java.lang.String,java.lang.String)>/r3}" -> "VarNode{<javax.crypto.Cipher$Transform: boolean matches(java.lang.String,java.lang.String)>/$r5}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.Cipher$Transform: boolean matches(java.lang.String,java.lang.String)>/r3}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r4}" -> "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r11}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r12}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.util.ResourceLeakDetector: io.netty.util.ResourceLeak open(java.lang.Object)>[25@L217] new io.netty.util.ResourceLeakDetector$DefaultResourceLeak}.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String creationRecord>}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r14}" [color=red,style=dashed];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DerValue: java.math.BigInteger getBigInteger()>/$r8}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.StringCoding: byte[] encode(char[],int,int)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.StringCoding: byte[] encode(char[],int,int)>/$r7}" -> "VarNode{<java.lang.StringCoding: byte[] encode(char[],int,int)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r69}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/r32}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r2}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>[63@L215] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.lang.Class: java.util.Map enumConstantDirectory()>/$r13}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.UnresolvedPermission: void <init>(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate[])>/r2}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[123@L857] new java.security.UnresolvedPermission}.<java.security.UnresolvedPermission: java.lang.String name>}" [color=red];
  "VarNode{<java.security.UnresolvedPermission: void <init>(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate[])>/r2}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>[117@L1543] new java.security.UnresolvedPermission}.<java.security.UnresolvedPermission: java.lang.String name>}" [color=red];
  "VarNode{<java.util.UnknownFormatConversionException: java.lang.String getMessage()>/$r3}" -> "VarNode{<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty getInstance()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.UnknownFormatConversionException: java.lang.String getMessage()>/$r3}" -> "VarNode{<sun.text.normalizer.NormalizerImpl: void <clinit>()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.util.UnknownFormatConversionException: java.lang.String getMessage()>/$r3}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.util.UnknownFormatConversionException: java.lang.String getMessage()>/$r3}" -> "VarNode{<sun.text.normalizer.UCharacter: void <clinit>()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.util.UnknownFormatConversionException: java.lang.String getMessage()>/$r3}" -> "VarNode{<java.lang.Throwable: java.lang.String getLocalizedMessage()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r24}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253String(java.util.Map)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253String(java.util.Map)>/$r12}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253String(java.util.Map)>/$r27}" [color=green3,style=dashed];
  "VarNode{<io.netty.buffer.AbstractByteBuf: void <init>(int)>/$r6}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.handler.codec.DecoderResult: void <clinit>()>/$r5}" -> "VarNode{<io.netty.util.Signal: io.netty.util.Signal valueOf(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r50}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r51}" [color=green3,style=dashed];
  "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r43}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r43}" -> "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r42}" [color=green3,style=dashed];
  "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.util.ResourceBundle$Control)>/r0}" -> "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>/r4}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[21@L199] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String region>}" -> "VarNode{<sun.util.locale.LanguageTag: java.lang.String getRegion()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarFieldValueNameGetter: java.lang.Object getObject(java.util.spi.LocaleServiceProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r3}" -> "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarFieldValueNameGetter: java.lang.String getObject(java.util.spi.CalendarNameProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r10}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DerValue: java.lang.String getBMPString()>/$r7}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r8}" -> "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>[0@L311] new sun.util.locale.BaseLocale}.<sun.util.locale.BaseLocale: java.lang.String language>}" [color=red];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r77}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r78}" [color=green3,style=dashed];
  "VarNode{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>/r3}" -> "VarNode{<sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/r4}" -> "VarNode{<sun.util.locale.StringTokenIterator: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/r4}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/$r31}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/r4}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/$r34}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/r4}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.time.Month: java.time.Month of(int)>/$r4}" -> "VarNode{<java.time.DateTimeException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r12}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r13}" [color=green3,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.lang.IllegalArgumentException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.BaseLocale$1)>/r1}" -> "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Collections: java.util.Set singleton(java.lang.Object)>/r1}" -> "VarNode{<java.util.Collections$SingletonSet: void <init>(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>/$r37}" -> "VarNode{<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>/$r38}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.DecoderResult: java.lang.String toString()>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.handler.codec.DecoderResult: java.lang.String toString()>/$r2}" -> "VarNode{<io.netty.handler.codec.DecoderResult: java.lang.String toString()>/$r4}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r18}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r19}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r18}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/r17}" -> "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r19}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r48}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r48}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r47}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.zip.ZipFile: java.util.zip.ZipEntry getZipEntry(java.lang.String,long)>[0@L576] new java.util.zip.ZipEntry}.<java.util.zip.ZipEntry: java.lang.String name>}" -> "VarNode{<java.util.zip.ZipEntry: void <init>(java.util.zip.ZipEntry)>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/r27}" -> "VarNode{<sun.misc.FloatingDecimal: java.lang.String stripLeadingZeros(java.lang.String)>/r0}" [color=blue];
  "VarNode{<io.netty.buffer.PooledByteBufAllocator: int validateAndCalculateChunkSize(int,int)>/$r5}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.MessageFormat: void <init>(java.lang.String,java.util.Locale)>/r5}" -> "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/r3}" [color=blue];
  "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/$r8}" -> "VarNode{<java.security.ProviderException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r17}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r18}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r49}" -> "VarNode{<java.lang.ClassCastException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r11}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r66}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.JdkLogger: void debug(java.lang.String,java.lang.Object)>/arg}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object)>/arg}" [color=blue];
  "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/r1}" -> "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/$r6}" [color=green3,style=dashed];
  "VarNode{<sun.misc.URLClassPath: sun.misc.Resource getResource(java.lang.String,boolean)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.URLClassPath: sun.misc.Resource getResource(java.lang.String,boolean)>/r1}" -> "VarNode{<sun.misc.URLClassPath: sun.misc.Resource getResource(java.lang.String,boolean)>/$r6}" [color=green3,style=dashed];
  "VarNode{<sun.misc.URLClassPath: sun.misc.Resource getResource(java.lang.String,boolean)>/r1}" -> "VarNode{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>/r5}" [color=blue];
  "VarNode{<sun.misc.URLClassPath: sun.misc.Resource getResource(java.lang.String,boolean)>/r1}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean)>/r2}" [color=blue];
  "VarNode{<java.util.LinkedList: void linkLast(java.lang.Object)>/r3}" -> "VarNode{<java.util.LinkedList$Node: void <init>(java.util.LinkedList$Node,java.lang.Object,java.util.LinkedList$Node)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r41}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r42}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r27}" -> "VarNode{<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r27}" -> "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r27}" -> "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r23}" [color=blue,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.util.zip.ZipException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r17}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>/$r14}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r17}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>/$r16}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class,java.lang.ClassLoader)>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class,java.lang.ClassLoader)>/$r1}" -> "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class,java.lang.ClassLoader)>/$r3}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class,java.lang.ClassLoader)>/$r1}" -> "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class,java.lang.ClassLoader)>/$r21}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void init()>/$r12}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>/r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>/r6}" -> "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>/$r5}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>[12@L303] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.ExtensionInfo: int convertToken(java.lang.String)>[12@L303] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r3}" [color=red,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkUserInfo(java.lang.String)>/$r5}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuthority(java.net.URL)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r15}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r16}" [color=green3,style=dashed];
  "VarNode{<java.io.PrintWriter: void println(java.lang.Object)>/$r1}" -> "VarNode{<java.io.PrintWriter: void print(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/r0}" -> "VarNode{<java.io.File: java.lang.String[] normalizedList()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/r0}" -> "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/r0}" -> "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/r0}" -> "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/r0}" -> "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/r0}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/r0}" -> "VarNode{<java.io.File: void <init>(java.net.URI)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/r0}" -> "VarNode{<java.io.File: java.io.File getParentFile()>/r5}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/r0}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/r1}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/r0}" -> "VarNode{<java.io.File: java.io.File getCanonicalFile()>/r6}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/r0}" -> "VarNode{<java.io.File: java.io.File getAbsoluteFile()>/r6}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/r0}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/r0}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/r0}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.time.LocalDate: java.time.LocalDate create(int,int,int)>/$r10}" -> "VarNode{<java.time.DateTimeException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r18}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r19}" [color=green3,style=dashed];
  "VarNode{<java.io.File: java.io.File getCanonicalFile()>/r6}" -> "VarNode{<java.io.File: void <init>(java.lang.String,int)>/r1}" [color=blue];
  "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/r39}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/r39}" -> "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r20}" [color=green3,style=dashed];
  "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/r39}" -> "VarNode{<java.util.Vector: void addElement(java.lang.Object)>/r2}" [color=blue];
  "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/r39}" -> "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r26}" [color=green3,style=dashed];
  "VarNode{<java.io.File: java.lang.String getCanonicalPath()>/$r3}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>/r3}" -> "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>/r10}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r11}" -> "VarNode{<java.util.Locale: java.lang.String toString()>/$r20}" [color=green3,style=dashed];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r13}" -> "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r15}" [color=green3,style=dashed];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r13}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r4}" -> "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r29}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "ArrayIndexNode{NewObj{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>[55@L633] newarray java.lang.Object[%intconst4]}}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r39}" [color=red,style=dashed];
  "VarNode{<java.lang.Integer: int parseInt(java.lang.String)>/r0}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String,int)>/r0}" [color=blue];
  "VarNode{<sun.security.x509.OtherName: java.lang.String toString()>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ArrayDeque: void doubleCapacity()>/%native-arraycopy-temp170}" -> "ArrayIndexNode{NewObj{<java.util.ArrayDeque: void doubleCapacity()>[20@L162] newarray java.lang.Object[$i5]}}" [color=red];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>/r0}" -> "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>/r0}" -> "VarNode{<sun.util.locale.StringTokenIterator: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>/$r23}" -> "InstanceFieldNode{NewObj{<sun.util.locale.provider.DecimalFormatSymbolsProviderImpl: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>[4@L85] new java.text.DecimalFormatSymbols}.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol>}" [color=red];
  "VarNode{<java.util.jar.JarFile: boolean isKnownNotToHaveSpecialAttributes()>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.RDN: java.lang.String toString()>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.RDN: java.lang.String toString()>/$r2}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toString()>/$r4}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r46}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r46}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r44}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r26}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r27}" [color=green3,style=dashed];
  "VarNode{<java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>/$r5}" -> "VarNode{<java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>/$r6}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r44}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r89}" -> "VarNode{<java.security.UnresolvedPermission: void <init>(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate[])>/r2}" [color=blue];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/r3}" -> "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r11}" [color=green3,style=dashed];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.ChannelOutboundBuffer: boolean remove0(java.lang.Throwable,boolean)>/r2}" -> "VarNode{<io.netty.util.ReferenceCountUtil: void safeRelease(java.lang.Object)>/r0}" [color=blue];
  "VarNode{<java.net.SocketPermission: int[] parsePort(java.lang.String)>/r0}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.net.SocketPermission: int[] parsePort(java.lang.String)>/r0}" -> "VarNode{<java.net.SocketPermission: int[] parsePort(java.lang.String)>/$r1}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: int[] parsePort(java.lang.String)>/r0}" -> "VarNode{<java.net.SocketPermission: int[] parsePort(java.lang.String)>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: int[] parsePort(java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: int[] parsePort(java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void checkText()>/$r12}" -> "VarNode{<java.util.MissingFormatWidthException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r13}" -> "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r73}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r73}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/r50}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/r7}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannel$AbstractUnsafe: void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)>/$r13}" -> "VarNode{<java.lang.IllegalStateException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r13}" -> "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r11}" [color=green3,style=dashed];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r14}" -> "VarNode{<java.text.SimpleDateFormat: void encode(int,int,java.lang.StringBuilder)>/r0}" [color=blue];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r14}" -> "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r13}" [color=green3,style=dashed];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/%this}" [color=blue];
  "VarNode{<sun.util.calendar.CalendarSystem: java.util.Properties getCalendarProperties()>/$r9}" -> "VarNode{<sun.util.calendar.CalendarSystem: java.util.Properties getCalendarProperties()>/$r10}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.Debug: void <clinit>()>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig: java.security.Provider getProvider()>/$r7}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r29}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r29}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r29}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r29}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r29}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.net.URI$Parser: void fail(java.lang.String)>/$r3}" -> "VarNode{<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r29}" -> "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r30}" [color=green3,style=dashed];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r14}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(int)>/%this}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r5}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r28}" [];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r31}" -> "VarNode{<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>/r6}" [color=blue];
  "VarNode{<io.netty.util.UniqueName: java.lang.String name()>/$r1}" -> "VarNode{<io.netty.util.Signal: java.lang.String toString()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r5}" -> "VarNode{<java.util.ArrayList: boolean add(java.lang.Object)>/r2}" [color=blue];
  "VarNode{<javax.crypto.CryptoPolicyParser: java.security.spec.AlgorithmParameterSpec getInstance(java.lang.String,java.lang.Integer[])>/$r14}" -> "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.String getCanonicalName()>/$r8}" -> "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: void config(java.lang.Class,java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.Class: java.lang.String getCanonicalName()>/$r8}" -> "VarNode{<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.Class: java.lang.String getCanonicalName()>/$r8}" -> "VarNode{<sun.util.locale.provider.SPILocaleProviderAdapter$1: java.util.spi.LocaleServiceProvider run()>/$r9}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.CRLExtensions: void init(sun.security.util.DerInputStream)>/$r11}" -> "VarNode{<java.security.cert.CRLException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.concurrent.PromiseTask: io.netty.util.concurrent.Promise setSuccessInternal(java.lang.Object)>/result}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>/result}" [color=blue];
  "VarNode{<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>/%this}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.CharSequence subSequence(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r18}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r24}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r25}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r14}" -> "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>[21@L1513] newarray java.lang.String[%intconst2]}}" [color=red];
  "VarNode{<io.netty.util.Signal: void <init>(java.lang.String)>/name}" -> "VarNode{<java.lang.Error: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.Signal: void <init>(java.lang.String)>/name}" -> "VarNode{<io.netty.util.UniqueName: void <init>(java.util.concurrent.ConcurrentMap,java.lang.String,java.lang.Object[])>/name}" [color=blue];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/r2}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.pkcs.PKCS9Attributes: java.lang.Object getAttributeValue(sun.security.util.ObjectIdentifier)>/$r8}" -> "VarNode{<sun.security.pkcs.PKCS9Attributes: java.lang.Object getAttributeValue(sun.security.util.ObjectIdentifier)>/$r9}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[72@L704] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[1@L264] new java.util.LinkedHashMap$Entry}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[1@L264] new java.util.LinkedHashMap$Entry}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap$Node: java.lang.Object getKey()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[1@L264] new java.util.LinkedHashMap$Entry}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[1@L264] new java.util.LinkedHashMap$Entry}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.LinkedHashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[1@L264] new java.util.LinkedHashMap$Entry}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.LinkedHashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedHashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[1@L264] new java.util.LinkedHashMap$Entry}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap$KeyIterator: java.lang.Object next()>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r38}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String toString()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27851}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[3@L540] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27851}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[47@L577] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27851}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>[26@L2571] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" [color=red];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r23}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r22}" [color=green3,style=dashed];
  "VarNode{<java.text.DigitList: long getLong()>/$r3}" -> "VarNode{<java.lang.Long: long parseLong(java.lang.String)>/r0}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.ApiRoute: org.fengfei.lanproxy.server.config.web.ResponseInfo run(io.netty.handler.codec.http.FullHttpRequest)>/r3}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.ApiRoute: org.fengfei.lanproxy.server.config.web.ResponseInfo run(io.netty.handler.codec.http.FullHttpRequest)>/$r4}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String getStorePassURL()>/$r5}" -> "VarNode{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>/$r8}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r35}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r36}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>[16@L1711] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: java.lang.String getProtocol()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>[16@L1711] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>[16@L1711] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: void read(java.io.Reader)>[109@L220] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: void read(java.io.Reader)>[109@L220] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r3}" [color=red,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" -> "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.LinkedHashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r5}" -> "VarNode{<java.util.HashMap$TreeNode: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r16}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r15}" [color=green3,style=dashed];
  "VarNode{<java.security.MessageDigest: java.lang.String toString()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "ArrayIndexNode{NewObj{<java.math.BigInteger: void <clinit>()>[195@L3938] newarray java.lang.String[%intconst86]}}" -> "VarNode{<java.math.BigInteger: void <clinit>()>/$r68}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.math.BigInteger: void <clinit>()>[195@L3938] newarray java.lang.String[%intconst86]}}" -> "VarNode{<java.math.BigInteger: java.lang.String smallToString(int)>/$r11}" [color=red,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>/$r8}" -> "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" [color=red];
  "VarNode{<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>/$r8}" -> "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[103@L2377] newarray java.lang.String[i26]}}" [color=red];
  "VarNode{<sun.util.locale.LocaleExtensions: java.lang.String getID()>/$r1}" -> "VarNode{<java.util.Locale: java.lang.String toString()>/$r11}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String match(java.lang.String)>/$r43}" -> "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/r8}" [color=blue];
  "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r14}" -> "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r15}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.lang.RuntimeException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.jar.JarFile: boolean isKnownNotToHaveSpecialAttributes()>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r16}" -> "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r17}" [];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>/$r31}" -> "VarNode{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>/$r32}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r69}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.util.logging.PlatformLogger: void warning(java.lang.String)>/r1}" -> "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>/r3}" [color=blue];
  "VarNode{<java.util.SimpleTimeZone: void decodeStartRule()>/$r5}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.ArrayList: void rangeCheck(int)>/$r2}" -> "VarNode{<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Integer: int parseInt(java.lang.String,int)>/r0}" -> "VarNode{<java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>/r3}" [color=blue];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r7}" -> "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r9}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r33}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r33}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r100}" [color=green3,style=dashed];
  "VarNode{<java.util.LinkedHashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" -> "VarNode{<java.util.LinkedHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" [color=blue];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>/$r14}" -> "VarNode{<java.security.KeyStoreException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.util.jar.JarFile: boolean isKnownNotToHaveSpecialAttributes()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-292}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>[12@L1093] new java.util.regex.Matcher}.<java.util.regex.Matcher: java.lang.CharSequence text>}" [color=red];
  "VarNode{<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String)>/r1}" -> "VarNode{<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String,int)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r28}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void <init>(java.util.Formatter,java.util.regex.Matcher)>/$r4}" -> "VarNode{<java.util.Formatter$FormatSpecifier: int index(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r15}" -> "VarNode{<java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>/r0}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void <init>(java.lang.String,int,int,int)>/$r32}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r42}" -> "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r43}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r23}" -> "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r24}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r24}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r25}" [color=green3,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.lang.NoClassDefFoundError>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable)>/$r7}" -> "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable)>/r5}" [];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[52@L689] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r24}" -> "VarNode{<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/r0}" -> "VarNode{<java.net.URL: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/r0}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/r0}" -> "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r21}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r9}" -> "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r10}" [color=green3,style=dashed];
  "VarNode{<sun.security.jca.ProviderConfig: java.security.Provider getProvider()>/$r6}" -> "VarNode{<sun.security.jca.ProviderConfig: java.security.Provider getProvider()>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.URIName: void <init>(java.lang.String)>/$r19}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r30}" -> "VarNode{<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVAKeyword: boolean isCompliant(int)>/$r5}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String)>[21@L186] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" -> "VarNode{<java.lang.ref.Reference: java.lang.Object get()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.io.FilePermission: java.lang.String getActions(int)>/$r1}" -> "VarNode{<java.io.FilePermission: java.lang.String getActions()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.Object getValue()>/$r1}" -> "VarNode{<java.text.AttributedString: void setAttributes(java.util.Map,int)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.Object getValue()>/$r1}" -> "VarNode{<sun.security.pkcs.SignerInfo: java.util.Set verifyAlgorithms(sun.security.pkcs.SignerInfo[],sun.security.util.JarConstraintsParameters,java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.Object getValue()>/$r1}" -> "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.Object getValue()>/$r1}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.Object getValue()>/$r1}" -> "VarNode{<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.Object getValue()>/$r1}" -> "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.Object getValue()>/$r1}" -> "VarNode{<java.util.AbstractMap: void putAll(java.util.Map)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.Object getValue()>/$r1}" -> "VarNode{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>/r9}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r41}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r42}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r27}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r2}" -> "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r2}" -> "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r2}" -> "VarNode{<java.io.File: java.lang.String[] normalizedList()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r2}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r2}" -> "VarNode{<java.io.File: java.io.File getAbsoluteFile()>/r6}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r2}" -> "VarNode{<java.io.File: java.io.File getParentFile()>/r5}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r2}" -> "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r2}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r2}" -> "VarNode{<java.io.File: void <init>(java.net.URI)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r2}" -> "VarNode{<java.io.File: java.io.File getCanonicalFile()>/r6}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r2}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r2}" -> "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r2}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r41}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r41}" -> "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r66}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r2}" -> "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r3}" [];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r16}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r47}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.Package: java.lang.Package defineSystemPackage(java.lang.String,java.lang.String)>[0@L570] new java.lang.Package$1}.<java.lang.Package$1: java.lang.String val$iname>}" -> "VarNode{<java.lang.Package$1: java.lang.Package run()>/r16}" [color=red,style=dashed];
  "VarNode{<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>/r14}" -> "VarNode{<sun.misc.JarIndex: void addMapping(java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>/r14}" -> "VarNode{<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>/r14}" [color=green3,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r6}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r8}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[35@L1388] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[35@L1388] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[35@L1388] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[35@L1388] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: long length()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[35@L1388] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.misc.IOUtils: byte[] readExactlyNBytes(java.io.InputStream,int)>/$r7}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r27}" -> "VarNode{<sun.security.provider.PolicyFile$SelfPermission: void <init>(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate[])>/r2}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)>/$r8}" -> "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)>/r4}" [color=green3,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r2}" -> "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r0}" [color=green3,style=dashed];
  "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/$r24}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r39}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r28}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r7}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r7}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r7}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r7}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r48}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.util.LinkedList$ListItr: java.lang.Object next()>/$r5}" -> "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.util.LinkedList$ListItr: java.lang.Object next()>/$r5}" -> "VarNode{<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.util.LinkedList$ListItr: java.lang.Object next()>/$r5}" -> "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.util.LinkedList$ListItr: java.lang.Object next()>/$r5}" -> "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r31}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r31}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r11}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r31}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.lang.Package definePackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r4}" -> "VarNode{<java.util.jar.JavaUtilJarAccessImpl: java.util.jar.Attributes getTrustedAttributes(java.util.jar.Manifest,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.jca.ProviderList: java.lang.String toString()>/$r3}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r17}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-292}" [];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r17}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-290}" [];
  "VarNode{<java.util.SimpleTimeZone: void decodeEndRule()>/$r26}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r17}" -> "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r20}" [];
  "VarNode{<java.text.DecimalFormat: java.lang.String expandAffix(java.lang.String,java.lang.StringBuffer)>/$r6}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.String expandAffix(java.lang.String,java.lang.StringBuffer)>/$r6}" -> "VarNode{<java.text.DecimalFormat: java.lang.String expandAffix(java.lang.String,java.lang.StringBuffer)>/r0}" [color=green3,style=dashed];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r44}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/$r6}" -> "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,boolean)>/r0}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r28}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r28}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" [color=green3,style=dashed];
  "VarNode{<java.net.URI: java.lang.String getPath()>/$r5}" -> "VarNode{<java.io.File: void <init>(java.net.URI)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.net.URI: java.lang.String getPath()>/$r5}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/$r20}" -> "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/r50}" [];
  "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/$r20}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getEncAlgFromSigAlg(java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.security.pkcs.PKCS7: void parse(sun.security.util.DerInputStream,boolean)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>[100@L149] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>[100@L149] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r11}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>[100@L149] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r6}" [color=red,style=dashed];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>/$r5}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r2}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r0}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$Node sequence(java.util.regex.Pattern$Node)>/$r11}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.PatternSyntaxException error(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.text.normalizer.VersionInfo: sun.text.normalizer.VersionInfo getInstance(java.lang.String)>/$r9}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[24@L216] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" -> "VarNode{<java.lang.ref.Reference: java.lang.Object get()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.IllformedLocaleException: void <init>(java.lang.String,int)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r11}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r12}" [];
  "InstanceFieldNode{NewObj{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>[21@L454] new java.util.StringJoiner}.<java.util.StringJoiner: java.lang.String delimiter>}" -> "VarNode{<java.util.StringJoiner: java.lang.StringBuilder prepareBuilder()>/$r6}" [color=red,style=dashed];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r8}" -> "VarNode{<sun.security.util.PropertyExpander$ExpandException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void defineString()>/$r8}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void defineString()>/$r8}" -> "VarNode{<java.net.URI: void defineString()>/$r22}" [color=green3,style=dashed];
  "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r54}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r55}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.ResourceLeakDetector: void reportLeak(io.netty.util.ResourceLeakDetector$Level)>/$r15}" -> "ArrayIndexNode{NewObj{<io.netty.util.ResourceLeakDetector: void reportLeak(io.netty.util.ResourceLeakDetector$Level)>[63@L259] newarray java.lang.Object[%intconst6]}}" [color=red];
  "VarNode{<java.time.Instant: java.time.Instant from(java.time.temporal.TemporalAccessor)>/$r13}" -> "VarNode{<java.time.Instant: java.time.Instant from(java.time.temporal.TemporalAccessor)>/$r14}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry: java.lang.String getValue()>/$r1}" -> "VarNode{<java.lang.String: java.lang.String toString()>/%this}" [color=blue];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet getInclusions(int)>/$r13}" -> "VarNode{<java.lang.IllegalStateException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void defineString()>/$r17}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void defineString()>/$r17}" -> "VarNode{<java.net.URI: void defineString()>/$r22}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseHexString(java.io.Reader,int)>/$r7}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r10}" -> "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/r6}" [color=blue];
  "InstanceFieldNode{NewObj{<io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask$1: io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask newObject(io.netty.util.Recycler$Handle)>[0@L939] new io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask}.<io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask: java.lang.Object msg>}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask: void run()>/$r7}" [color=red,style=dashed];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)>/o}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)>/o}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r53}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.lang.Package: void <init>(java.lang.String,java.util.jar.Manifest,java.net.URL,java.lang.ClassLoader)>/r1}" -> "VarNode{<java.lang.Package: void <init>(java.lang.String,java.util.jar.Manifest,java.net.URL,java.lang.ClassLoader)>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.lang.Package: void <init>(java.lang.String,java.util.jar.Manifest,java.net.URL,java.lang.ClassLoader)>/r1}" -> "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" [color=blue];
  "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r1}" -> "VarNode{<java.security.Security: void initialize()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkExternalForm(java.net.URL)>/$r3}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r8}" -> "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r8}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r6}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[44@L453] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String pad>}" -> "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/r32}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[44@L453] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String pad>}" -> "VarNode{<javax.crypto.Cipher$Transform: int supportsPadding(java.security.Provider$Service)>/$r2}" [color=red,style=dashed];
  "VarNode{<java.net.URI: java.net.URI create(java.lang.String)>/$r0}" -> "VarNode{<sun.security.provider.SunEntries: java.io.File getDeviceFile(java.net.URL)>/$r14}" [color=blue,style=dashed];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String expand(java.lang.String)>/$r2}" -> "VarNode{<sun.security.jca.ProviderConfig: java.lang.String expand(java.lang.String)>/$r3}" [];
  "VarNode{<java.io.UnixFileSystem: java.lang.String fromURIPath(java.lang.String)>/r2}" -> "VarNode{<java.io.File: void <init>(java.net.URI)>/$r9}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>[3@L937] new sun.misc.FileURLMapper}.<sun.misc.FileURLMapper: java.lang.String path>}" -> "VarNode{<sun.misc.FileURLMapper: java.lang.String getPath()>/$r6}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>[3@L937] new sun.misc.FileURLMapper}.<sun.misc.FileURLMapper: java.lang.String path>}" -> "VarNode{<sun.misc.FileURLMapper: java.lang.String getPath()>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>[3@L937] new sun.misc.FileURLMapper}.<sun.misc.FileURLMapper: java.lang.String path>}" -> "VarNode{<sun.misc.FileURLMapper: java.lang.String getPath()>/$r11}" [color=red,style=dashed];
  "VarNode{<java.util.StringTokenizer: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>/r1}" [color=blue];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: void checkDuplicateName(java.lang.String)>/name}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: void checkDuplicateName(java.lang.String)>/name}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: void checkDuplicateName(java.lang.String)>/$r5}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r11}" -> "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String)>/%this}" -> "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String,int)>/%this}" [color=blue];
  "VarNode{<java.net.URI: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>/$r9}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>/$r9}" -> "VarNode{<java.net.URI: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>/r2}" [color=green3,style=dashed];
  "VarNode{<java.lang.Package$1: java.lang.Package run()>/$r18}" -> "VarNode{<java.lang.Package$1: java.lang.Package run()>/$r19}" [color=green3,style=dashed];
  "VarNode{<java.lang.Package$1: java.lang.Package run()>/$r18}" -> "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>/$r2}" -> "VarNode{<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>/$r2}" -> "VarNode{<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.DerInputStream: int getLength(int,java.io.InputStream)>/$r13}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ArrayList: void add(int,java.lang.Object)>/%native-arraycopy-temp491}" -> "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[1@L120] newarray java.lang.Object[%intconst0]}}" [color=red];
  "VarNode{<java.util.ArrayList: void add(int,java.lang.Object)>/%native-arraycopy-temp491}" -> "ArrayIndexNode{NewObj{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>[2@L3210] newarray java.lang.Object[i0]}}" [color=red];
  "VarNode{<java.util.ArrayList: void add(int,java.lang.Object)>/%native-arraycopy-temp491}" -> "ArrayIndexNode{NewObj{<java.util.LinkedList: java.lang.Object[] toArray()>[1@L1050] newarray java.lang.Object[$i0]}}" [color=red];
  "VarNode{<java.util.ArrayList: void add(int,java.lang.Object)>/%native-arraycopy-temp491}" -> "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[3@L127] newarray java.lang.Object[%intconst0]}}" [color=red];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>[26@L2571] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" -> "VarNode{<java.util.TreeMap: void deleteEntry(java.util.TreeMap$Entry)>/$r19}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>[26@L2571] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.Object getValue()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>[26@L2571] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>[26@L2571] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" -> "VarNode{<java.util.TreeMap: java.lang.Object get(java.lang.Object)>/$r3}" [color=red,style=dashed];
  "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r8}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r6}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/r3}" [color=blue];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/$r11}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/%taint-temp-8406}" [];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: java.lang.String getActions(int)>/$r1}" -> "VarNode{<java.net.SocketPermission: java.lang.String getActions()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.util.Currency: void info(java.lang.String,java.lang.Throwable)>/r3}" -> "VarNode{<sun.util.logging.PlatformLogger: void info(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.util.Currency: void info(java.lang.String,java.lang.Throwable)>/r3}" -> "VarNode{<sun.util.logging.PlatformLogger: void info(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r3}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r4}" [color=green3,style=dashed];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r3}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.Collections: java.util.Iterator singletonIterator(java.lang.Object)>[0@L4673] new java.util.Collections$1}.<java.util.Collections$1: java.lang.Object val$e>}" -> "VarNode{<java.util.Collections$1: java.lang.Object next()>/$r2}" [color=red,style=dashed];
  "VarNode{<io.netty.util.IllegalReferenceCountException: void <init>(int,int)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.StringCoding: byte[] encode(char[],int,int)>/$r9}" -> "VarNode{<sun.misc.MessageUtils: void err(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void expandAffixes()>/$r9}" -> "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String negativePrefix>}" [color=red];
  "VarNode{<java.text.DecimalFormat: void expandAffixes()>/$r9}" -> "InstanceFieldNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[99@L1481] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String negativePrefix>}" [color=red];
  "VarNode{<java.lang.Exception: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.Throwable: void <init>(java.lang.String)>/r3}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: java.lang.String toString()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: java.lang.String toString()>/$r5}" -> "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: java.lang.String toString()>/$r4}" [color=green3,style=dashed];
  "VarNode{<io.netty.buffer.PooledByteBufAllocator: int validateAndCalculatePageShifts(int)>/$r5}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/r25}" -> "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r10}" [color=blue];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/r25}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/r25}" -> "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r18}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/r25}" -> "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r8}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.security.InvalidParameterException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.SunEntries: java.io.File getDeviceFile(java.net.URL)>/$r14}" -> "VarNode{<java.io.File: void <init>(java.net.URI)>/r1}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void access$1800(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/x1}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" [color=blue];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r6}" -> "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.security.BasicPermission: void init(java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurityManager: javax.crypto.CryptoPermission getCryptoPermission(java.lang.String)>[98@L191] new javax.crypto.CryptoPermission}.<javax.crypto.CryptoPermission: java.lang.String alg>}" -> "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r4}" [color=red,style=dashed];
  "VarNode{<java.io.File: void <init>(java.net.URI)>/$r9}" -> "VarNode{<java.io.File: void <init>(java.net.URI)>/r20}" [];
  "VarNode{<java.io.File: void <init>(java.net.URI)>/$r9}" -> "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/$r10}" -> "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/$r11}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r8}" -> "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r4}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r4}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r4}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r22}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r4}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r18}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r40}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r41}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r4}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r5}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/r4}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r21}" [];
  "VarNode{<java.text.DigitList: double getDouble()>/$r2}" -> "VarNode{<java.text.DigitList: double getDouble()>/$r1}" [color=green3,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/r24}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/r24}" -> "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r5}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[75@L224] new java.security.SecurityPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[75@L224] new java.security.SecurityPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class,java.lang.ClassLoader)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r17}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r16}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigInteger,java.lang.StringBuffer,java.text.FieldPosition)>/$r5}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.TreeMap$Entry: java.lang.Object getValue()>/$r1}" -> "VarNode{<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.TreeMap$Entry: java.lang.Object getValue()>/$r1}" -> "VarNode{<java.text.AttributedString: void setAttributes(java.util.Map,int)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.util.TreeMap$Entry: java.lang.Object getValue()>/$r1}" -> "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.util.TreeMap$Entry: java.lang.Object getValue()>/$r1}" -> "VarNode{<java.util.AbstractMap: void putAll(java.util.Map)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.util.TreeMap$Entry: java.lang.Object getValue()>/$r1}" -> "VarNode{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>/r9}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: char[] addZeros(char[],int)>/r0}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r51}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>[0@L692] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String prefix>}" [color=red];
  "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>[0@L535] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String prefix>}" [color=red];
  "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/r1}" -> "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/$r2}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.x509.CRLExtensions: sun.security.x509.Extension get(java.lang.String)>[0@L184] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String prefix>}" [color=red];
  "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>[18@L699] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String prefix>}" [color=red];
  "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/r1}" -> "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/$r3}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r35}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r36}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r2}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r40}" [];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r25}" -> "VarNode{<java.lang.Throwable$WrappedPrintStream: void println(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r25}" -> "VarNode{<java.lang.Throwable$WrappedPrintWriter: void println(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.security.CodeSigner[] getSigners(sun.security.pkcs.SignerInfo[],sun.security.pkcs.PKCS7)>/$r18}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r4}" -> "VarNode{<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>/$r14}" [color=blue,style=dashed];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r4}" -> "VarNode{<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>/$r21}" [color=blue,style=dashed];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r4}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>/$r12}" [color=blue,style=dashed];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r4}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.util.ResourceBundle$CacheKey: void <init>(java.lang.String,java.util.Locale,java.lang.ClassLoader)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.ResourceBundle: java.util.ResourceBundle getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>[5@L1333] new java.util.ResourceBundle$CacheKey}.<java.util.ResourceBundle$CacheKey: java.lang.String name>}" [color=red];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r100}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r44}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.security.CodeSigner[] getSigners(sun.security.pkcs.SignerInfo[],sun.security.pkcs.PKCS7)>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.security.CodeSigner[] getSigners(sun.security.pkcs.SignerInfo[],sun.security.pkcs.PKCS7)>/$r16}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.security.CodeSigner[] getSigners(sun.security.pkcs.SignerInfo[],sun.security.pkcs.PKCS7)>/$r15}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[0@L417] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String region>}" -> "VarNode{<sun.util.locale.LanguageTag: java.lang.String getRegion()>/$r1}" [color=red,style=dashed];
  "VarNode{<io.netty.util.internal.PlatformDependent0: void <clinit>()>/$r26}" -> "VarNode{<java.lang.String: boolean matches(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.ObjectIdentifier: void checkOtherComponent(int,java.math.BigInteger)>/$r6}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r62}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>/r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>/r6}" -> "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/r21}" -> "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.util.ResourceBundle$CacheKey: void setFormat(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.ResourceBundle: java.util.ResourceBundle getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>[5@L1333] new java.util.ResourceBundle$CacheKey}.<java.util.ResourceBundle$CacheKey: java.lang.String format>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r24}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL[] parseClassPath(java.net.URL,java.lang.String)>[11@L1246] new java.net.URL}.<java.net.URL: java.lang.String host>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r24}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>[36@L898] new java.net.URL}.<java.net.URL: java.lang.String host>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r24}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveNonFile(java.net.URL,java.lang.String)>[6@L1309] new java.net.URL}.<java.net.URL: java.lang.String host>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r24}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>[15@L1110] new java.net.URL}.<java.net.URL: java.lang.String host>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r24}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource checkResource(java.lang.String,boolean,java.util.jar.JarEntry)>[0@L970] new java.net.URL}.<java.net.URL: java.lang.String host>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r24}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$Loader: sun.misc.Resource getResource(java.lang.String,boolean)>[0@L738] new java.net.URL}.<java.net.URL: java.lang.String host>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r24}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveFile(java.net.URL,java.lang.String)>[10@L1296] new java.net.URL}.<java.net.URL: java.lang.String host>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r24}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[4@L1369] new java.net.URL}.<java.net.URL: java.lang.String host>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r24}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>[0@L702] new java.net.URL}.<java.net.URL: java.lang.String host>}" [color=red];
  "VarNode{<java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/r4}" -> "VarNode{<java.text.SimpleDateFormat: void subFormat(int,int,java.text.Format$FieldDelegate,java.lang.StringBuffer,boolean)>/r0}" [color=blue];
  "VarNode{<java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/r4}" -> "VarNode{<java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/r4}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[44@L453] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String mode>}" -> "VarNode{<javax.crypto.Cipher$Transform: int supportsMode(java.security.Provider$Service)>/$r2}" [color=red,style=dashed];
  "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/$r13}" -> "VarNode{<java.lang.SecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r9}" -> "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.security.Timestamp: java.lang.String toString()>/$r5}" -> "VarNode{<java.security.Timestamp: java.lang.String toString()>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/$r7}" -> "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,boolean)>/r0}" [color=blue];
  "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r3}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$i1}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkDelete(java.lang.String)>[0@L1007] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkDelete(java.lang.String)>[0@L1007] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkDelete(java.lang.String)>[0@L1007] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>/$r13}" -> "VarNode{<sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>/$r12}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.AbstractAlgorithmConstraints: boolean checkAlgorithm(java.util.List,java.lang.String,sun.security.util.AlgorithmDecomposer)>/r0}" -> "VarNode{<sun.security.util.AlgorithmDecomposer: java.util.Set decompose(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r6}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r25}" [color=green3,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r53}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.security.CodeSigner: java.lang.String toString()>/$r15}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.CodeSigner: java.lang.String toString()>/$r15}" -> "VarNode{<java.security.CodeSigner: java.lang.String toString()>/$r0}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/r4}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.math.BigInteger,java.util.Locale)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/r4}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/r4}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.math.BigDecimal,java.util.Locale)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/r4}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(long,java.util.Locale)>/$r40}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/r4}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/r4}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.util.Calendar,char,java.util.Locale)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/r4}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/r4}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(double,java.util.Locale)>/$r13}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.Security: void initialize()>[107@L144] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.Security: void initialize()>[107@L144] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r13}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r14}" [color=green3,style=dashed];
  "VarNode{<java.net.URLClassLoader: void definePackageInternal(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r11}" -> "VarNode{<java.lang.AssertionError: void <init>(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKey(java.lang.String,int,int,boolean)>/r1}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/r10}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r12}" -> "VarNode{<java.security.SignatureException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/r58}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r43}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/r58}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void updateSigners(java.security.CodeSigner[],java.util.Hashtable,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/r58}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/r58}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/r58}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/r58}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/r58}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/r58}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r34}" [color=green3,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.Object getKey()>/$r1}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r31}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.Object getKey()>/$r1}" -> "VarNode{<java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.Object getKey()>/$r1}" -> "VarNode{<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.Object getKey()>/$r1}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.Object getKey()>/$r1}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r31}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.Object getKey()>/$r1}" -> "VarNode{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>/r8}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.Object getKey()>/$r1}" -> "VarNode{<java.util.AbstractMap: void putAll(java.util.Map)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.Object getKey()>/$r1}" -> "VarNode{<java.text.AttributedString: void setAttributes(java.util.Map,int)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.Object getKey()>/$r1}" -> "VarNode{<java.util.HashMap: void putMapEntries(java.util.Map,boolean)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.Object getKey()>/$r1}" -> "VarNode{<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.Object getKey()>/$r1}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.Object getKey()>/$r1}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.util.logging.LoggingPermission: void <init>(java.lang.String,java.lang.String)>/$r7}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>/$r31}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void intArrayAppend(java.lang.StringBuffer,int[])>/r0}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void intArrayAppend(java.lang.StringBuffer,int[])>/r0}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(int)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r5}" -> "VarNode{<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r21}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r62}" [];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String toString()>/$r5}" -> "VarNode{<sun.security.x509.GeneralName: java.lang.String toString()>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r1}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r17}" -> "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r18}" [color=green3,style=dashed];
  "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/$r11}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r65}" -> "VarNode{<java.lang.SecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r51}" -> "VarNode{<sun.security.pkcs.ParsingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.URLClassPath: java.util.Enumeration findResources(java.lang.String,boolean)>/r2}" -> "VarNode{<sun.misc.URLClassPath$1: void <init>(sun.misc.URLClassPath,java.lang.String,boolean)>/r2}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: boolean parsePrivateuse(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: boolean parsePrivateuse(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r6}" -> "VarNode{<sun.util.locale.LanguageTag: boolean parsePrivateuse(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/r27}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void updateSigners(java.security.CodeSigner[],java.util.Hashtable,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r88}" -> "VarNode{<java.security.UnresolvedPermission: void <init>(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate[])>/r3}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r2}" -> "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toTitleString(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.net.URLClassLoader$1: java.lang.Class run()>/$r7}" -> "VarNode{<java.net.URLClassLoader: java.lang.Class access$100(java.net.URLClassLoader,java.lang.String,sun.misc.Resource)>/r1}" [color=blue];
  "VarNode{<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>/r6}" -> "VarNode{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" [color=blue];
  "VarNode{<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>/r6}" -> "VarNode{<java.util.LinkedHashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" [color=blue];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r8}" -> "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r0}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>/r4}" -> "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName(boolean)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(long)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r5}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r28}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r28}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r27}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r4}" -> "VarNode{<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: java.lang.String toString()>/$r1}" -> "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r32}" [color=blue,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: java.lang.String toString()>/$r1}" -> "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r40}" [color=blue,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: java.lang.String toString()>/$r1}" -> "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r44}" [color=blue,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: java.lang.String toString()>/$r1}" -> "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r20}" [color=blue,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: java.lang.String toString()>/$r1}" -> "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r16}" [color=blue,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: java.lang.String toString()>/$r1}" -> "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r28}" [color=blue,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: java.lang.String toString()>/$r1}" -> "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r24}" [color=blue,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: java.lang.String toString()>/$r1}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: java.lang.String toString()>/$r1}" -> "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r12}" [color=blue,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: java.lang.String toString()>/$r1}" -> "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r36}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void appendFragment(java.lang.StringBuffer,java.lang.String)>/$r2}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void appendFragment(java.lang.StringBuffer,java.lang.String)>/$r2}" -> "VarNode{<java.net.URI: void appendFragment(java.lang.StringBuffer,java.lang.String)>/r1}" [color=green3,style=dashed];
  "VarNode{<java.util.logging.Logger: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String,java.lang.Class)>/r2}" -> "VarNode{<java.util.logging.LogManager: java.util.logging.Logger demandSystemLogger(java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.util.logging.Logger: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String,java.lang.Class)>/r2}" -> "VarNode{<java.util.logging.LogManager: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String,java.lang.Class)>/r1}" [color=blue];
  "VarNode{<io.netty.channel.ChannelOutboundBuffer: void close(java.nio.channels.ClosedChannelException)>/$r3}" -> "VarNode{<io.netty.util.ReferenceCountUtil: void safeRelease(java.lang.Object)>/r0}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r14}" -> "VarNode{<java.net.MalformedURLException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.reflect.MethodAccessorGenerator: java.lang.String buildInternalSignature()>/$r4}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r28}" -> "VarNode{<java.lang.SecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r10}" -> "VarNode{<java.lang.String: java.lang.String toString()>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$CacheKey: java.lang.String getFormat()>/$r1}" -> "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle findBundleInCache(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle$Control)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.text.SimpleDateFormat: void encode(int,int,java.lang.StringBuilder)>/$r5}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r19}" -> "VarNode{<java.text.DecimalFormat: void append(java.lang.StringBuffer,java.lang.String,java.text.Format$FieldDelegate,java.text.FieldPosition[],java.text.Format$Field)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>/r2}" -> "VarNode{<sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.io.IOException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r8}" -> "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r9}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Vector: void removeElementAt(int)>/%native-arraycopy-temp104}" -> "ArrayIndexNode{NewObj{<java.util.Vector: void <init>(int,int)>[12@L138] newarray java.lang.Object[i0]}}" [color=red];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r24}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r24}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r4}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>[34@L190] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[22@L996] new java.util.PropertyPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[22@L996] new java.util.PropertyPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[22@L996] new java.util.PropertyPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<java.time.temporal.ValueRange: long checkValidValue(long,java.time.temporal.TemporalField)>/$r3}" -> "VarNode{<java.time.DateTimeException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[46@L691] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String actions>}" -> "VarNode{<java.io.FilePermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<java.util.Properties: java.lang.String getProperty(java.lang.String)>/r3}" -> "VarNode{<java.util.Properties: java.lang.String getProperty(java.lang.String)>/$r7}" [];
  "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" -> "VarNode{<java.nio.charset.UnsupportedCharsetException: void <init>(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" -> "VarNode{<java.security.Provider: void putId()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" -> "VarNode{<java.io.PrintWriter: void println(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" -> "VarNode{<java.security.Provider: void putId()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" -> "VarNode{<java.nio.charset.IllegalCharsetNameException: void <init>(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" -> "VarNode{<java.lang.AssertionError: void <init>(java.lang.Object)>/$r2}" [color=blue,style=dashed];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r25}" -> "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[77@L148] new java.net.URL}.<java.net.URL: java.lang.String file>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r25}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveNonFile(java.net.URL,java.lang.String)>[6@L1309] new java.net.URL}.<java.net.URL: java.lang.String file>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r25}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>[36@L898] new java.net.URL}.<java.net.URL: java.lang.String file>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r25}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>[15@L1110] new java.net.URL}.<java.net.URL: java.lang.String file>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r25}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[0@L1368] new java.net.URL}.<java.net.URL: java.lang.String file>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r25}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL[] parseClassPath(java.net.URL,java.lang.String)>[11@L1246] new java.net.URL}.<java.net.URL: java.lang.String file>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r25}" -> "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[84@L155] new java.net.URL}.<java.net.URL: java.lang.String file>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r25}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveFile(java.net.URL,java.lang.String)>[10@L1296] new java.net.URL}.<java.net.URL: java.lang.String file>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r25}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[4@L1369] new java.net.URL}.<java.net.URL: java.lang.String file>}" [color=red];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r10}" -> "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r11}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r100}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r100}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r29}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r100}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r20}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r100}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r89}" [color=green3,style=dashed];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addPerms(java.security.Permissions,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r15}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r40}" -> "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[0@L417] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String language>}" [color=red];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r20}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r21}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r18}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r16}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CRLEntryImpl: void <init>(sun.security.util.DerValue)>/$r7}" -> "VarNode{<sun.security.x509.X509CRLEntryImpl: void <init>(sun.security.util.DerValue)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/r2}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>/r2}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/r2}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r12}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/r2}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/r2}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r4}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/r2}" -> "VarNode{<java.lang.String: java.lang.CharSequence subSequence(int,int)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/r2}" -> "VarNode{<java.lang.String: java.lang.String toString()>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[0@L823] new java.net.URL}.<java.net.URL: java.lang.String file>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r25}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[0@L823] new java.net.URL}.<java.net.URL: java.lang.String file>}" -> "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/r1}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String parentOrNull(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/r1}" -> "VarNode{<java.io.ExpiringCache: void put(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/r1}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r13}" [color=green3,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>/$r9}" -> "VarNode{<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>/$r10}" [color=green3,style=dashed];
  "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r44}" -> "VarNode{<sun.security.pkcs.ParsingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.InetAddress: void cacheAddresses(java.lang.String,java.net.InetAddress[],boolean)>/r6}" -> "VarNode{<java.net.InetAddress: void cacheAddresses(java.lang.String,java.net.InetAddress[],boolean)>/$r0}" [color=green3,style=dashed];
  "VarNode{<java.net.InetAddress: void cacheAddresses(java.lang.String,java.net.InetAddress[],boolean)>/r6}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase()>/%this}" [color=blue];
  "VarNode{<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>/r1}" -> "VarNode{<java.security.KeyFactory: void <init>(java.lang.String)>/r2}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r30}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>/r0}" -> "VarNode{<java.lang.String: java.lang.String toString()>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r15}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>/r3}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/$r5}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String,int,int)>/$r5}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<java.net.Inet6Address: java.lang.String getHostAddress()>/$r2}" -> "VarNode{<java.net.SocketPermission: void getCanonName()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.net.Inet6Address: java.lang.String getHostAddress()>/$r2}" -> "VarNode{<java.net.InetAddress: java.lang.String getHostFromNameService(java.net.InetAddress,boolean)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.net.Inet6Address: java.lang.String getHostAddress()>/$r2}" -> "VarNode{<java.net.InetAddress: java.lang.String getHostFromNameService(java.net.InetAddress,boolean)>/r12}" [color=blue,style=dashed];
  "VarNode{<java.net.Inet6Address: java.lang.String getHostAddress()>/$r2}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.net.Inet6Address: java.lang.String getHostAddress()>/$r2}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.net.Inet6Address: java.lang.String getHostAddress()>/$r2}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.net.Inet6Address: java.lang.String getHostAddress()>/$r2}" -> "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<sun.net.www.ParseUtil: byte unescape(java.lang.String,int)>/$r1}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String,int)>/r0}" [color=blue];
  "VarNode{<java.io.File: void <init>(java.net.URI)>/$r11}" -> "InstanceFieldNode{NewObj{<sun.security.provider.SunEntries: java.io.File getDeviceFile(java.net.URL)>[18@L377] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.net.URI)>/$r11}" -> "InstanceFieldNode{NewObj{<sun.security.provider.SunEntries: java.io.File getDeviceFile(java.net.URL)>[22@L379] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.util.SimpleTimeZone: void <init>(int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int)>/$r7}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r11}" -> "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r12}" [color=green3,style=dashed];
  "VarNode{<java.security.Provider: java.lang.String[] getTypeAndAlgorithm(java.lang.String)>/$r13}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.util.logging.PlatformLogger: void info(java.lang.String,java.lang.Throwable)>/r1}" -> "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>/r3}" [color=blue];
  "VarNode{<io.netty.util.ReferenceCountUtil: void safeRelease(java.lang.Object)>/r0}" -> "VarNode{<io.netty.util.internal.logging.Log4JLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>/argA}" [color=blue];
  "VarNode{<io.netty.util.ReferenceCountUtil: void safeRelease(java.lang.Object)>/r0}" -> "VarNode{<io.netty.util.internal.logging.JdkLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>/argA}" [color=blue];
  "VarNode{<javax.crypto.Cipher$Transform: boolean matches(java.lang.String,java.lang.String)>/$r5}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>/r2}" [color=blue];
  "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/$r7}" -> "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/$r8}" [color=green3,style=dashed];
  "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r28}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String getKeyStoreUrl()>/$r5}" -> "VarNode{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r21}" [color=green3,style=dashed];
  "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeLanguage(java.lang.String)>/r0}" -> "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String fromURIPath(java.lang.String)>/r0}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String fromURIPath(java.lang.String)>/r2}" [];
  "VarNode{<java.io.UnixFileSystem: java.lang.String fromURIPath(java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.security.AlgorithmParameters,sun.security.util.ConstraintsParameters)>/$r1}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.lang.AssertionError>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r20}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r21}" [color=green3,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r36}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: java.lang.String get(java.lang.String,java.lang.String)>/def}" -> "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r0}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: java.lang.String get(java.lang.String,java.lang.String)>/def}" -> "VarNode{<io.netty.util.internal.PlatformDependent: boolean isWindows0()>/$r0}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: java.lang.String get(java.lang.String,java.lang.String)>/def}" -> "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r4}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: java.lang.String get(java.lang.String,java.lang.String)>/def}" -> "VarNode{<io.netty.util.internal.SystemPropertyUtil: java.lang.String get(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: java.lang.String get(java.lang.String,java.lang.String)>/def}" -> "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r7}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: java.lang.String get(java.lang.String,java.lang.String)>/def}" -> "VarNode{<io.netty.buffer.ByteBufUtil: void <clinit>()>/$r4}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: java.lang.String get(java.lang.String,java.lang.String)>/def}" -> "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r5}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: java.lang.String get(java.lang.String,java.lang.String)>/def}" -> "VarNode{<io.netty.util.internal.PlatformDependent0: void <clinit>()>/$r26}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r76}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.security.cert.CertificateException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.ArrayList$SubList$1: java.lang.Object next()>/$r5}" -> "VarNode{<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.util.ArrayList$SubList$1: java.lang.Object next()>/$r5}" -> "VarNode{<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r34}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r34}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r33}" [color=green3,style=dashed];
  "VarNode{<java.util.WeakHashMap: void <init>(int,float)>/$r6}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline addLast(io.netty.util.concurrent.EventExecutorGroup,io.netty.channel.ChannelHandler[])>/$r4}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline addLast(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)>/name}" [color=blue];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String compose(java.lang.String,boolean,int)>/r0}" -> "VarNode{<sun.text.normalizer.NormalizerImpl: java.lang.String convert(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.resources.LocaleData: boolean setSupplementary(java.lang.String,sun.util.resources.ParallelListResourceBundle)>/r3}" -> "VarNode{<sun.util.resources.LocaleData: sun.util.resources.OpenListResourceBundle getSupplementary(java.lang.String,java.util.Locale)>/r1}" [color=blue];
  "VarNode{<sun.util.resources.LocaleData: boolean setSupplementary(java.lang.String,sun.util.resources.ParallelListResourceBundle)>/r3}" -> "VarNode{<sun.util.resources.LocaleData: boolean setSupplementary(java.lang.String,sun.util.resources.ParallelListResourceBundle)>/r3}" [color=blue];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253String(java.util.Map)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253String(java.util.Map)>/$r3}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253String(java.util.Map)>/$r27}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r8}" -> "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[134@L444] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String cname>}" [color=red];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r8}" -> "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[140@L447] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String cname>}" [color=red];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$Node group0()>/$r27}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.lang.Class defineClass(java.lang.String,sun.misc.Resource)>/r0}" -> "VarNode{<java.security.SecureClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.CodeSource)>/r1}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.lang.Class defineClass(java.lang.String,sun.misc.Resource)>/r0}" -> "VarNode{<java.security.SecureClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.CodeSource)>/r1}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.lang.Class defineClass(java.lang.String,sun.misc.Resource)>/r0}" -> "VarNode{<java.net.URLClassLoader: java.lang.Class defineClass(java.lang.String,sun.misc.Resource)>/$r14}" [color=green3,style=dashed];
  "VarNode{<java.net.URLClassLoader: java.lang.Class defineClass(java.lang.String,sun.misc.Resource)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r14}" -> "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r15}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>/r0}" -> "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeExtension(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>/r0}" -> "VarNode{<java.util.Locale: java.lang.String convertOldISOCodes(java.lang.String)>/$r0}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>/r0}" -> "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeLanguage(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>/r0}" -> "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r15}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>/r0}" -> "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r32}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>/r0}" -> "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r23}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>/r0}" -> "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>/r0}" -> "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>/r0}" -> "VarNode{<sun.util.locale.LanguageTag: void <clinit>()>/$r31}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>/r0}" -> "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r18}" [color=blue,style=dashed];
  "ArrayIndexNode{NewObj{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>[15@L169] newarray java.lang.Object[%intconst1]}}" -> "VarNode{<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>/$r31}" [color=red,style=dashed];
  "VarNode{<java.io.File: java.io.File getAbsoluteFile()>/r6}" -> "VarNode{<java.io.File: void <init>(java.lang.String,int)>/r1}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.String getCanonicalName()>/$r7}" -> "VarNode{<java.lang.Class: java.lang.String getCanonicalName()>/$r8}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r12}" -> "VarNode{<java.security.KeyStoreException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<io.netty.buffer.UnpooledDirectByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,int,int)>/$r7}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r47}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[161@L453] new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString}.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String str>}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String value()>/$r1}" [color=red,style=dashed];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Object)>/$r3}" -> "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Object)>/r4}" [];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Object)>/$r3}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/r0}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.AttributedString: void addAttributeImpl(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>/r2}" -> "VarNode{<java.text.AttributedString: void addAttributeRunData(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>/r7}" [color=blue];
  "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>[21@L454] new java.util.StringJoiner}.<java.util.StringJoiner: java.lang.String emptyValue>}" -> "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r11}" [color=red,style=dashed];
  "VarNode{<java.lang.StringCoding: byte[] encode(char[],int,int)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.EDIPartyName: java.lang.String toString()>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.EDIPartyName: java.lang.String toString()>/$r14}" -> "VarNode{<sun.security.x509.EDIPartyName: java.lang.String toString()>/$r1}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[46@L120] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[46@L120] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void <init>(java.lang.String,int,int,int)>[18@L697] new java.util.Calendar$Builder}.<java.util.Calendar$Builder: java.lang.String type>}" -> "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r35}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void <init>(java.lang.String,int,int,int)>[18@L697] new java.util.Calendar$Builder}.<java.util.Calendar$Builder: java.lang.String type>}" -> "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r17}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[43@L192] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[43@L192] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r10}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/r27}" [];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r10}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r19}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>/$r5}" -> "VarNode{<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/r1}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r21}" [color=green3,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/r1}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>/r2}" [color=blue];
  "VarNode{<java.net.URI: java.lang.String access$2202(java.net.URI,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String authority>}" [color=red];
  "VarNode{<java.net.URI: java.lang.String access$2202(java.net.URI,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.net.URI: java.net.URI create(java.lang.String)>[0@L850] new java.net.URI}.<java.net.URI: java.lang.String authority>}" [color=red];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27799}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[3@L540] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27799}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[47@L577] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27799}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>[26@L2571] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>/r3}" -> "VarNode{<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>/r2}" [color=blue];
  "VarNode{<java.util.logging.Logger: void <init>(java.lang.String,java.lang.String,java.lang.Class,java.util.logging.LogManager,boolean)>/r6}" -> "InstanceFieldNode{NewObj{<java.util.logging.LogManager: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String,java.lang.Class)>[3@L554] new java.util.logging.Logger}.<java.util.logging.Logger: java.lang.String name>}" [color=red];
  "VarNode{<java.util.logging.Logger: void <init>(java.lang.String,java.lang.String,java.lang.Class,java.util.logging.LogManager,boolean)>/r6}" -> "InstanceFieldNode{NewObj{<java.util.logging.LogManager$SystemLoggerContext: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String)>[3@L925] new java.util.logging.Logger}.<java.util.logging.Logger: java.lang.String name>}" [color=red];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r30}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r31}" [color=green3,style=dashed];
  "VarNode{<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>/$r2}" -> "VarNode{<sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String examineAliases(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,java.lang.String,int,java.util.Map)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.Class: java.lang.Object cast(java.lang.Object)>/$r3}" -> "VarNode{<java.lang.ClassCastException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[134@L444] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String cname>}" -> "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r15}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[134@L444] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String cname>}" -> "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r3}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r34}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Package: java.lang.Package getSystemPackage(java.lang.String)>/r7}" -> "VarNode{<java.lang.Package: java.lang.Package getSystemPackage(java.lang.String)>/$r3}" [color=green3,style=dashed];
  "VarNode{<java.lang.Package: java.lang.Package getSystemPackage(java.lang.String)>/r7}" -> "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" [color=blue];
  "VarNode{<javax.crypto.Cipher: void implInit(javax.crypto.CipherSpi,int,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.AlgorithmParameters,java.security.SecureRandom)>/$r10}" -> "VarNode{<java.lang.AssertionError: void <init>(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.util.concurrent.atomic.AtomicLongFieldUpdater$LockedUpdater: java.lang.RuntimeException accessCheckException(java.lang.Object)>/$r19}" -> "VarNode{<java.lang.IllegalAccessException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r34}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r2}" -> "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" -> "VarNode{<sun.misc.URLClassPath$FileLoader: void <init>(java.net.URL)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" -> "VarNode{<java.net.URLClassLoader: java.lang.Package definePackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" -> "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" -> "VarNode{<sun.reflect.AccessorGenerator: java.lang.String internalize(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" -> "VarNode{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" -> "VarNode{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String getKeyStoreUrl()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String getStorePassURL()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" -> "VarNode{<java.net.URLClassLoader: boolean isSealed(java.lang.String,java.util.jar.Manifest)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" -> "VarNode{<java.io.File: void <init>(java.net.URI)>/r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" -> "VarNode{<java.lang.Package$1: java.lang.Package run()>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" -> "VarNode{<sun.security.util.PolicyUtil: java.io.InputStream getInputStream(java.net.URL)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" -> "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" -> "VarNode{<java.net.URLClassLoader$1: java.lang.Class run()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" -> "VarNode{<java.lang.Package: void <init>(java.lang.String,java.util.jar.Manifest,java.net.URL,java.lang.ClassLoader)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" -> "VarNode{<java.lang.Package: java.lang.Package getSystemPackage(java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/$r16}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>[14@L1081] new javax.crypto.CryptoPermission}.<javax.crypto.CryptoPermission: java.lang.String alg>}" -> "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r4}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<sun.security.util.AlgorithmDecomposer: java.util.Collection getAliases(java.lang.String)>[14@L149] newarray java.lang.String[%intconst4]}}" -> "VarNode{<java.util.Arrays$ArrayList: java.lang.Object get(int)>/$r2}" [color=red,style=dashed];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r11}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r11}" -> "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r13}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r16}" [color=green3,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r13}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r22}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: java.lang.String[] getPackages(java.lang.String)>[6@L1480] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" -> "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r98}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.cert.Certificate[] getCertificates(java.security.KeyStore,java.lang.String,sun.security.provider.PolicyFile$PolicyInfo)>/r1}" [color=blue];
  "VarNode{<java.text.SimpleDateFormat: void encode(int,int,java.lang.StringBuilder)>/r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/$r4}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/$r5}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URI: java.net.URI create(java.lang.String)>[0@L850] new java.net.URI}.<java.net.URI: java.lang.String fragment>}" -> "VarNode{<java.net.URI: java.lang.String getFragment()>/$r3}" [color=red,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toUpperCase()>/%this}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase()>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toUpperCase()>/%this}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" -> "VarNode{<sun.security.util.PolicyUtil: java.io.InputStream getInputStream(java.net.URL)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" -> "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" -> "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r53}" [color=blue,style=dashed];
  "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" -> "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r48}" [color=blue,style=dashed];
  "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" -> "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r56}" [color=blue,style=dashed];
  "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" -> "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r41}" [color=blue,style=dashed];
  "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" -> "VarNode{<sun.misc.URLClassPath$FileLoader: void <init>(java.net.URL)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" -> "VarNode{<sun.misc.FileURLMapper: java.lang.String getPath()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" -> "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.security.Provider: void putId()>/$r2}" -> "VarNode{<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>/r0}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.JdkLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" [color=blue];
  "VarNode{<sun.security.util.DerValue: java.lang.String getPrintableString()>/$r7}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.DecimalFormatSymbols: java.lang.String getInternationalCurrencySymbol()>/$r1}" -> "VarNode{<sun.util.locale.provider.NumberFormatProviderImpl: void adjustForCurrencyDefaultFractionDigits(java.text.DecimalFormat,java.text.DecimalFormatSymbols)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.text.DecimalFormatSymbols: java.lang.String getInternationalCurrencySymbol()>/$r1}" -> "VarNode{<java.text.DecimalFormat: java.lang.String expandAffix(java.lang.String,java.lang.StringBuffer)>/$r8}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.IllegalReferenceCountException: void <init>(int,int)>/$r8}" -> "VarNode{<io.netty.util.IllegalReferenceCountException: void <init>(int,int)>/$r9}" [color=green3,style=dashed];
  "VarNode{<sun.security.pkcs.ContentInfo: byte[] getData()>/$r14}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter: java.lang.String toString()>/$r2}" -> "VarNode{<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>/$r4}" [color=blue,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r4}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/$r13}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r5}" -> "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r8}" [];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/r15}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/r15}" -> "VarNode{<java.math.BigInteger: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.util.Enumeration findResources(java.lang.String)>/r1}" -> "VarNode{<sun.misc.URLClassPath: java.util.Enumeration findResources(java.lang.String,boolean)>/r2}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r10}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r11}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r10}" -> "VarNode{<java.lang.String: java.lang.String toString()>/%this}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r3}" -> "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>[1@L1569] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String language>}" [color=red];
  "VarNode{<java.text.DigitList: long getLong()>/$r1}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<java.text.DigitList: long getLong()>/$r1}" -> "VarNode{<java.text.DigitList: long getLong()>/$r3}" [color=green3,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.AbstractCollection: java.lang.Object[] toArray()>[1@L136] newarray java.lang.Object[$i0]}}" -> "VarNode{<java.util.LinkedList: boolean addAll(int,java.util.Collection)>/r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[39@L113] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[39@L113] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r32}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[21@L1381] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<io.netty.handler.codec.DecoderResult: java.lang.String toString()>/$r6}" -> "VarNode{<io.netty.handler.codec.DecoderResult: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r19}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/r72}" [];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.resources.LocaleData: sun.util.resources.OpenListResourceBundle getSupplementary(java.lang.String,java.util.Locale)>/r1}" -> "VarNode{<sun.util.resources.LocaleData$2: void <init>(java.lang.String,java.util.Locale)>/r1}" [color=blue];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/$r18}" -> "VarNode{<java.security.NoSuchProviderException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>[54@L355] new sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint}.<sun.security.util.DisabledAlgorithmConstraints$Constraint: java.lang.String algorithm>}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r4}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r16}" -> "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>[1@L1569] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String script>}" [color=red];
  "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r7}" -> "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/r14}" [color=green3,style=dashed];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r47}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/r12}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r11}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/r12}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r36}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/r12}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r30}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/r12}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r24}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/r12}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase()>/%this}" [color=blue];
  "VarNode{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>/$r9}" -> "VarNode{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>/$r10}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r35}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r35}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC1779Name(java.util.Map)>/$r2}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC1779Name()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String,int)>/$r9}" -> "VarNode{<java.util.ArrayList: boolean add(java.lang.Object)>/r2}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509Key: java.lang.String toString()>/$r11}" -> "VarNode{<sun.security.x509.CertificateX509Key: java.lang.String toString()>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkUserInfo(java.lang.String)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URI$Parser: java.lang.String substring(int,int)>/$r1}" -> "VarNode{<java.net.URI$Parser: java.lang.String substring(int,int)>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.net.URI$Parser: java.lang.String substring(int,int)>/$r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>/$r15}" -> "VarNode{<sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>/$r16}" [color=green3,style=dashed];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/r0}" -> "VarNode{<java.security.Security: java.lang.Object[] getImpl(java.lang.String,java.lang.String,java.lang.String)>/r3}" [color=blue];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/r0}" -> "VarNode{<java.security.MessageDigest$Delegate: void <init>(java.security.MessageDigestSpi,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/r0}" -> "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r21}" [color=green3,style=dashed];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/r0}" -> "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r11}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[46@L479] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getParent()>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[46@L479] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean isDirectory()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[46@L479] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[46@L479] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[46@L479] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[46@L479] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getParent()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[46@L479] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[84@L155] new java.net.URL}.<java.net.URL: java.lang.String file>}" -> "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r18}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r40}" [];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r2}" -> "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r13}" [color=blue,style=dashed];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r2}" -> "VarNode{<sun.reflect.MethodAccessorGenerator: java.lang.String buildInternalSignature()>/$r8}" [color=blue,style=dashed];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r2}" -> "VarNode{<sun.reflect.MethodAccessorGenerator: java.lang.String buildInternalSignature()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r28}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r28}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r11}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)>/o}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r33}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r34}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r33}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.util.HashMap$TreeNode: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" -> "VarNode{<java.util.LinkedHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>/r0}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r14}" -> "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.security.Provider)>/r1}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r14}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.misc.JarIndex: void read(java.io.InputStream)>/r9}" -> "VarNode{<sun.misc.JarIndex: void addMapping(java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.EDIPartyName: java.lang.String toString()>/$r12}" -> "VarNode{<sun.security.x509.EDIPartyName: java.lang.String toString()>/$r13}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r2}" -> "VarNode{<java.net.SocketPermission: boolean match(java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.security.x509.X509Key: java.security.PublicKey buildX509Key(sun.security.x509.AlgorithmId,sun.security.util.BitArray)>/$r25}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509Key: java.security.PublicKey buildX509Key(sun.security.x509.AlgorithmId,sun.security.util.BitArray)>/$r25}" -> "VarNode{<sun.security.x509.X509Key: java.security.PublicKey buildX509Key(sun.security.x509.AlgorithmId,sun.security.util.BitArray)>/$r24}" [color=green3,style=dashed];
  "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/c6}" -> "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/$r20}" [color=green3,style=dashed];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r28}" -> "VarNode{<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Base64$Decoder: int decode0(byte[],int,int,byte[])>/$r15}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[3@L207] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" -> "VarNode{<java.lang.ref.Reference: java.lang.Object get()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.channel.ChannelOutboundBuffer$Entry$1: io.netty.channel.ChannelOutboundBuffer$Entry newObject(io.netty.util.Recycler$Handle)>[0@L764] new io.netty.channel.ChannelOutboundBuffer$Entry}.<io.netty.channel.ChannelOutboundBuffer$Entry: java.lang.Object msg>}" -> "VarNode{<io.netty.channel.ChannelOutboundBuffer: void close(java.nio.channels.ClosedChannelException)>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.channel.ChannelOutboundBuffer$Entry$1: io.netty.channel.ChannelOutboundBuffer$Entry newObject(io.netty.util.Recycler$Handle)>[0@L764] new io.netty.channel.ChannelOutboundBuffer$Entry}.<io.netty.channel.ChannelOutboundBuffer$Entry: java.lang.Object msg>}" -> "VarNode{<io.netty.channel.ChannelOutboundBuffer$Entry: int cancel()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.channel.ChannelOutboundBuffer$Entry$1: io.netty.channel.ChannelOutboundBuffer$Entry newObject(io.netty.util.Recycler$Handle)>[0@L764] new io.netty.channel.ChannelOutboundBuffer$Entry}.<io.netty.channel.ChannelOutboundBuffer$Entry: java.lang.Object msg>}" -> "VarNode{<io.netty.channel.ChannelOutboundBuffer: boolean remove0(java.lang.Throwable,boolean)>/r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.channel.ChannelOutboundBuffer$Entry$1: io.netty.channel.ChannelOutboundBuffer$Entry newObject(io.netty.util.Recycler$Handle)>[0@L764] new io.netty.channel.ChannelOutboundBuffer$Entry}.<io.netty.channel.ChannelOutboundBuffer$Entry: java.lang.Object msg>}" -> "VarNode{<io.netty.channel.ChannelOutboundBuffer: java.lang.Object current()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.channel.ChannelOutboundBuffer$Entry$1: io.netty.channel.ChannelOutboundBuffer$Entry newObject(io.netty.util.Recycler$Handle)>[0@L764] new io.netty.channel.ChannelOutboundBuffer$Entry}.<io.netty.channel.ChannelOutboundBuffer$Entry: java.lang.Object msg>}" -> "VarNode{<io.netty.channel.ChannelOutboundBuffer: boolean remove()>/r2}" [color=red,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r65}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r66}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.PlatformDependent: boolean isWindows0()>/$r0}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r42}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r43}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.util.Calendar,char,java.util.Locale)>/r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r28}" -> "VarNode{<io.netty.util.internal.logging.Log4JLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r28}" -> "VarNode{<io.netty.util.internal.logging.JdkLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseExtlangs(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" -> "VarNode{<java.util.ArrayList: boolean add(java.lang.Object)>/r2}" [color=blue];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r34}" -> "VarNode{<java.lang.Throwable$WrappedPrintStream: void println(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r34}" -> "VarNode{<java.lang.Throwable$WrappedPrintWriter: void println(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.util.MissingFormatArgumentException: java.lang.String getMessage()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r108}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r108}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r25}" -> "VarNode{<java.net.UnknownHostException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r13}" -> "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/r14}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X500Name: void parseDN(java.lang.String,java.util.Map)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: void parseDN(java.lang.String,java.util.Map)>/r0}" -> "VarNode{<sun.security.x509.X500Name: void parseDN(java.lang.String,java.util.Map)>/$r4}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X500Name: void parseDN(java.lang.String,java.util.Map)>/r0}" -> "VarNode{<sun.security.x509.X500Name: void parseDN(java.lang.String,java.util.Map)>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X500Name: void parseDN(java.lang.String,java.util.Map)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r11}" -> "VarNode{<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>/$r11}" -> "VarNode{<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.net.URI: java.net.URL toURL()>/$r2}" -> "VarNode{<java.net.URL: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r5}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r10}" [];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r5}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase()>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r28}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r29}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r28}" -> "VarNode{<java.lang.String: java.lang.String toString()>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1789] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.LinkedHashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1789] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1789] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1789] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1789] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.LinkedHashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1789] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap$KeyIterator: java.lang.Object next()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1789] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object key>}" -> "VarNode{<java.util.HashMap$Node: java.lang.Object getKey()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.MimeType: java.lang.String parseSuffix(java.lang.String)>/r9}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" -> "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp344}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" -> "VarNode{<sun.security.util.AlgorithmDecomposer: java.util.Set decomposeImpl(java.lang.String)>/r7}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" -> "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/r25}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/r89}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/r4}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" -> "VarNode{<java.util.Arrays$ArrayList: java.lang.Object get(int)>/$r2}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" -> "VarNode{<java.util.ArrayList: java.lang.Object remove(int)>/%native-arraycopy-temp338}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" -> "VarNode{<java.util.ArrayList$Itr: java.lang.Object next()>/$r4}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" -> "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp341}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" -> "VarNode{<sun.security.util.AlgorithmDecomposer: java.util.Set decomposeImpl(java.lang.String)>/r4}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" -> "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/$r6}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" -> "VarNode{<java.util.ArrayList: java.lang.Object elementData(int)>/$r2}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" -> "VarNode{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>/%native-arraycopy-temp47}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" -> "VarNode{<sun.security.util.CurveDB: java.lang.String[] getNamesByOID(java.lang.String)>/$r7}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" -> "VarNode{<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>/%native-arraycopy-temp383}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.URIName: void <init>(java.lang.String)>/$r34}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r62}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r12}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r14}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r41}" -> "VarNode{<java.lang.Exception: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.FileURLMapper: java.lang.String getPath()>/$r10}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>[3@L937] new sun.misc.FileURLMapper}.<sun.misc.FileURLMapper: java.lang.String path>}" [color=red];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r2}" -> "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r3}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r2}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase()>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.CurrencyNameProviderImpl: java.lang.String getString(java.lang.String,java.util.Locale)>/r5}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>/r2}" [color=blue];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class,java.lang.ClassLoader)>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.math.BigDecimal: boolean commonNeedIncrement(int,int,int,boolean)>/$r5}" -> "VarNode{<java.lang.AssertionError: void <init>(java.lang.Object)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.LinkedList: void linkBefore(java.lang.Object,java.util.LinkedList$Node)>[1@L158] new java.util.LinkedList$Node}.<java.util.LinkedList$Node: java.lang.Object item>}" -> "VarNode{<java.util.LinkedList: java.lang.Object[] toArray()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.LinkedList: void linkBefore(java.lang.Object,java.util.LinkedList$Node)>[1@L158] new java.util.LinkedList$Node}.<java.util.LinkedList$Node: java.lang.Object item>}" -> "VarNode{<java.util.LinkedList$ListItr: java.lang.Object next()>/$r5}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.provider.RuleBasedBreakIterator: byte[] readFile(java.lang.String)>/$r11}" -> "VarNode{<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ArrayList: void subListRangeCheck(int,int,int)>/$r7}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r22}" -> "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r22}" -> "VarNode{<java.util.Locale: java.lang.String toString()>/$r20}" [color=green3,style=dashed];
  "VarNode{<java.util.jar.Manifest: java.util.jar.Attributes getTrustedAttributes(java.lang.String)>/$r9}" -> "VarNode{<java.lang.SecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String groupname(int)>/$r3}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$Node group0()>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String groupname(int)>/$r3}" -> "VarNode{<java.util.regex.Pattern: int escape(boolean,boolean,boolean)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.security.cert.CRLException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r18}" -> "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r19}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r18}" -> "VarNode{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r4}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.net.MalformedURLException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.HashMap: java.lang.Object get(java.lang.Object)>/$r3}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r56}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>/r1}" -> "VarNode{<java.lang.ClassLoader: java.util.Enumeration getBootstrapResources(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>/r1}" -> "VarNode{<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>/r4}" [color=blue];
  "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r31}" -> "VarNode{<java.lang.String: java.lang.String toString()>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r31}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r32}" [color=green3,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>/%this}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>/r2}" [color=blue];
  "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>[0@L535] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String suffix>}" [color=red];
  "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>[0@L692] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String suffix>}" [color=red];
  "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/$r3}" -> "InstanceFieldNode{NewObj{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>[18@L699] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String suffix>}" [color=red];
  "VarNode{<java.net.SocketPermission: void getCanonName()>/$r11}" -> "VarNode{<java.net.SocketPermission: void getCanonName()>/$r12}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: void getCanonName()>/$r11}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase()>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r49}" -> "VarNode{<java.lang.SecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/$r11}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/$r6}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r2}" [color=blue];
  "VarNode{<sun.util.logging.PlatformLogger$JavaLoggerProxy: void <init>(java.lang.String,sun.util.logging.PlatformLogger$Level)>/r1}" -> "VarNode{<sun.util.logging.PlatformLogger$LoggerProxy: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r5}" -> "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/r13}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r17}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String,boolean)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r25}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r26}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r25}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r24}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.UniqueName: void <init>(java.util.concurrent.ConcurrentMap,java.lang.String,java.lang.Object[])>/$r5}" -> "InstanceFieldNode{NewObj{<io.netty.util.Signal: void <init>(java.lang.String)>[1@L50] new io.netty.util.UniqueName}.<io.netty.util.UniqueName: java.lang.String name>}" [color=red];
  "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/$r2}" -> "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/r8}" [];
  "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>/r1}" -> "VarNode{<sun.misc.JarIndex: java.util.LinkedList get(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>/r1}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>/r1}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>/r1}" [color=blue];
  "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>/r1}" -> "VarNode{<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r1}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r17}" [color=green3,style=dashed];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r1}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r29}" [color=green3,style=dashed];
  "VarNode{<java.io.ObjectStreamField: java.lang.String getClassSignature(java.lang.Class)>/$r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.io.ObjectStreamField: java.lang.String getClassSignature(java.lang.Class)>/$r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r71}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: int escape(boolean,boolean,boolean)>/$r18}" -> "VarNode{<java.util.regex.Pattern: int escape(boolean,boolean,boolean)>/$r19}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>/argA}" -> "ArrayIndexNode{NewObj{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>[1@L159] newarray java.lang.Object[%intconst0]}}" [color=red];
  "VarNode{<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>/r0}" -> "VarNode{<java.util.logging.Logger: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String,java.lang.Class)>/r2}" [color=blue];
  "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/$r9}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/$r9}" -> "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/r2}" [color=green3,style=dashed];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27939}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1774] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27939}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1789] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27939}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1784] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27939}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1779] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object value>}" [color=red];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeExtension(java.lang.String)>/$r1}" -> "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r17}" [color=blue,style=dashed];
  "VarNode{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>/$r42}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.util.ManifestEntryVerifier: sun.security.util.JarConstraintsParameters getParams(java.util.Map,java.util.Map)>[8@L270] new sun.security.util.JarConstraintsParameters}.<sun.security.util.JarConstraintsParameters: java.lang.String message>}" -> "VarNode{<sun.security.util.JarConstraintsParameters: java.lang.String extendedExceptionMsg()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r74}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/r87}" [];
  "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/r0}" -> "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/r7}" [];
  "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/r0}" -> "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigDecimal,java.lang.StringBuffer,java.text.FieldPosition)>/$r5}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>/$r10}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.provider.CurrencyNameProviderImpl: java.lang.String getDisplayName(java.lang.String,java.util.Locale)>/r1}" -> "VarNode{<sun.util.locale.provider.CurrencyNameProviderImpl: java.lang.String getDisplayName(java.lang.String,java.util.Locale)>/$r3}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.provider.CurrencyNameProviderImpl: java.lang.String getDisplayName(java.lang.String,java.util.Locale)>/r1}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.Policy$2: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.security.Policy: java.security.Policy getPolicyNoCheck()>[37@L201] new java.security.Policy$2}.<java.security.Policy$2: java.lang.String val$pc>}" [color=red];
  "VarNode{<sun.security.x509.OtherName: sun.security.x509.GeneralNameInterface getGNI(sun.security.util.ObjectIdentifier,byte[])>/$r13}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/r11}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/$r17}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/r11}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/$r15}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/r11}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.ChannelPipelineException: void <init>(java.lang.String,java.lang.Throwable)>/message}" -> "VarNode{<io.netty.channel.ChannelException: void <init>(java.lang.String,java.lang.Throwable)>/message}" [color=blue];
  "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/r25}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/r14}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r30}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" [];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[0@L823] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[0@L823] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: java.lang.String getProtocol()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r24}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r11}" -> "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/r7}" [color=blue];
  "ArrayIndexNode{NewObj{<java.util.Vector: void <init>(int,int)>[12@L138] newarray java.lang.Object[i0]}}" -> "VarNode{<java.util.Vector: java.lang.Object elementData(int)>/$r2}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.Vector: void <init>(int,int)>[12@L138] newarray java.lang.Object[i0]}}" -> "VarNode{<java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>/%native-arraycopy-temp362}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.Vector: void <init>(int,int)>[12@L138] newarray java.lang.Object[i0]}}" -> "VarNode{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>/%native-arraycopy-temp47}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.Vector: void <init>(int,int)>[12@L138] newarray java.lang.Object[i0]}}" -> "VarNode{<java.util.Vector: void removeElementAt(int)>/%native-arraycopy-temp104}" [color=red,style=dashed];
  "VarNode{<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)>/r1}" -> "VarNode{<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String scheme>}" -> "VarNode{<java.net.URI: void defineString()>/$r19}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseRegion(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" -> "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[21@L199] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String region>}" [color=red];
  "VarNode{<java.util.zip.ZipFile: java.lang.String getName()>/$r1}" -> "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.util.zip.ZipFile: java.lang.String getName()>/$r1}" -> "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.util.zip.ZipFile: java.lang.String getName()>/$r1}" -> "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r7}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.SunEntries: java.io.File getDeviceFile(java.net.URL)>[26@L386] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/request}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.net.Inet4Address: java.lang.String getHostAddress()>/$r2}" -> "VarNode{<java.net.SocketPermission: void getCanonName()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.net.Inet4Address: java.lang.String getHostAddress()>/$r2}" -> "VarNode{<java.net.InetAddress: java.lang.String getHostFromNameService(java.net.InetAddress,boolean)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.net.Inet4Address: java.lang.String getHostAddress()>/$r2}" -> "VarNode{<java.net.InetAddress: java.lang.String getHostFromNameService(java.net.InetAddress,boolean)>/r12}" [color=blue,style=dashed];
  "VarNode{<java.net.Inet4Address: java.lang.String getHostAddress()>/$r2}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.net.Inet4Address: java.lang.String getHostAddress()>/$r2}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.net.Inet4Address: java.lang.String getHostAddress()>/$r2}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.net.Inet4Address: java.lang.String getHostAddress()>/$r2}" -> "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<sun.misc.JarFilter: boolean accept(java.io.File,java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase()>/%this}" [color=blue];
  "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r28}" -> "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r29}" [color=green3,style=dashed];
  "VarNode{<sun.util.logging.PlatformLogger$JavaLoggerProxy: void <init>(java.lang.String)>/r1}" -> "VarNode{<sun.util.logging.PlatformLogger$JavaLoggerProxy: void <init>(java.lang.String,sun.util.logging.PlatformLogger$Level)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/r2}" -> "VarNode{<java.net.URI: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>/r2}" [color=blue];
  "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/r2}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC1779DN(java.util.Map)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC1779DN(java.util.Map)>/$r10}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC1779DN(java.util.Map)>/$r14}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/r5}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/r5}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigInteger,java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/r5}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/r5}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/r5}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigDecimal,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r9}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r110}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.misc.MessageUtils: void err(java.lang.String)>/$r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.BufferedReader: java.lang.String readLine(boolean)>/$r9}" -> "VarNode{<java.io.BufferedReader: java.lang.String readLine()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>/$r11}" -> "VarNode{<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>/r14}" [];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r19}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/r4}" [];
  "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle findBundleInCache(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle$Control)>/$r13}" -> "VarNode{<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>/r12}" [color=blue];
  "VarNode{<io.netty.channel.ChannelOutboundBuffer$Entry: io.netty.channel.ChannelOutboundBuffer$Entry newInstance(java.lang.Object,int,long,io.netty.channel.ChannelPromise)>/r3}" -> "InstanceFieldNode{NewObj{<io.netty.channel.ChannelOutboundBuffer$Entry$1: io.netty.channel.ChannelOutboundBuffer$Entry newObject(io.netty.util.Recycler$Handle)>[0@L764] new io.netty.channel.ChannelOutboundBuffer$Entry}.<io.netty.channel.ChannelOutboundBuffer$Entry: java.lang.Object msg>}" [color=red];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r10}" -> "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r20}" [];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getEncAlgFromSigAlg(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" -> "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" -> "VarNode{<sun.util.locale.provider.CurrencyNameProviderImpl: java.lang.String getSymbol(java.lang.String,java.util.Locale)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" -> "VarNode{<javax.crypto.JceSecurityManager: javax.crypto.CryptoPermission getCryptoPermission(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" -> "VarNode{<javax.crypto.Cipher$Transform: boolean matches(java.lang.String,java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void <init>(java.util.ArrayList,sun.security.util.ManifestDigester,java.lang.String,byte[])>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r77}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" -> "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" -> "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" -> "VarNode{<sun.security.x509.AlgorithmId: java.util.HashMap computeOidTable()>/r15}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r13}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r15}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r13}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: void callHandlerAdded0(io.netty.channel.AbstractChannelHandlerContext)>/$r12}" -> "VarNode{<io.netty.channel.ChannelPipelineException: void <init>(java.lang.String,java.lang.Throwable)>/message}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>[21@L454] new java.util.StringJoiner}.<java.util.StringJoiner: java.lang.StringBuilder value>}" -> "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>[21@L454] new java.util.StringJoiner}.<java.util.StringJoiner: java.lang.StringBuilder value>}" -> "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>[21@L454] new java.util.StringJoiner}.<java.util.StringJoiner: java.lang.StringBuilder value>}" -> "VarNode{<java.util.StringJoiner: java.lang.StringBuilder prepareBuilder()>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>[21@L454] new java.util.StringJoiner}.<java.util.StringJoiner: java.lang.StringBuilder value>}" -> "VarNode{<java.util.StringJoiner: java.lang.StringBuilder prepareBuilder()>/$r5}" [color=red,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/$r11}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/$r12}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/$r11}" -> "VarNode{<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r23}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r25}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[28@L676] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r35}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>/r3}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>/r3}" [color=blue];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[25@L451] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String pad>}" -> "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/r32}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[25@L451] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String pad>}" -> "VarNode{<javax.crypto.Cipher$Transform: int supportsPadding(java.security.Provider$Service)>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.X500Name: java.lang.String toString()>/$r2}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r18}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X500Name: java.lang.String toString()>/$r2}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r46}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X500Name: java.lang.String toString()>/$r2}" -> "VarNode{<javax.security.auth.x500.X500Principal: java.lang.String toString()>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X500Name: java.lang.String toString()>/$r2}" -> "VarNode{<sun.security.x509.GeneralName: java.lang.String toString()>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/$r33}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r5}" -> "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r6}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r5}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase()>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r45}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>/$r23}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/r20}" -> "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r3}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r32}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r32}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" [color=green3,style=dashed];
  "VarNode{<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>/$r8}" -> "VarNode{<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r21}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r25}" [color=green3,style=dashed];
  "VarNode{<java.util.zip.ZipEntry: java.lang.String getName()>/$r1}" -> "VarNode{<java.util.jar.JarFile: java.util.jar.Manifest getManifestFromReference()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.util.zip.ZipEntry: java.lang.String getName()>/$r1}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.util.zip.ZipEntry: java.lang.String getName()>/$r1}" -> "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.util.zip.ZipEntry: java.lang.String getName()>/$r1}" -> "VarNode{<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.zip.ZipEntry: java.lang.String getName()>/$r1}" -> "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.zip.ZipEntry: java.lang.String getName()>/$r1}" -> "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/$r15}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/$r32}" -> "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/$r33}" [color=green3,style=dashed];
  "VarNode{<java.security.MessageDigest: java.lang.String toString()>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r30}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r30}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r30}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r30}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r10}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r11}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>[1@L1569] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String region>}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r3}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.BaseLocale$1)>/r2}" -> "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r18}" -> "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r19}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>[13@L181] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String rfc1779Dn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC1779Name(java.util.Map)>/$r6}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>[13@L181] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String rfc1779Dn>}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC1779Name(java.util.Map)>/$r5}" [color=red,style=dashed];
  "VarNode{<io.netty.channel.AbstractChannel: java.lang.String toString()>/$r5}" -> "InstanceFieldNode{NewObj{<Server: void main(java.lang.String[])>[2@L10] new io.netty.channel.embedded.EmbeddedChannel}.<io.netty.channel.AbstractChannel: java.lang.String strVal>}" [color=red];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r40}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/r1}" -> "VarNode{<java.net.Parts: void <init>(java.lang.String)>/r3}" [color=blue];
  "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/$r0}" -> "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/$r2}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/$r0}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean match(java.lang.String,java.lang.String)>/$r3}" -> "VarNode{<sun.security.util.RegisteredDomain: java.util.Optional from(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.security.Signature: boolean isSpi(java.security.Provider$Service)>/$r16}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>/r2}" -> "VarNode{<java.lang.ClassLoader: java.net.URL getBootstrapResource(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>/r2}" -> "VarNode{<java.net.URLClassLoader: java.net.URL findResource(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>/r2}" -> "VarNode{<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>/r2}" [color=blue];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[36@L452] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String mode>}" -> "VarNode{<javax.crypto.Cipher$Transform: int supportsMode(java.security.Provider$Service)>/$r2}" [color=red,style=dashed];
  "VarNode{<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>/r0}" -> "VarNode{<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>/r0}" [color=blue];
  "VarNode{<java.lang.String: java.lang.String trim()>/%this}" -> "VarNode{<java.lang.String: java.lang.String trim()>/$r4}" [];
  "VarNode{<java.lang.String: java.lang.String trim()>/%this}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r3}" -> "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27897}" [];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r3}" -> "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27899}" [];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>[67@L864] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URI$Parser: void parse(boolean)>/$r3}" -> "VarNode{<java.net.URI: java.lang.String access$1102(java.net.URI,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r15}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r16}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$i1}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r23}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry: java.lang.String getKey()>/$r2}" -> "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry: java.lang.Object getKey()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r24}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<java.util.TreeMap: java.lang.Object get(java.lang.Object)>/$r3}" -> "VarNode{<sun.util.locale.UnicodeLocaleExtension: java.lang.String getUnicodeLocaleType(java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.util.TreeMap: java.lang.Object get(java.lang.Object)>/$r3}" -> "VarNode{<java.util.JapaneseImperialCalendar: java.util.Map getDisplayNames(int,int,java.util.Locale)>/$r13}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r9}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.CurveDB: java.lang.String[] getNamesByOID(java.lang.String)>/$r7}" -> "VarNode{<sun.security.util.CurveDB: java.lang.String[] getNamesByOID(java.lang.String)>/$r8}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.CurveDB: java.lang.String[] getNamesByOID(java.lang.String)>/$r7}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "VarNode{<sun.text.normalizer.UTF16: java.lang.StringBuffer append(java.lang.StringBuffer,int)>/$r5}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>[26@L733] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>/r7}" -> "VarNode{<java.lang.ref.SoftReference: void <init>(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.pkcs.ParsingException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigDecimal,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r9}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigDecimal,java.lang.StringBuffer,java.text.FieldPosition)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>/$r7}" -> "VarNode{<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence,int,int)>/$r11}" -> "VarNode{<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[68@L701] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.SerialNumber: java.lang.String toString()>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String query>}" -> "VarNode{<java.net.URI: void defineString()>/$r9}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.provider.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>/$r9}" -> "VarNode{<java.lang.Error: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>/$r8}" -> "VarNode{<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty getInstance()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>/$r8}" -> "VarNode{<sun.text.normalizer.NormalizerImpl: void <clinit>()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>/$r8}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>/$r8}" -> "VarNode{<sun.text.normalizer.UCharacter: void <clinit>()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>/$r8}" -> "VarNode{<java.lang.Throwable: java.lang.String getLocalizedMessage()>/$r1}" [color=blue,style=dashed];
  "VarNode{<io.netty.channel.embedded.EmbeddedChannel$LastInboundHandler: void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)>/msg}" -> "VarNode{<java.util.ArrayDeque: boolean add(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>/r0}" -> "VarNode{<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>/$c1}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderConfig$1: java.lang.Boolean run()>[0@L105] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderConfig$1: java.lang.Boolean run()>[0@L105] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderConfig$1: java.lang.Boolean run()>[0@L105] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>/$r17}" -> "VarNode{<java.util.HashSet: boolean add(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>/r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>/r2}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String getCurrencyName(java.lang.String)>/$r1}" [color=green3,style=dashed];
  "VarNode{<sun.misc.FileURLMapper: java.lang.String getPath()>/$r9}" -> "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/%this}" [color=green3,style=dashed];
  "VarNode{<sun.security.pkcs.PKCS7: void parseOldSignedData(sun.security.util.DerValue)>/$r32}" -> "VarNode{<sun.security.pkcs.ParsingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.jar.Attributes$Name: java.lang.String toString()>/$r1}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.util.jar.Attributes$Name: java.lang.String toString()>/$r1}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.util.jar.Attributes$Name: java.lang.String toString()>/$r1}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.jar.Attributes$Name: java.lang.String toString()>/$r1}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.util.jar.Attributes$Name: java.lang.String toString()>/$r1}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.security.BasicPermissionCollection: void add(java.security.Permission)>/$r12}" -> "VarNode{<java.security.BasicPermissionCollection: void add(java.security.Permission)>/$r13}" [color=green3,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.util.zip.ZipError>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.jca.Providers: sun.security.jca.ProviderList beginThreadProviderList(sun.security.jca.ProviderList)>/$r8}" -> "VarNode{<sun.security.jca.Providers: sun.security.jca.ProviderList beginThreadProviderList(sun.security.jca.ProviderList)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.security.Security: void initialize()>/$r64}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<java.lang.SecurityManager: void checkLink(java.lang.String)>/$r6}" -> "VarNode{<java.lang.RuntimePermission: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/r38}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r49}" [color=green3,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String getCountry()>/$r2}" -> "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String getCountry()>/$r2}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String getCountry()>/$r2}" -> "VarNode{<java.util.Currency: java.util.Currency getInstance(java.util.Locale)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String getCountry()>/$r2}" -> "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String getCountry()>/$r2}" -> "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r5}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r12}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r5}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r24}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>[25@L455] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>[25@L455] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>[25@L455] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.rsa.RSAUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.security.AlgorithmParameters)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r3}" -> "VarNode{<sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.FloatingDecimal: double parseDouble(java.lang.String)>/r0}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/r8}" [color=blue];
  "VarNode{<java.net.URI: java.lang.String access$1002(java.net.URI,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String schemeSpecificPart>}" [color=red];
  "VarNode{<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>/r1}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.util.Hashtable: void <init>(int,float)>/$r11}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.HostLocaleProviderAdapter: java.util.spi.LocaleServiceProvider findInstalledProvider(java.lang.Class)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r32}" -> "VarNode{<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r14}" -> "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r15}" [color=green3,style=dashed];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r14}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/r15}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline addLast(io.netty.util.concurrent.EventExecutorGroup,io.netty.channel.ChannelHandler[])>/$r4}" [color=blue,style=dashed];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/r15}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r8}" [color=green3,style=dashed];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/r15}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: java.lang.String typeName(java.lang.Class)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.Class$Atomic: long objectFieldOffset(java.lang.reflect.Field[],java.lang.String)>/$r9}" -> "VarNode{<java.lang.Error: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.math.BigInteger: void implSquareToLenChecks(int[],int,int[],int)>/$r20}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.lang.Class defineClass(java.lang.String,sun.misc.Resource)>/$r14}" -> "VarNode{<java.net.URLClassLoader: void definePackageInternal(java.lang.String,java.util.jar.Manifest,java.net.URL)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r8}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[87@L554] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>/$r15}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged sun.security.pkcs.ParsingException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<io.netty.channel.ChannelOutboundBuffer: java.lang.Object current()>/$r2}" -> "VarNode{<io.netty.channel.embedded.EmbeddedChannel: void doWrite(io.netty.channel.ChannelOutboundBuffer)>/$r1}" [color=blue,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r6}" -> "VarNode{<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Locale$Builder: void <init>()>[1@L2373] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String region>}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r3}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r11}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r10}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r43}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r44}" [color=green3,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.security.SignatureException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r18}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-558}" [];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r18}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-556}" [];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r22}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r21}" [color=green3,style=dashed];
  "VarNode{<java.util.zip.ZipFile: java.lang.String access$800(java.util.zip.ZipFile)>/$r1}" -> "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r20}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r37}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r22}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r22}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r22}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r22}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r9}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r10}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveFile(java.net.URL,java.lang.String)>[10@L1296] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveFile(java.net.URL,java.lang.String)>[10@L1296] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveFile(java.net.URL,java.lang.String)>[10@L1296] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: java.lang.String getProtocol()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveFile(java.net.URL,java.lang.String)>[10@L1296] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" [color=red,style=dashed];
  "VarNode{<java.net.URI$Parser: int parseServer(int,int)>/$r6}" -> "VarNode{<java.net.URI: java.lang.String access$2302(java.net.URI,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r12}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r12}" -> "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r1}" [color=green3,style=dashed];
  "VarNode{<java.net.URI: java.lang.String decode(java.lang.String)>/r0}" -> "VarNode{<java.net.URI: java.lang.String getPath()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.net.URI: java.lang.String decode(java.lang.String)>/r0}" -> "VarNode{<java.net.URI: java.lang.String decode(java.lang.String)>/c8}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeExtension(java.lang.String)>/r0}" -> "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.Properties: java.lang.String getProperty(java.lang.String)>/$r6}" -> "VarNode{<java.util.Properties: java.lang.String getProperty(java.lang.String)>/r3}" [];
  "VarNode{<java.lang.ClassNotFoundException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.ReflectiveOperationException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r91}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r91}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r16}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<io.netty.buffer.PooledByteBufAllocator: void <init>(boolean,int,int,int,int,int,int,int)>/$r23}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.lang.NumberFormatException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.provider.BreakIteratorProviderImpl: java.text.BreakIterator getBreakInstance(java.util.Locale,int,java.lang.String,java.lang.String)>/$r24}" -> "VarNode{<java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r28}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r28}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r28}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r28}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>[67@L1256] new sun.security.util.ObjectIdentifier}.<sun.security.util.ObjectIdentifier: java.lang.String stringForm>}" [color=red];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier algOID(java.lang.String)>[9@L494] new sun.security.util.ObjectIdentifier}.<sun.security.util.ObjectIdentifier: java.lang.String stringForm>}" [color=red];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.x509.AlgorithmId: java.util.HashMap computeOidTable()>[39@L665] new sun.security.util.ObjectIdentifier}.<sun.security.util.ObjectIdentifier: java.lang.String stringForm>}" [color=red];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/r1}" -> "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/r15}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier algOID(java.lang.String)>[15@L496] new sun.security.util.ObjectIdentifier}.<sun.security.util.ObjectIdentifier: java.lang.String stringForm>}" [color=red];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>[35@L1238] new sun.security.util.ObjectIdentifier}.<sun.security.util.ObjectIdentifier: java.lang.String stringForm>}" [color=red];
  "ArrayIndexNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>[7@L1102] newarray java.lang.String[$i0]}}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>/r9}" [color=red,style=dashed];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r14}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/r12}" [color=blue];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r14}" -> "VarNode{<java.util.regex.Pattern: void normalize()>/$r6}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/$r8}" -> "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>/r1}" -> "VarNode{<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>/r3}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r15}" -> "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r16}" [color=green3,style=dashed];
  "VarNode{<java.io.DataInputStream: java.lang.String readUTF(java.io.DataInput)>/$r6}" -> "VarNode{<java.io.UTFDataFormatException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseQuotedString(java.io.Reader,java.lang.StringBuilder)>/$r7}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r35}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[60@L297] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[60@L297] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[60@L297] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[60@L297] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.net.URI: java.lang.String access$002(java.net.URI,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String string>}" [color=red];
  "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r65}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.pkcs.PKCS9Attributes: byte[] decode(sun.security.util.DerInputStream)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: void incWaiters()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r42}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.x509.OIDMap$OIDInfo: java.lang.Class getClazz()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.jca.Providers: sun.security.jca.ProviderList beginThreadProviderList(sun.security.jca.ProviderList)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.util.GregorianCalendar: int computeFields(int,int)>/$r62}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.io.FilePermissionCollection: void add(java.security.Permission)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.pkcs.PKCS9Attributes: java.lang.Object getAttributeValue(sun.security.util.ObjectIdentifier)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r75}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.BasicPermissionCollection: void add(java.security.Permission)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.UnresolvedPermissionCollection: void add(java.security.Permission)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.util.logging.LogManager: void readPrimordialConfiguration()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.net.SocketPermissionCollection: void add(java.security.Permission)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r69}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r61}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r31}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.util.PropertyPermissionCollection: void add(java.security.Permission)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.pkcs.PKCS7: void parse(sun.security.util.DerInputStream,boolean)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.Timestamp: java.lang.String toString()>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<io.netty.util.internal.TypeParameterMatcher: java.lang.Class find0(java.lang.Object,java.lang.Class,java.lang.String)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r71}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.Security: void initialize()>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.pkcs.PKCS9Attribute: void throwSingleValuedException()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r40}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.SecureClassLoader: java.security.ProtectionDomain getProtectionDomain(java.security.CodeSource)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.security.CodeSigner[] getSigners(sun.security.pkcs.SignerInfo[],sun.security.pkcs.PKCS7)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.AccessControlContext$1: java.lang.Void run()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r31}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.jca.ProviderConfig: java.security.Provider getProvider()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderName(java.lang.CharSequence)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r33}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r95}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r68}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.BasicPermissionCollection: void add(java.security.Permission)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.util.locale.provider.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<io.netty.util.internal.TypeParameterMatcher: java.lang.Class fail(java.lang.Class,java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<io.netty.util.concurrent.PromiseTask: java.lang.StringBuilder toStringBuilder()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.lang.Throwable: void printStackTrace(java.lang.Throwable$PrintStreamOrWriter)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.provider.PolicyFile: void addPerms(java.security.Permissions,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.pkcs.PKCS9Attributes: byte[] decode(sun.security.util.DerInputStream)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.CodeSigner: java.lang.String toString()>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext: boolean validatePromise(io.netty.channel.ChannelPromise,boolean)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.Timestamp: java.lang.String toString()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.util.GregorianCalendar: int computeFields(int,int)>/$r40}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.AccessController: void checkPermission(java.security.Permission)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.provider.PolicyFile: void initPolicyFile(sun.security.provider.PolicyFile$PolicyInfo,java.net.URL)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.x509.OtherName: sun.security.x509.GeneralNameInterface getGNI(sun.security.util.ObjectIdentifier,byte[])>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.time.Instant: java.time.Instant from(java.time.temporal.TemporalAccessor)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r40}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.AllPermissionCollection: void add(java.security.Permission)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.Security: void initialize()>/$r65}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.jca.Providers: void endThreadProviderList(sun.security.jca.ProviderList)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r75}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r57}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r59}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<javax.crypto.CryptoPolicyParser: java.security.spec.AlgorithmParameterSpec getInstance(java.lang.String,java.lang.Integer[])>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.x509.CertificateExtensions: void parseExtension(sun.security.x509.Extension)>/$r37}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r37}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.pkcs.PKCS9Attribute: void <init>(sun.security.util.DerValue)>/$r52}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.pkcs.ContentInfo: byte[] getData()>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.Security: void initialize()>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.x509.X509CertImpl: void <init>(sun.security.util.DerValue)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r54}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.math.BigDecimal: boolean commonNeedIncrement(int,int,int,boolean)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r47}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r52}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderName(java.lang.CharSequence)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<java.security.CodeSigner: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r3}" -> "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r73}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: java.lang.String typeName(java.lang.Class)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.zip.ZipInputStream: void readEnd(java.util.zip.ZipEntry)>/$r33}" -> "VarNode{<java.util.zip.ZipException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r76}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.text.ParseException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/r0}" -> "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/r0}" -> "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/$r4}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>[52@L98] new sun.util.locale.Extension}.<sun.util.locale.Extension: java.lang.String value>}" -> "VarNode{<sun.util.locale.Extension: java.lang.String getValue()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.CertificateX509Key: java.lang.String toString()>/$r3}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.util.ServiceLoader: void access$300(java.lang.Class,java.lang.String)>/r1}" -> "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>/r6}" [color=blue];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r23}" -> "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r0}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>[0@L1054] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String pattern>}" -> "VarNode{<java.util.regex.Pattern: void compile()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>[0@L1054] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String pattern>}" -> "VarNode{<java.util.regex.Pattern: void normalize()>/$r2}" [color=red,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r82}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r83}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.RDN: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.RDN: java.lang.String toString()>/$r7}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toString()>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.net.URI: java.lang.String decode(java.lang.String)>/$r18}" -> "VarNode{<java.net.URI: java.lang.String decode(java.lang.String)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.net.URI: java.lang.String decode(java.lang.String)>/$r18}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.ChannelOutboundBuffer: boolean remove()>/r2}" -> "VarNode{<io.netty.util.ReferenceCountUtil: void safeRelease(java.lang.Object)>/r0}" [color=blue];
  "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(long)>/%this}" -> "VarNode{<java.lang.StringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.BasicPermission: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.BasicPermission: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.security.BasicPermission: void init(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r52}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r53}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r33}" -> "VarNode{<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>/$r2}" -> "ArrayIndexNode{NewObj{<java.util.AbstractCollection: java.lang.Object[] toArray()>[1@L136] newarray java.lang.Object[$i0]}}" [color=red];
  "VarNode{<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>/$r2}" -> "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[103@L2377] newarray java.lang.String[i26]}}" [color=red];
  "VarNode{<java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>/$r2}" -> "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" [color=red];
  "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r2}" -> "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>/r3}" [color=blue];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[4@L1369] new java.net.URL}.<java.net.URL: java.lang.String host>}" -> "VarNode{<java.net.URL: java.lang.String getHost()>/$r1}" [color=red,style=dashed];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/%taint-temp-24054}" -> "InstanceFieldNode{NewObj{<io.netty.util.concurrent.PromiseTask: java.util.concurrent.Callable toCallable(java.lang.Runnable,java.lang.Object)>[0@L24] new io.netty.util.concurrent.PromiseTask$RunnableAdapter}.<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.Object result>}" [color=red];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerValue: java.lang.String getIA5String()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r38}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Hashtable: void <init>(int,float)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509Key: java.security.PublicKey parse(sun.security.util.DerValue)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.SocketPermissionCollection: void add(java.security.Permission)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.OtherName: sun.security.x509.GeneralNameInterface getGNI(sun.security.util.ObjectIdentifier,byte[])>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.SerialNumber: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.Signature: void initVerify(java.security.PublicKey,java.security.spec.AlgorithmParameterSpec)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r82}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r108}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.ResourceBundle: void setExpirationTime(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle$Control)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.math.BigDecimal: boolean commonNeedIncrement(int,int,int,boolean)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r35}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.zip.ZipInputStream: void readEnd(java.util.zip.ZipEntry)>/$r33}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName0(java.lang.Class)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String describeChar(char)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r50}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.math.BigInteger: void implSquareToLenChecks(int[],int,int[],int)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.pkcs.PKCS9Attribute: void throwSingleValuedException()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: java.lang.String toPoolName(java.lang.Class)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerValue: byte[] getOctetString()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Base64$Decoder: int decode0(byte[],int,int,byte[])>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r55}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.logging.Logger: void setupResourceInfo(java.lang.String,java.lang.Class)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String getDateTimePattern(java.lang.String,int,int,java.lang.String)>/r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.text.normalizer.UnicodeSet: void syntaxError(sun.text.normalizer.RuleCharacterIterator,java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r49}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r54}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.JapaneseImperialCalendar: void computeTime()>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.lang.String,java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.buffer.AbstractByteBuf: java.lang.String toString()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r56}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Vector: void insertElementAt(java.lang.Object,int)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Date: java.lang.String toString()>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/$r33}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.reflect.AccessorGenerator: short unboxingMethodForPrimitiveType(java.lang.Class)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: io.netty.handler.codec.http.HttpResponseStatus valueOf(int)>/$r61}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: void addPerms(java.security.Permissions,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.util.Calendar,char,java.util.Locale)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.text.normalizer.Utility: java.lang.StringBuffer appendNumber(java.lang.StringBuffer,int,int,int)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerValue: java.lang.String getT61String()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.ManifestDigester: void <init>(byte[])>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.nio.charset.CoderResult: java.lang.String toString()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.jca.Providers: sun.security.jca.ProviderList beginThreadProviderList(sun.security.jca.ProviderList)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Currency: java.util.Currency getInstance(java.util.Locale)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.handler.codec.DecoderResult: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerInputBuffer: int toDigit(byte,java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r47}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseQuotedString(java.io.Reader,java.lang.StringBuilder)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r43}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.rsa.RSAUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.security.AlgorithmParameters)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.KeyFactory: void <init>(java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.rsa.RSAUtil$KeyType: sun.security.rsa.RSAUtil$KeyType lookup(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.zip.ZipInputStream: int read(byte[],int,int)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.spec.EllipticCurve: void checkValidity(java.security.spec.ECField,java.math.BigInteger,java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.handler.stream.ChunkedNioFile: void <init>(java.nio.channels.FileChannel,long,long,int)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.Signature$Delegate: void tryOperation(java.security.SignatureSpi,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.CodeSigner: java.lang.String toString()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String,int)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.Security: void initialize()>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.nio.cs.StreamDecoder: int readBytes()>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Runtime: void loadLibrary0(java.lang.Class,java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.buffer.PooledByteBufAllocator: void <init>(boolean,int,int,int,int,int,int,int)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.jar.Attributes: void read(java.util.jar.Manifest$FastInputStream,byte[])>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.math.BigInteger: void implMulAddCheck(int[],int[],int,int,int)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.SunEntries: java.io.File getDeviceFile(java.net.URL)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CRLImpl: void parse(sun.security.util.DerValue)>/$r64}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r49}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r47}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.PropertyPermissionCollection: void add(java.security.Permission)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseString(java.io.Reader,int,int,java.lang.StringBuilder)>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.OIDMap$OIDInfo: java.lang.Class getClazz()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.calendar.ZoneInfoFile$1: java.lang.Object run()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509Key: java.lang.String toString()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.misc.FloatingDecimal: int getHexDigit(java.lang.String,int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.util.internal.TypeParameterMatcher: java.lang.Class find0(java.lang.Object,java.lang.Class,java.lang.String)>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.spec.EllipticCurve: void checkValidity(java.security.spec.ECField,java.math.BigInteger,java.lang.String)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.jar.Manifest: java.util.jar.Attributes getTrustedAttributes(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertImpl: void <init>(sun.security.util.DerValue)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.handler.stream.ChunkedNioFile: void <init>(java.nio.channels.FileChannel,long,long,int)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.provider.HostLocaleProviderAdapter: java.util.spi.LocaleServiceProvider findInstalledProvider(java.lang.Class)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.SecurityManager: void checkLink(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r74}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.text.normalizer.UTF16: java.lang.StringBuffer append(java.lang.StringBuffer,int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.Debug: java.lang.String marshal(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r45}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.handler.stream.ChunkedNioFile: void <init>(java.nio.channels.FileChannel,long,long,int)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.jca.Providers: void endThreadProviderList(sun.security.jca.ProviderList)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r67}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.text.normalizer.UnicodeSet: boolean contains(int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r65}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Class: java.lang.String resolveName(java.lang.String)>/r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.nio.charset.CharsetDecoder: void throwIllegalStateException(int,int)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.io.DataInputStream: java.lang.String readUTF(java.io.DataInput)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.URIName: void <init>(java.lang.String)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseString(java.io.Reader,int,int,java.lang.StringBuilder)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/$r44}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void <init>(java.lang.String,int,int,int)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>/$r46}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Base64$Decoder: int decode0(byte[],int,int,byte[])>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.IPAddressName: void <init>(java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/r30}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.ArrayList: void <init>(int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable,int)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName(boolean)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.util.IllegalReferenceCountException: void <init>(int,int)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r42}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.resources.LocaleData: java.util.ResourceBundle getNumberFormatData(java.util.Locale)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Arrays: void rangeCheck(int,int,int)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.util.internal.TypeParameterMatcher: java.lang.Class fail(java.lang.Class,java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r36}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.reflect.Reflection: boolean isSameClassPackage(java.lang.ClassLoader,java.lang.String,java.lang.ClassLoader,java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerValue: byte[] getBitString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r55}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.Signature: boolean isSpi(java.security.Provider$Service)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence,int,int)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.ArrayList: java.util.ListIterator listIterator(int)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.OtherName: void <init>(sun.security.util.DerValue)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.logging.Logger: void setupResourceInfo(java.lang.String,java.lang.Class)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty charPropertyNodeFor(java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>/$r31}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.Signature$Delegate: java.security.SignatureSpi newInstance(java.security.Provider$Service)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.buffer.PooledByteBufAllocator: int validateAndCalculateChunkSize(int,int)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.buffer.PooledByteBufAllocator: void <init>(boolean,int,int,int,int,int,int,int)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r43}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(double,java.util.Locale)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.provider.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.BitSet: boolean get(int)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.Signature: boolean isSpi(java.security.Provider$Service)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.util.IllegalReferenceCountException: void <init>(int)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.GregorianCalendar: int computeFields(int,int)>/$r63}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.SimpleTimeZone: void decodeEndRule()>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Shutdown: void add(int,boolean,java.lang.Runnable)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r35}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderName(java.lang.CharSequence)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.Security: void initialize()>/$r49}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.CryptoPolicyParser: java.lang.String match(java.lang.String)>/$r38}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r70}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String,java.lang.String,sun.text.normalizer.SymbolTable)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509Key: java.security.PublicKey buildX509Key(sun.security.x509.AlgorithmId,sun.security.util.BitArray)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.BitSet: void <init>(int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Long: long parseLong(java.lang.String,int)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.CryptoPolicyParser: java.lang.String match(java.lang.String)>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Object: java.lang.String toString()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.LocaleExtensions: java.lang.String toID(java.util.SortedMap)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r56}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseString(java.io.Reader,int,int,java.lang.StringBuilder)>/$r38}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String getDateTimePattern(java.lang.String,java.lang.String,int,java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.JarConstraintsParameters: java.lang.String toString()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.Timestamp: java.lang.String toString()>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty family(boolean,boolean)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.LanguageTag: boolean parsePrivateuse(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.EDIPartyName: java.lang.String toString()>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r49}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r65}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.URIName: sun.security.x509.URIName nameConstraint(sun.security.util.DerValue)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String toString()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add_unchecked(int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String,int)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Class: java.lang.String getCanonicalName()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerInputStream: int getLength(int,java.io.InputStream)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.SocketPermission: java.lang.String getActions(int)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerInputStream: int getLength(int,java.io.InputStream)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String paramsToString()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.zip.ZipInputStream: void readEnd(java.util.zip.ZipEntry)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.util.ResourceLeakDetector: void <init>(java.lang.String,int,long)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.time.Instant: java.time.Instant from(java.time.temporal.TemporalAccessor)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r100}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.ArrayList: void subListRangeCheck(int,int,int)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty unicodeBlockPropertyFor(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r53}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r62}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.ObjectIdentifier: void <init>(sun.security.util.DerInputStream)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r115}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.buffer.UnpooledDirectByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,int,int)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.text.SimpleDateFormat: void encode(int,int,java.lang.StringBuilder)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(long,java.util.Locale)>/$r39}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Class: java.lang.String argumentTypesToString(java.lang.Class[])>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r43}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r60}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.handler.codec.http.DefaultFullHttpResponse: java.lang.String toString()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r40}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AVA: void <init>(sun.security.util.DerValue)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkExternalForm(java.net.URL)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r59}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r37}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: void <clinit>()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Formatter: java.lang.String toString()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.io.FilePermission: java.lang.String getActions(int)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.IPAddressName: void <init>(java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.RFC822Name: java.lang.String toString()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.Inet6Address: java.lang.String numericToTextFormat(byte[])>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet getInclusions(int)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.SimpleTimeZone: void decodeEndRule()>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.spec.EllipticCurve: void checkValidity(java.security.spec.ECField,java.math.BigInteger,java.lang.String)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String match(java.lang.String)>/$r43}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.UniqueIdentity: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.HashMap: void <init>(int,float)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.math.BigInteger: void implSquareToLenChecks(int[],int,int[],int)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.ObjectIdentifier: void <init>(sun.security.util.DerInputStream)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.Cipher: void implInit(javax.crypto.CipherSpi,int,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.AlgorithmParameters,java.security.SecureRandom)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: void initPolicyFile(sun.security.provider.PolicyFile$PolicyInfo,java.net.URL)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CRLEntryImpl: void <init>(sun.security.util.DerValue)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.AccessController: void checkPermission(java.security.Permission)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.nio.Buffer: void <init>(int,int,int,int)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Pattern: java.lang.String groupname(int)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r41}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Class: java.lang.String getCanonicalName()>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void <init>(java.lang.String,int,int,int)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r74}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r56}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.WeakHashMap: void <init>(int,float)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r87}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.SimpleTimeZone: void decodeEndRule()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet complement(int,int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.buffer.PooledByteBufAllocator: int validateAndCalculatePageShifts(int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Matcher: int start(int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: void checkMultiplicity(io.netty.channel.ChannelHandler)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.channel.AbstractChannel$AbstractUnsafe: void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.Provider: java.lang.String[] getTypeAndAlgorithm(java.lang.String)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.rsa.RSAUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.security.AlgorithmParameters)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.math.BigInteger: void implSquareToLenChecks(int[],int,int[],int)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.SocketPermission$1: java.lang.Integer run()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.JarVerifier: void verify()>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.buffer.UnpooledDirectByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,int,int)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.pkcs.PKCS9Attributes: java.lang.Object getAttributeValue(sun.security.util.ObjectIdentifier)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerValue: java.lang.String getBMPString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.JarVerifier: void verify()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.jca.GetInstance: void checkSuperClass(java.security.Provider$Service,java.lang.Class,java.lang.Class)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Class: java.lang.String cannotCastMsg(java.lang.Object)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.zip.ZipFile: void <init>(java.io.File,int,java.nio.charset.Charset)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.AbstractList: java.lang.String outOfBoundsMsg(int)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String describeChar(char)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet complement(int,int)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r44}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.pkcs.ContentInfo: byte[] getData()>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$Node sequence(java.util.regex.Pattern$Node)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Throwable: void printStackTrace(java.lang.Throwable$PrintStreamOrWriter)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.time.temporal.ValueRange: java.lang.String toString()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerValue: sun.security.util.BitArray getUnalignedBitString(boolean)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl: void throwAccessCheckException(java.lang.Object)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.SimpleTimeZone: void decodeEndRule()>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.WeakHashMap: void <init>(int,float)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.concurrent.atomic.AtomicLongFieldUpdater$LockedUpdater: java.lang.RuntimeException accessCheckException(java.lang.Object)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.security.CodeSigner[] getSigners(sun.security.pkcs.SignerInfo[],sun.security.pkcs.PKCS7)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r35}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: void callHandlerAdded0(io.netty.channel.AbstractChannelHandlerContext)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253String(java.util.Map)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.UnknownFormatFlagsException: java.lang.String getMessage()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.URIName: sun.security.x509.URIName nameConstraint(sun.security.util.DerValue)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.URLClassLoader: void definePackageInternal(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r59}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Class: java.lang.String getSimpleName()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.ObjectIdentifier: void checkOidSize(int)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.buffer.AbstractByteBuf: void <init>(int)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.IPAddressName: void parseIPv6(java.lang.String)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.URI$Parser: void checkChars(int,int,long,long,java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.IdentityHashMap: void <init>(int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r55}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Locale: java.lang.String getUnicodeLocaleType(java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r64}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.SimpleTimeZone: void decodeStartRule()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.ArrayList: java.lang.String outOfBoundsMsg(int)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AVA: void <init>(java.io.Reader,int,java.util.Map)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/$r38}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.ObjectIdentifier: void checkOtherComponent(int,java.math.BigInteger)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.logging.LoggingPermission: void <init>(java.lang.String,java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r37}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.CodeSigner: java.lang.String toString()>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.math.BigInteger: java.lang.String toString(int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$Node group0()>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.misc.Launcher$Factory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r37}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r63}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.misc.IOUtils: byte[] readExactlyNBytes(java.io.InputStream,int)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>/$r42}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.ArrayList: void subListRangeCheck(int,int,int)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.zip.ZipInputStream: void readEnd(java.util.zip.ZipEntry)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.text.normalizer.VersionInfo: sun.text.normalizer.VersionInfo getInstance(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.Security: void initialize()>/$r35}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r42}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.HashMap: void <init>(int,float)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r76}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r45}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.buffer.AbstractByteBuf: java.lang.String toString()>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.pkcs.PKCS9Attribute: void <init>(sun.security.util.DerValue)>/$r53}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r45}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.ArrayList: void subListRangeCheck(int,int,int)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CRLImpl: void <init>(sun.security.util.DerValue)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.pkcs.PKCS9Attributes: byte[] decode(sun.security.util.DerInputStream)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.jar.JarFile: byte[] getBytes(java.util.zip.ZipEntry)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.logging.LoggingPermission: void <init>(java.lang.String,java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.reflect.Reflection: boolean isSameClassPackage(java.lang.ClassLoader,java.lang.String,java.lang.ClassLoader,java.lang.String)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.CRLExtensions: void init(sun.security.util.DerInputStream)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r69}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.calendar.CalendarSystem: java.util.Properties getCalendarProperties()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions(int)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.resources.LocaleData: sun.util.resources.TimeZoneNamesBundle getTimeZoneNames(java.util.Locale)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r65}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.ObjectIdentifier: void checkOtherComponent(int,int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.buffer.UnpooledUnsafeDirectByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,int,int)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.SecureRandom: void <init>(java.security.SecureRandomSpi,java.security.Provider,java.lang.String)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext: boolean validatePromise(io.netty.channel.ChannelPromise,boolean)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.GregorianCalendar: void computeTime()>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r31}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.handler.codec.http.DefaultHttpResponse: java.lang.String toString()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Vector: void removeElementAt(int)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r55}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r54}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.DNSName: java.lang.String toString()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.AllPermissionCollection: void add(java.security.Permission)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.text.DateFormat: java.text.DateFormat get(int,int,int,java.util.Locale)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.StringCoding: void warnUnsupportedCharset(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Arrays: char[] copyOfRange(char[],int,int)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.resources.LocaleData: sun.util.resources.OpenListResourceBundle getCurrencyNames(java.util.Locale)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.math.BigDecimal: boolean commonNeedIncrement(int,int,int,boolean)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r49}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r49}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.buffer.EmptyByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,java.nio.ByteOrder)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.nio.Buffer: void <init>(int,int,int,int)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.math.BigDecimal,java.util.Locale)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r49}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r57}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.io.ObjectStreamField: java.lang.String getClassSignature(java.lang.Class)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerValue: sun.security.util.ObjectIdentifier getOID()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.CertificateExtensions: void parseExtension(sun.security.x509.Extension)>/$r38}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.text.DateFormat: java.util.Date parse(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.text.normalizer.RuleCharacterIterator: int next(int)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerValue: java.lang.String getPrintableString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253String(java.util.Map)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.io.DataInputStream: java.lang.String readUTF(java.io.DataInput)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r37}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r43}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.jca.ProviderConfig: java.security.Provider getProvider()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.channel.DefaultFileRegion: void <init>(java.nio.channels.FileChannel,long,long)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.AccessControlContext$1: java.lang.Void run()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: java.lang.String typeName(java.lang.Class)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/r86}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseString(java.io.Reader,int,int,java.lang.StringBuilder)>/$r47}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: void throwAccessCheckException(java.lang.Object)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.SimpleTimeZone: void decodeStartRule()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r89}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>/$r38}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r38}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.io.File: java.net.URI toURI()>/r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Arrays: int[] copyOfRange(int[],int,int)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerInputBuffer: sun.security.util.BitArray getUnalignedBitString()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r60}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.JceSecurity: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.IllformedLocaleException: void <init>(java.lang.String,int)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerInputStream: int getLength(int,java.io.InputStream)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Long: long parseLong(java.lang.String,int)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r68}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r48}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.GregorianCalendar: void computeTime()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r72}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.SimpleTimeZone: void decodeStartRule()>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.URIName: sun.security.x509.URIName nameConstraint(sun.security.util.DerValue)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.handler.codec.http.DefaultFullHttpRequest: java.lang.String toString()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r55}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.StringCoding: char[] decode(byte[],int,int)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.OtherName: java.lang.String toString()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.resources.LocaleData: java.util.ResourceBundle getCalendarData(java.util.Locale)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: void <clinit>()>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.util.ResourceLeakDetector: java.lang.String newRecord(int)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.math.BigDecimal: long[] divRemNegativeLong(long,long)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.StringCoding: byte[] encode(char[],int,int)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.IllformedLocaleException: void <init>(java.lang.String,int)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.SecurityManager: void checkExit(int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.LinkedList: java.lang.String outOfBoundsMsg(int)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.Cipher: void chooseProvider(int,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.AlgorithmParameters,java.security.SecureRandom)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext: boolean validatePromise(io.netty.channel.ChannelPromise,boolean)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r43}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r84}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r46}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AVAKeyword: boolean isCompliant(int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r41}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r82}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.math.BigInteger: void implMulAddCheck(int[],int[],int,int,int)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuth(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Integer: java.lang.Integer decode(java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509Key: byte[] getEncodedInternal()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.SimpleTimeZone: void <init>(int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.io.BufferedReader: java.lang.String readLine(boolean)>/r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertImpl: void parse(sun.security.util.DerValue)>/$r37}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Vector: void <init>(int,int)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void <init>(java.lang.String,int,int,int)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Vector: java.lang.Object elementAt(int)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.util.ResourceLeakDetector: void <init>(java.lang.String,int,long)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void getSeedBytes(byte[])>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void <init>(java.lang.String,int,int,int)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.OIDName: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toString()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.Security: void initialize()>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.JarVerifier: void verify()>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r46}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.ArrayList$SubList: java.lang.String outOfBoundsMsg(int)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerInputStream: int getLength(int,java.io.InputStream)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Hashtable: void <init>(int,float)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.Signature$Delegate: void chooseProvider(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerValue: boolean getBoolean()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add_unchecked(int,int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CRLImpl: void parse(sun.security.util.DerValue)>/$r36}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerValue: java.lang.String getGeneralString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.time.Month: java.time.Month of(int)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.util.IllegalReferenceCountException: void <init>(int,int)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r37}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r83}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.time.LocalDate: java.time.LocalDate create(int,int,int)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/r37}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty unicodeScriptPropertyFor(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.URIName: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.text.SupplementaryCharacterData: int getValue(int)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.pkcs.PKCS9Attributes: byte[] decode(sun.security.util.DerInputStream)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r73}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Class: java.util.Map enumConstantDirectory()>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkUserInfo(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.BasicPermissionCollection: void add(java.security.Permission)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseHexString(java.io.Reader,int)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.pkcs.PKCS7: void parse(sun.security.util.DerInputStream,boolean)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.InetAddress: void <clinit>()>/$r36}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r68}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.URI$Parser: void failExpecting(java.lang.String,int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.Debug: java.lang.String marshal(java.lang.String)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.math.BigInteger: void implMulAddCheck(int[],int[],int,int,int)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r41}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Collections$EmptyList: java.lang.Object get(int)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r61}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.BasicPermissionCollection: void add(java.security.Permission)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.calendar.BaseCalendar: int getMonthLength(sun.util.calendar.CalendarDate)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseQuotedString(java.io.Reader,java.lang.StringBuilder)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.channel.AdaptiveRecvByteBufAllocator: void <init>(int,int,int)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r61}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.nio.charset.CharsetEncoder: void throwIllegalStateException(int,int)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.resources.LocaleData: java.util.ResourceBundle getDateFormatData(java.util.Locale)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r48}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.io.FilePermissionCollection: void add(java.security.Permission)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r80}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.CryptoPolicyParser: java.security.spec.AlgorithmParameterSpec getInstance(java.lang.String,java.lang.Integer[])>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r33}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.math.BigInteger: void implMulAddCheck(int[],int[],int,int,int)>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo getZoneInfo0(java.lang.String)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.jar.Attributes: void read(java.util.jar.Manifest$FastInputStream,byte[])>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Pattern: int escape(boolean,boolean,boolean)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.AccessControlContext: void checkPermission(java.security.Permission)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r36}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r69}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r37}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.URIName: void <init>(java.lang.String)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.SimpleTimeZone: void decodeStartRule()>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseQuotedString(java.io.Reader,java.lang.StringBuilder)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r101}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.channel.DefaultFileRegion: void <init>(java.nio.channels.FileChannel,long,long)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.misc.Launcher: void <init>()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.buffer.AbstractByteBufAllocator: void validate(int,int)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderName(java.lang.CharSequence)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.reflect.MethodAccessorGenerator: sun.reflect.MagicAccessorImpl generate(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int,boolean,boolean,java.lang.Class)>/$r48}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.GregorianCalendar: int computeFields(int,int)>/$r41}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.calendar.CalendarDate: java.lang.String toString()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext: boolean validatePromise(io.netty.channel.ChannelPromise,boolean)>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r66}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.channel.DefaultMessageSizeEstimator: void <init>(int)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.reflect.Modifier: java.lang.String toString(int)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC1779DN(java.util.Map)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.SimpleTimeZone: void decodeEndRule()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.CertificateExtensions: sun.security.x509.Extension get(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty range(java.util.regex.Pattern$BitClass)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String toHex(byte[])>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.BitSet: void set(int)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.io.BufferedReader: java.lang.String readLine(boolean)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.provider.BreakIteratorProviderImpl: java.text.BreakIterator getBreakInstance(java.util.Locale,int,java.lang.String,java.lang.String)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.ServiceLoader$LazyIterator: boolean hasNextService()>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC2253DN(java.util.Map)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHostString(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Pattern: void normalize()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r51}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.math.BigInteger: void implSquareToLenChecks(int[],int,int[],int)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: void incWaiters()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar getLocalGregorianCalendar(java.lang.String)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r55}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.Inet4Address: java.lang.String numericToTextFormat(byte[])>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r76}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r63}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Formatter$Flags: java.lang.String toString()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r42}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.Extension: void setValue(java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: void <clinit>()>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.URIName: void <init>(java.lang.String)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.CertificateVersion: java.lang.String toString()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.SeedGenerator$URLSeedGenerator: void init()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: void callHandlerAdded0(io.netty.channel.AbstractChannelHandlerContext)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseQuotedString(java.io.Reader,java.lang.StringBuilder)>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String getCallerInfo()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.SimpleTimeZone: void decodeStartRule()>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Class$Atomic: long objectFieldOffset(java.lang.reflect.Field[],java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.math.BigInteger: java.lang.String smallToString(int)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.GregorianCalendar: void setWeekDate(int,int,int)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.Security: void initialize()>/$r66}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.logging.LogManager: void readPrimordialConfiguration()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.handler.codec.DecoderResult: void <clinit>()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.provider.RuleBasedBreakIterator: byte[] readFile(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.math.BigInteger: void implSquareToLenChecks(int[],int,int[],int)>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.MissingFormatArgumentException: java.lang.String getMessage()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r53}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.buffer.WrappedByteBuf: java.lang.String toString()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.SecureClassLoader: java.security.ProtectionDomain getProtectionDomain(java.security.CodeSource)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void checkDateTime()>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Double: java.lang.String toHexString(double)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.resources.LocaleData: java.util.ResourceBundle getBreakIteratorInfo(java.util.Locale)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.channel.AdaptiveRecvByteBufAllocator: void <init>(int,int,int)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.PermissionCollection getPermissions(java.security.Permissions,java.security.ProtectionDomain)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r35}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Locale: java.lang.String toString()>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerValue: java.lang.String getUTF8String()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerValue: sun.security.util.DerInputStream toDerInputStream()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add_unchecked(int,int)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: void throwAccessCheckException(java.lang.Object)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.InetAddress: void <clinit>()>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerValue: int getInteger()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>/$r38}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.Policy$2: java.security.Policy run()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.buffer.PooledByteBufAllocator: int validateAndCalculatePageShifts(int)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.calendar.BaseCalendar: void getCalendarDateFromFixedDate(sun.util.calendar.CalendarDate,long)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerValue: boolean getBoolean()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.resources.LocaleData: void setSupplementary(sun.util.resources.ParallelListResourceBundle)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.misc.ExtensionDependency$2: java.io.File run()>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r33}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String toString()>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.provider.BreakDictionary: void readDictionaryFile(java.lang.String)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.UnresolvedPermissionCollection: void add(java.security.Permission)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.math.BigInteger,java.util.Locale)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r36}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.jar.JarFile: byte[] getBytes(java.util.zip.ZipEntry)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: void checkDuplicateName(java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r78}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AVAKeyword: java.lang.String getKeyword(sun.security.util.ObjectIdentifier,int,java.util.Map)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>/r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.StringIndexOutOfBoundsException: void <init>(int)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.Currency$1: java.lang.Void run()>/r57}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.Timestamp: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r31}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.io.DataInputStream: java.lang.String readUTF(java.io.DataInput)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.buffer.UnpooledUnsafeDirectByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,int,int)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void <init>(java.lang.String,int,int,int)>/$r41}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.time.LocalDate: java.time.LocalDate create(int,int,int)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.UnparseableExtension: void <init>(sun.security.x509.Extension,java.lang.Throwable)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyParser: void skipEntry()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.handler.codec.DecoderResult: void <clinit>()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.System: java.lang.String getenv(java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.calendar.Era: java.lang.String toString()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.EDIPartyName: java.lang.String toString()>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.misc.ExtensionInfo: java.lang.String toString()>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Matcher: int end(int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.nio.charset.MalformedInputException: java.lang.String getMessage()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.DerValue: java.math.BigInteger getBigInteger()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Class: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.URIName: void <init>(java.lang.String)>/$r40}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.channel.AdaptiveRecvByteBufAllocator: void <init>(int,int,int)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Pattern: void normalize()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r96}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r72}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r120}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r49}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.io.ByteArrayOutputStream: void <init>(int)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: void callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.text.DateFormat: java.text.DateFormat get(int,int,int,java.util.Locale)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toRFC1779String(java.util.Map)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" -> "VarNode{<java.net.SocketPermission: void getIP()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" -> "VarNode{<java.net.SocketPermission: void getIP()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" -> "VarNode{<java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" -> "VarNode{<java.net.SocketPermission: void getIP()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" -> "VarNode{<java.net.SocketPermission: void getIP()>/r11}" [color=blue,style=dashed];
  "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" -> "VarNode{<java.security.UnresolvedPermissionCollection: void add(java.security.Permission)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" -> "VarNode{<java.security.BasicPermission: java.lang.String getCanonicalName()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" -> "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" -> "VarNode{<java.util.PropertyPermissionCollection: void add(java.security.Permission)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r1}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[140@L447] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String cname>}" -> "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r15}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[140@L447] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String cname>}" -> "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r3}" [color=red,style=dashed];
  "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC1779String(java.util.Map)>/$r4}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC1779DN(java.util.Map)>/$r13}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC1779String(java.util.Map)>/$r4}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC1779DN(java.util.Map)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(long)>/%this}" -> "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(long)>/%this}" -> "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(long)>/%this}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(long)>/%this}" [color=blue];
  "VarNode{<java.text.SimpleDateFormat: void initialize(java.util.Locale)>/$r2}" -> "InstanceFieldNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[127@L1505] new java.text.SimpleDateFormat}.<java.text.SimpleDateFormat: char[] compiledPattern>}" [color=red];
  "VarNode{<java.text.SimpleDateFormat: void initialize(java.util.Locale)>/$r2}" -> "InstanceFieldNode{NewObj{<sun.util.locale.provider.DateFormatProviderImpl: java.text.DateFormat getInstance(int,int,java.util.Locale)>[4@L150] new java.text.SimpleDateFormat}.<java.text.SimpleDateFormat: char[] compiledPattern>}" [color=red];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r4}" -> "VarNode{<java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.lang.StringIndexOutOfBoundsException: void <init>(int)>/$r4}" -> "VarNode{<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>/r0}" -> "VarNode{<java.security.Signature: java.security.Signature getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>/r5}" [color=blue];
  "VarNode{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>/r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>/r0}" -> "VarNode{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>/r0}" -> "VarNode{<java.security.Signature$Delegate: void <init>(java.security.Provider$Service,java.util.Iterator,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>/$r11}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r24}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-540}" [];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r24}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-542}" [];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r24}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: java.lang.String removePrivateuseVariant(java.lang.String)>/r1}" -> "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r33}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: java.lang.String removePrivateuseVariant(java.lang.String)>/r1}" -> "VarNode{<sun.util.locale.StringTokenIterator: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: java.lang.String removePrivateuseVariant(java.lang.String)>/r1}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: java.lang.String removePrivateuseVariant(java.lang.String)>/$r4}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: java.lang.String removePrivateuseVariant(java.lang.String)>/r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r36}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r36}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r35}" [color=green3,style=dashed];
  "VarNode{<java.security.Security: void initialize()>/$r15}" -> "VarNode{<java.security.Security: void initialize()>/$r16}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/r0}" -> "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r1}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/r0}" -> "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r4}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.util.PropertyPermissionCollection: void add(java.security.Permission)>/$r8}" -> "VarNode{<java.util.PropertyPermission: void <init>(java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r30}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "ArrayIndexNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[1@L1418] newarray java.lang.String[$i0]}}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r31}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[1@L1418] newarray java.lang.String[$i0]}}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r12}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[1@L1418] newarray java.lang.String[$i0]}}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r17}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[1@L1418] newarray java.lang.String[$i0]}}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r24}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[1@L1418] newarray java.lang.String[$i0]}}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r14}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[1@L1418] newarray java.lang.String[$i0]}}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r10}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[1@L1418] newarray java.lang.String[$i0]}}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r52}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[1@L1418] newarray java.lang.String[$i0]}}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r36}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[1@L1418] newarray java.lang.String[$i0]}}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r2}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[1@L1418] newarray java.lang.String[$i0]}}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r61}" [color=red,style=dashed];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r4}" -> "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r25}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r26}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void <init>()>[7@L299] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void <init>()>[7@L299] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<java.text.AttributedString$AttributeMap: java.util.Set entrySet()>/r19}" -> "VarNode{<java.text.AttributeEntry: void <init>(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>/r2}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.JdkLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>/argA}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)>/argA}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName0(java.lang.String,boolean)>/r0}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName0(java.lang.String,java.net.InetAddress,boolean)>/r0}" [color=blue];
  "VarNode{<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>/$r1}" -> "VarNode{<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>/r0}" [color=blue];
  "ArrayIndexNode{NewObj{<java.util.UnknownFormatConversionException: java.lang.String getMessage()>[1@L66] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r13}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.UnknownFormatConversionException: java.lang.String getMessage()>[1@L66] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r14}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.UnknownFormatConversionException: java.lang.String getMessage()>[1@L66] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r15}" [color=red,style=dashed];
  "VarNode{<java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>/$r1}" -> "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form)>/r0}" [color=blue];
  "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ArrayList: boolean addAll(java.util.Collection)>/%native-arraycopy-temp206}" -> "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[3@L127] newarray java.lang.Object[%intconst0]}}" [color=red];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[4@L990] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r30}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[4@L990] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[4@L990] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: java.lang.String access$000(java.io.FilePermission)>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[4@L990] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r22}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[4@L990] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[10@L992] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String actions>}" -> "VarNode{<java.net.SocketPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r29}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r4}" -> "InstanceFieldNode{NewObj{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>[63@L215] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r4}" -> "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[60@L297] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r4}" -> "InstanceFieldNode{NewObj{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>[34@L190] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r4}" -> "InstanceFieldNode{NewObj{<sun.misc.Launcher$ExtClassLoader: java.net.URL[] getExtURLs(java.io.File[])>[16@L204] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r4}" -> "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[81@L308] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r4}" -> "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>[21@L470] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r4}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[21@L1381] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r4}" -> "InstanceFieldNode{NewObj{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>[0@L162] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r4}" -> "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[55@L296] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r4}" -> "InstanceFieldNode{NewObj{<java.util.logging.LogManager: void readConfiguration()>[47@L1298] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r4}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[35@L1388] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r4}" -> "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency$2: java.io.File run()>[15@L407] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r4}" -> "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>[77@L307] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r4}" -> "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency$2: java.io.File run()>[21@L409] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r24}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r54}" -> "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r55}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r120}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r7}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toString()>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r7}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toRFC1779String(java.util.Map)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/$r14}" -> "VarNode{<java.text.DecimalFormat: void append(java.lang.StringBuffer,java.lang.String,java.text.Format$FieldDelegate,java.text.FieldPosition[],java.text.Format$Field)>/r1}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r18}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/r26}" [];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r18}" -> "VarNode{<java.io.ExpiringCache: void put(java.lang.String,java.lang.String)>/r5}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/$r8}" -> "VarNode{<java.lang.RuntimePermission: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r4}" -> "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.BaseLocale$1)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.HostLocaleProviderAdapter: java.util.spi.LocaleServiceProvider findInstalledProvider(java.lang.Class)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.HostLocaleProviderAdapter: java.util.spi.LocaleServiceProvider findInstalledProvider(java.lang.Class)>/$r4}" -> "VarNode{<sun.util.locale.provider.HostLocaleProviderAdapter: java.util.spi.LocaleServiceProvider findInstalledProvider(java.lang.Class)>/$r2}" [color=green3,style=dashed];
  "VarNode{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>/$r13}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r6}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>[0@L1028] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String normalizedPattern>}" [color=red];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r6}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>[0@L1054] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String normalizedPattern>}" [color=red];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>[54@L355] new sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint}.<sun.security.util.DisabledAlgorithmConstraints$Constraint: java.lang.String algorithm>}" [color=red];
  "VarNode{<javax.crypto.Cipher: javax.crypto.CryptoPermission getConfiguredPermission(java.lang.String)>/$r2}" -> "VarNode{<javax.crypto.JceSecurityManager: javax.crypto.CryptoPermission getCryptoPermission(java.lang.String)>/r37}" [color=blue];
  "VarNode{<java.security.Policy: java.security.Policy getPolicyNoCheck()>/$r7}" -> "VarNode{<java.security.Policy: java.security.Policy getPolicyNoCheck()>/r28}" [];
  "VarNode{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>/$r26}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>[0@L162] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>[0@L162] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>[0@L162] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>[0@L162] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.nio.charset.MalformedInputException: java.lang.String getMessage()>/$r4}" -> "VarNode{<sun.security.pkcs.PKCS7: void parse(sun.security.util.DerInputStream)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.MalformedInputException: java.lang.String getMessage()>/$r4}" -> "VarNode{<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty getInstance()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.MalformedInputException: java.lang.String getMessage()>/$r4}" -> "VarNode{<sun.text.normalizer.NormalizerImpl: void <clinit>()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.MalformedInputException: java.lang.String getMessage()>/$r4}" -> "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r48}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.MalformedInputException: java.lang.String getMessage()>/$r4}" -> "VarNode{<java.lang.Throwable: java.lang.String getLocalizedMessage()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.MalformedInputException: java.lang.String getMessage()>/$r4}" -> "VarNode{<sun.security.pkcs.PKCS7: void parseOldSignedData(sun.security.util.DerValue)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.MalformedInputException: java.lang.String getMessage()>/$r4}" -> "VarNode{<sun.security.pkcs.PKCS7: void parseNetscapeCertChain(sun.security.util.DerValue)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.MalformedInputException: java.lang.String getMessage()>/$r4}" -> "VarNode{<sun.security.x509.X509CRLImpl: void <init>(sun.security.util.DerValue)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.MalformedInputException: java.lang.String getMessage()>/$r4}" -> "VarNode{<sun.text.normalizer.UCharacter: void <clinit>()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.MalformedInputException: java.lang.String getMessage()>/$r4}" -> "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r57}" [color=blue,style=dashed];
  "VarNode{<java.nio.charset.MalformedInputException: java.lang.String getMessage()>/$r4}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r34}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[0@L417] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String script>}" -> "VarNode{<sun.util.locale.LanguageTag: java.lang.String getScript()>/$r1}" [color=red,style=dashed];
  "VarNode{<io.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask: void execute()>/$r12}" -> "ArrayIndexNode{NewObj{<io.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask: void execute()>[17@L1350] newarray java.lang.Object[%intconst1]}}" [color=red];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r10}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r13}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/$r10}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/%taint-temp-7226}" [];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>/r12}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName0(java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>/r12}" -> "VarNode{<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>/r12}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>/r12}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.io.FilePermission: void init(int)>/$r22}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r23}" [color=green3,style=dashed];
  "VarNode{<java.io.FilePermission: void init(int)>/$r22}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r27}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r34}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,boolean)>/r0}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,boolean)>/r0}" -> "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,boolean)>/r1}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,boolean)>/r0}" -> "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,boolean)>/$c3}" [color=green3,style=dashed];
  "VarNode{<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>/$r1}" -> "VarNode{<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>/$r4}" [color=green3,style=dashed];
  "VarNode{<sun.text.normalizer.UnicodeSet: void applyPropertyPattern(sun.text.normalizer.RuleCharacterIterator,java.lang.StringBuffer,sun.text.normalizer.SymbolTable)>/$r1}" -> "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable)>/r1}" [color=blue];
  "VarNode{<sun.text.normalizer.UnicodeSet: void applyPropertyPattern(sun.text.normalizer.RuleCharacterIterator,java.lang.StringBuffer,sun.text.normalizer.SymbolTable)>/$r1}" -> "VarNode{<sun.text.normalizer.UnicodeSet: void applyPropertyPattern(sun.text.normalizer.RuleCharacterIterator,java.lang.StringBuffer,sun.text.normalizer.SymbolTable)>/$r6}" [color=green3,style=dashed];
  "VarNode{<sun.text.normalizer.UnicodeSet: void applyPropertyPattern(sun.text.normalizer.RuleCharacterIterator,java.lang.StringBuffer,sun.text.normalizer.SymbolTable)>/$r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.lang.ref.SoftReference: java.lang.Object get()>/$r1}" -> "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.ref.SoftReference: java.lang.Object get()>/$r1}" -> "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.ref.SoftReference: java.lang.Object get()>/$r1}" -> "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.ref.SoftReference: java.lang.Object get()>/$r1}" -> "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.ref.SoftReference: java.lang.Object get()>/$r1}" -> "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.ref.SoftReference: java.lang.Object get()>/$r1}" -> "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.ref.SoftReference: java.lang.Object get()>/$r1}" -> "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.ref.SoftReference: java.lang.Object get()>/$r1}" -> "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.util.LinkedHashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" -> "VarNode{<java.util.HashMap$TreeNode: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r34}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r35}" [color=green3,style=dashed];
  "VarNode{<java.security.KeyStore: java.lang.String getDefaultType()>/r2}" -> "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/r38}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: void <init>(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate[])>/r2}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[91@L831] new sun.security.provider.PolicyFile$SelfPermission}.<sun.security.provider.PolicyFile$SelfPermission: java.lang.String name>}" [color=red];
  "VarNode{<sun.util.calendar.BaseCalendar: int getMonthLength(sun.util.calendar.CalendarDate)>/$r6}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.JarIndex: void read(java.io.InputStream)>/$r4}" -> "VarNode{<sun.misc.JarIndex: void read(java.io.InputStream)>/r10}" [];
  "VarNode{<sun.security.x509.X509AttributeName: java.lang.String getSuffix()>/$r1}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X509AttributeName: java.lang.String getSuffix()>/$r1}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X509AttributeName: java.lang.String getSuffix()>/$r1}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.util.HashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1774] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.HashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1789] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.HashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1784] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.HashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1779] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object value>}" [color=red];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r101}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r101}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence)>/$r5}" -> "VarNode{<java.lang.StringBuffer: java.lang.AbstractStringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/$r7}" -> "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/r8}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>/$r8}" -> "VarNode{<java.text.Format: java.lang.String format(java.lang.Object)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r32}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/$r8}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/$r8}" -> "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/r2}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>/$r25}" -> "VarNode{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>/$r26}" [color=green3,style=dashed];
  "VarNode{<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.provider.DateFormatProviderImpl: java.text.DateFormat getInstance(int,int,java.util.Locale)>[4@L150] new java.text.SimpleDateFormat}.<java.text.SimpleDateFormat: java.lang.String pattern>}" [color=red];
  "VarNode{<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>/r1}" -> "InstanceFieldNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[127@L1505] new java.text.SimpleDateFormat}.<java.text.SimpleDateFormat: java.lang.String pattern>}" [color=red];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r62}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.io.FileInputStream: void <init>(java.lang.String)>[1@L93] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r24}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/$r6}" -> "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/$r10}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/$r6}" -> "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.net.URISyntaxException: java.lang.String getMessage()>/$r3}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URISyntaxException: java.lang.String getMessage()>/$r3}" -> "VarNode{<java.net.URISyntaxException: java.lang.String getMessage()>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/$r7}" -> "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FixedString: void <init>(java.util.Formatter,java.lang.String)>/r2}" -> "InstanceFieldNode{NewObj{<java.util.Formatter: java.util.Formatter$FormatString[] parse(java.lang.String)>[14@L2557] new java.util.Formatter$FixedString}.<java.util.Formatter$FixedString: java.lang.String s>}" [color=red];
  "VarNode{<java.util.Formatter$FixedString: void <init>(java.util.Formatter,java.lang.String)>/r2}" -> "InstanceFieldNode{NewObj{<java.util.Formatter: java.util.Formatter$FormatString[] parse(java.lang.String)>[25@L2567] new java.util.Formatter$FixedString}.<java.util.Formatter$FixedString: java.lang.String s>}" [color=red];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: void incWaiters()>/$r4}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: void incWaiters()>/$r5}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.CertificateValidity: java.lang.String toString()>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r61}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<io.netty.channel.DefaultFileRegion: void <init>(java.nio.channels.FileChannel,long,long)>/$r11}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r11}" -> "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r12}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r5}" -> "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r65}" -> "ArrayIndexNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[177@L892] newarray java.lang.Object[%intconst12]}}" [color=red];
  "VarNode{<java.util.jar.JarFile: void <init>(java.lang.String)>/r2}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27801}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[3@L540] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27801}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[47@L577] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27801}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>[26@L2571] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" [color=red];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r9}" -> "VarNode{<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int,java.security.cert.CertPathValidatorException$Reason)>/r1}" [color=blue];
  "VarNode{<sun.text.normalizer.NormalizerImpl: java.lang.String convert(java.lang.String)>/r0}" -> "VarNode{<sun.text.normalizer.UCharacterIterator: sun.text.normalizer.UCharacterIterator getInstance(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void <init>(java.lang.String,java.lang.String[])>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>[172@L418] new sun.security.util.DisabledAlgorithmConstraints$UsageConstraint}.<sun.security.util.DisabledAlgorithmConstraints$Constraint: java.lang.String algorithm>}" [color=red];
  "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendInitialLine(java.lang.StringBuilder,io.netty.handler.codec.http.HttpRequest)>/r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendInitialLine(java.lang.StringBuilder,io.netty.handler.codec.http.HttpRequest)>/r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendInitialLine(java.lang.StringBuilder,io.netty.handler.codec.http.HttpRequest)>/r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: java.lang.String match(java.lang.String)>[18@L812] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: java.lang.String match(java.lang.String)>[18@L812] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r3}" [color=red,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[1@L120] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp344}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[1@L120] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.ArrayList$Itr: java.lang.Object next()>/$r4}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[1@L120] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>/%native-arraycopy-temp44}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[1@L120] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.ArrayList: java.lang.Object remove(int)>/%native-arraycopy-temp338}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[1@L120] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>/%native-arraycopy-temp47}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[1@L120] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.ArrayList: void add(int,java.lang.Object)>/%native-arraycopy-temp491}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[1@L120] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp341}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[1@L120] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.ArrayList: java.lang.Object elementData(int)>/$r2}" [color=red,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/$r12}" -> "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/$r13}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/$r3}" -> "VarNode{<sun.security.x509.SerialNumber: java.lang.String toString()>/$r4}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource checkResource(java.lang.String,boolean,java.util.jar.JarEntry)>[0@L970] new java.net.URL}.<java.net.URL: java.lang.String host>}" -> "VarNode{<java.net.URL: java.lang.String getHost()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>/$r32}" -> "InstanceFieldNode{NewObj{<sun.util.locale.provider.DecimalFormatSymbolsProviderImpl: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>[4@L85] new java.text.DecimalFormatSymbols}.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol>}" [color=red];
  "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r9}" -> "VarNode{<sun.security.jca.ProviderConfig: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r26}" -> "VarNode{<sun.misc.FloatingDecimal: java.lang.String stripLeadingZeros(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/$r0}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/$r0}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/r8}" [];
  "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r10}" -> "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.BaseLocale$1)>/r3}" [color=blue];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuth(java.lang.String)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>[0@L535] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String suffix>}" -> "VarNode{<sun.security.x509.X509AttributeName: java.lang.String getSuffix()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.math.BigInteger: void implMulAddCheck(int[],int[],int,int,int)>/$r27}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r35}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>[90@L1557] newarray java.lang.String[i25]}}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r9}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>[90@L1557] newarray java.lang.String[i25]}}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r10}" [color=red,style=dashed];
  "VarNode{<sun.misc.URLClassPath$FileLoader: java.net.URL findResource(java.lang.String,boolean)>/r1}" -> "VarNode{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>/r5}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/$r10}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/r11}" [];
  "InstanceFieldNode{NewObj{<io.netty.util.ResourceLeakDetector: io.netty.util.ResourceLeak open(java.lang.Object)>[20@L211] new io.netty.util.ResourceLeakDetector$DefaultResourceLeak}.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String creationRecord>}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r14}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.util.Map parseProperties(java.lang.String)>/$r10}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>/r3}" -> "VarNode{<java.util.Hashtable$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.Hashtable$Entry)>/r2}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>/r3}" -> "VarNode{<java.io.FilePermission: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>/r3}" -> "VarNode{<java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>/r3}" -> "VarNode{<java.lang.RuntimePermission: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>/r3}" -> "VarNode{<java.util.PropertyPermission: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>/r3}" -> "VarNode{<java.net.NetPermission: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: void <init>()>[43@L183] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String argument>}" -> "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r6}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>/$r13}" -> "VarNode{<java.io.FileNotFoundException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile$4: java.lang.Void run()>/$r30}" -> "VarNode{<java.net.URL: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.logging.LogManager: java.util.logging.Logger demandSystemLogger(java.lang.String,java.lang.String)>/r2}" -> "VarNode{<java.util.logging.LogManager$SystemLoggerContext: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r15}" -> "VarNode{<java.util.StringTokenizer: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.ReflectiveOperationException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.Exception: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add_unchecked(int,int)>/$r11}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r46}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r47}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.TypeParameterMatcher: java.lang.Class find0(java.lang.Object,java.lang.Class,java.lang.String)>/$r25}" -> "VarNode{<io.netty.util.internal.TypeParameterMatcher: java.lang.Class find0(java.lang.Object,java.lang.Class,java.lang.String)>/$r26}" [color=green3,style=dashed];
  "ArrayIndexNode{NewObj{<io.netty.util.UniqueName: void <init>(java.util.concurrent.ConcurrentMap,java.lang.String,java.lang.Object[])>[13@L51] newarray java.lang.Object[%intconst2]}}" -> "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r13}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<io.netty.util.UniqueName: void <init>(java.util.concurrent.ConcurrentMap,java.lang.String,java.lang.Object[])>[13@L51] newarray java.lang.Object[%intconst2]}}" -> "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r14}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<io.netty.util.UniqueName: void <init>(java.util.concurrent.ConcurrentMap,java.lang.String,java.lang.Object[])>[13@L51] newarray java.lang.Object[%intconst2]}}" -> "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r15}" [color=red,style=dashed];
  "VarNode{<java.util.jar.JarFile: boolean isKnownNotToHaveSpecialAttributes()>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.ExpiringCache: java.lang.String get(java.lang.String)>/$r3}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.io.ExpiringCache: java.lang.String get(java.lang.String)>/$r3}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r32}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r32}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CRLImpl: void <init>(sun.security.util.DerValue)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CRLImpl: void <init>(sun.security.util.DerValue)>/$r8}" -> "VarNode{<sun.security.x509.X509CRLImpl: void <init>(sun.security.util.DerValue)>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r19}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: boolean parsePrivateuse(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.logging.LogManager$LoggerContext: java.util.logging.LogManager$LogNode getNode(java.lang.String)>/r9}" -> "VarNode{<java.util.logging.LogManager$LoggerContext: java.util.logging.LogManager$LogNode getNode(java.lang.String)>/r11}" [];
  "VarNode{<java.util.logging.LogManager$LoggerContext: java.util.logging.LogManager$LogNode getNode(java.lang.String)>/r9}" -> "VarNode{<java.util.logging.LogManager$LoggerContext: java.util.logging.LogManager$LogNode getNode(java.lang.String)>/r9}" [color=green3,style=dashed];
  "VarNode{<java.util.logging.LogManager$LoggerContext: java.util.logging.LogManager$LogNode getNode(java.lang.String)>/r9}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.util.logging.LogManager$LoggerContext: java.util.logging.LogManager$LogNode getNode(java.lang.String)>/r9}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.util.resources.LocaleData$1: java.util.ResourceBundle run()>/$r1}" -> "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.util.ResourceBundle$Control)>/r0}" [color=blue];
  "VarNode{<java.math.BigInteger: java.lang.String toString()>/$r1}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.math.BigInteger: java.lang.String toString()>/$r1}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.math.BigInteger: java.lang.String toString()>/$r1}" -> "VarNode{<java.text.DigitList: void set(boolean,java.math.BigInteger,int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>/r2}" -> "VarNode{<java.text.AttributedString: void addAttributeImpl(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>/r2}" [color=blue];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r3}" -> "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/r19}" [color=green3,style=dashed];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r3}" -> "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r29}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkDelete(java.lang.String)>[0@L1007] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkDelete(java.lang.String)>[0@L1007] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: java.lang.String access$000(java.io.FilePermission)>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkDelete(java.lang.String)>[0@L1007] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r30}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkDelete(java.lang.String)>[0@L1007] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r22}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkDelete(java.lang.String)>[0@L1007] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[35@L184] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.SecurityConstants: void <clinit>()>[35@L184] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/$r2}" -> "VarNode{<sun.security.util.SignatureUtil: java.security.AlgorithmParameters createAlgorithmParameters(java.lang.String,byte[])>/r5}" [color=blue];
  "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/$r2}" -> "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" -> "VarNode{<java.util.HashMap$TreeNode: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[36@L680] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/r1}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r52}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/r1}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r34}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/r1}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r46}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/r1}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r22}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/r1}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r28}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/r1}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r40}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/r1}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$c8}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/r1}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r79}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/r1}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r60}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r10}" -> "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r11}" [color=green3,style=dashed];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r19}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r18}" [color=green3,style=dashed];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r11}" -> "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r12}" [color=green3,style=dashed];
  "VarNode{<java.nio.Buffer: void <init>(int,int,int,int)>/$r13}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: java.util.HashMap computeOidTable()>/$r5}" -> "VarNode{<sun.security.x509.AlgorithmId: java.util.HashMap computeOidTable()>/r6}" [];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>[19@L728] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" -> "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r16}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r51}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r36}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r37}" [color=green3,style=dashed];
  "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(int)>/%this}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(int)>/%this}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.util.AnchorCertificates$1: java.lang.Void run()>[0@L57] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.ServiceLoader$LazyIterator: boolean hasNextService()>/$r12}" -> "VarNode{<java.util.ServiceLoader$LazyIterator: boolean hasNextService()>/$r13}" [];
  "InstanceFieldNode{NewObj{<java.security.Security: java.lang.String getProperty(java.lang.String)>[2@L760] new java.security.SecurityPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.Security: java.lang.String getProperty(java.lang.String)>[2@L760] new java.security.SecurityPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.IllegalFormatCodePointException: java.lang.String getMessage()>/$r3}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.util.IllegalFormatCodePointException: java.lang.String getMessage()>/$r3}" -> "VarNode{<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty getInstance()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.IllegalFormatCodePointException: java.lang.String getMessage()>/$r3}" -> "VarNode{<sun.text.normalizer.UCharacter: void <clinit>()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.util.IllegalFormatCodePointException: java.lang.String getMessage()>/$r3}" -> "VarNode{<sun.text.normalizer.NormalizerImpl: void <clinit>()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.util.IllegalFormatCodePointException: java.lang.String getMessage()>/$r3}" -> "VarNode{<java.lang.Throwable: java.lang.String getLocalizedMessage()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.provider.CurrencyNameProviderImpl: java.lang.String getSymbol(java.lang.String,java.util.Locale)>/$r3}" -> "VarNode{<sun.util.locale.provider.CurrencyNameProviderImpl: java.lang.String getString(java.lang.String,java.util.Locale)>/r5}" [color=blue];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r17}" -> "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>/$r1}" -> "VarNode{<java.util.Collections: void swap(java.util.List,int,int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r33}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r27}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>[172@L418] new sun.security.util.DisabledAlgorithmConstraints$UsageConstraint}.<sun.security.util.DisabledAlgorithmConstraints$Constraint: java.lang.String algorithm>}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r11}" [color=red,style=dashed];
  "VarNode{<java.net.URI$Parser: java.lang.String substring(int,int)>/$r2}" -> "VarNode{<java.net.URI$Parser: int parseAuthority(int,int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.net.URI$Parser: java.lang.String substring(int,int)>/$r2}" -> "VarNode{<java.net.URI$Parser: void parse(boolean)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.net.URI$Parser: java.lang.String substring(int,int)>/$r2}" -> "VarNode{<java.net.URI$Parser: int parseAuthority(int,int)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.net.URI$Parser: java.lang.String substring(int,int)>/$r2}" -> "VarNode{<java.net.URI$Parser: void parse(boolean)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.net.URI$Parser: java.lang.String substring(int,int)>/$r2}" -> "VarNode{<java.net.URI$Parser: int scanByte(int,int)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.net.URI$Parser: java.lang.String substring(int,int)>/$r2}" -> "VarNode{<java.net.URI$Parser: int parseHostname(int,int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.net.URI$Parser: java.lang.String substring(int,int)>/$r2}" -> "VarNode{<java.net.URI$Parser: int parseIPv4Address(int,int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.net.URI$Parser: java.lang.String substring(int,int)>/$r2}" -> "VarNode{<java.net.URI$Parser: int parseHierarchical(int,int)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.net.URI$Parser: java.lang.String substring(int,int)>/$r2}" -> "VarNode{<java.net.URI$Parser: int parseAuthority(int,int)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.net.URI$Parser: java.lang.String substring(int,int)>/$r2}" -> "VarNode{<java.net.URI$Parser: int parseServer(int,int)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.net.URI$Parser: java.lang.String substring(int,int)>/$r2}" -> "VarNode{<java.net.URI$Parser: int parseServer(int,int)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.net.URI$Parser: java.lang.String substring(int,int)>/$r2}" -> "VarNode{<java.net.URI$Parser: int parseHierarchical(int,int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.net.URI$Parser: java.lang.String substring(int,int)>/$r2}" -> "VarNode{<java.net.URI$Parser: int parseServer(int,int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.net.URI$Parser: java.lang.String substring(int,int)>/$r2}" -> "VarNode{<java.net.URI$Parser: void parse(boolean)>/$r7}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.CertificateExtensions: sun.security.x509.Extension get(java.lang.String)>/$r9}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.ChoiceFormat: void applyPattern(java.lang.String)>/$c3}" -> "VarNode{<java.text.ChoiceFormat: void applyPattern(java.lang.String)>/$r18}" [color=green3,style=dashed];
  "VarNode{<java.text.ChoiceFormat: void applyPattern(java.lang.String)>/$c3}" -> "VarNode{<java.text.ChoiceFormat: void applyPattern(java.lang.String)>/$r17}" [color=green3,style=dashed];
  "VarNode{<java.text.ChoiceFormat: void applyPattern(java.lang.String)>/$c3}" -> "VarNode{<java.text.ChoiceFormat: void applyPattern(java.lang.String)>/$r13}" [color=green3,style=dashed];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/r0}" -> "VarNode{<java.security.Security: java.lang.Object[] getImpl(java.lang.String,java.lang.String,java.lang.String)>/r3}" [color=blue];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/r0}" -> "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/r3}" [color=blue];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/r0}" -> "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r15}" [color=green3,style=dashed];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/r0}" -> "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r9}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String toHex(byte[])>/$r2}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r51}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String toHex(byte[])>/$r2}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r57}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String toHex(byte[])>/$r2}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r59}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String toHex(byte[])>/$r2}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r65}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String toHex(byte[])>/$r2}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r70}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String toHex(byte[])>/$r2}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r76}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String toHex(byte[])>/$r2}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r55}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Pattern: void <init>(java.lang.String,int)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>[0@L1028] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String pattern>}" [color=red];
  "VarNode{<java.util.regex.Pattern: void <init>(java.lang.String,int)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>[0@L1054] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String pattern>}" [color=red];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r11}" -> "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r11}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r19}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r25}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r25}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r25}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.HostLocaleProviderAdapter: java.util.spi.LocaleServiceProvider findInstalledProvider(java.lang.Class)>/$r5}" -> "VarNode{<sun.util.locale.provider.HostLocaleProviderAdapter: java.util.spi.LocaleServiceProvider findInstalledProvider(java.lang.Class)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>/r0}" -> "VarNode{<java.security.Security: java.lang.Object[] getImpl(java.lang.String,java.lang.String,java.lang.String)>/r3}" [color=blue];
  "VarNode{<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>/r0}" -> "VarNode{<java.security.AlgorithmParameters: void <init>(java.security.AlgorithmParametersSpi,java.security.Provider,java.lang.String)>/r3}" [color=blue];
  "VarNode{<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>/r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>/r0}" -> "VarNode{<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>/$r9}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[24@L468] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[24@L468] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getParent()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[24@L468] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[24@L468] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[24@L468] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getParent()>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[24@L468] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean isDirectory()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[24@L468] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r8}" [color=red,style=dashed];
  "VarNode{<sun.security.jca.Providers: void endThreadProviderList(sun.security.jca.ProviderList)>/$r6}" -> "VarNode{<sun.security.jca.Providers: void endThreadProviderList(sun.security.jca.ProviderList)>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.math.BigInteger: java.lang.String smallToString(int)>/$r27}" -> "VarNode{<java.math.BigInteger: java.lang.String smallToString(int)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.math.BigInteger: java.lang.String smallToString(int)>/$r27}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.math.BigInteger: java.lang.String smallToString(int)>/$r27}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[99@L1481] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String positivePrefix>}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[99@L1481] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String positivePrefix>}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.security.InvalidAlgorithmParameterException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r7}" -> "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.BaseLocale$1)>/r2}" [color=blue];
  "VarNode{<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r39}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>/$r46}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.util.locale.Extension: void setValue(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.UnicodeLocaleExtension: void <clinit>()>[0@L48] new sun.util.locale.UnicodeLocaleExtension}.<sun.util.locale.Extension: java.lang.String value>}" [color=red];
  "VarNode{<sun.util.locale.Extension: void setValue(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.UnicodeLocaleExtension: void <clinit>()>[5@L50] new sun.util.locale.UnicodeLocaleExtension}.<sun.util.locale.Extension: java.lang.String value>}" [color=red];
  "VarNode{<sun.util.locale.Extension: void setValue(java.lang.String)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.Extension: void setValue(java.lang.String)>/r1}" -> "VarNode{<sun.util.locale.Extension: void setValue(java.lang.String)>/$r4}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.Extension: void setValue(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>[52@L98] new sun.util.locale.Extension}.<sun.util.locale.Extension: java.lang.String value>}" [color=red];
  "VarNode{<sun.util.locale.Extension: void setValue(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>[93@L122] new sun.util.locale.UnicodeLocaleExtension}.<sun.util.locale.Extension: java.lang.String value>}" [color=red];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r17}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.util.SimpleTimeZone: void decodeEndRule()>/$r5}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>/r1}" -> "VarNode{<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>/r3}" [color=blue];
  "ArrayIndexNode{NewObj{<io.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask: void execute()>[17@L1350] newarray java.lang.Object[%intconst1]}}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r14}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<io.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask: void execute()>[17@L1350] newarray java.lang.Object[%intconst1]}}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r11}" [color=red,style=dashed];
  "VarNode{<java.security.Signature: void initVerify(java.security.PublicKey,java.security.spec.AlgorithmParameterSpec)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.CharSequence subSequence(int,int)>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r14}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r14}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r18}" [color=green3,style=dashed];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r52}" -> "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r53}" [color=green3,style=dashed];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r33}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r34}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r33}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r42}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r33}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r12}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r9}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>[72@L866] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r10}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.buffer.AbstractByteBufAllocator: void <init>(boolean)>[9@L91] new io.netty.buffer.EmptyByteBuf}.<io.netty.buffer.EmptyByteBuf: java.lang.String str>}" -> "VarNode{<io.netty.buffer.EmptyByteBuf: java.lang.String toString()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.io.File: java.net.URI toURI()>/r10}" -> "VarNode{<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r3}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/r19}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r9}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/r19}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r12}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/r19}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r10}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/r19}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r24}" -> "VarNode{<java.lang.NumberFormatException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: void read(java.io.Reader)>/$r33}" -> "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r55}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r56}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r11}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r12}" [color=green3,style=dashed];
  "VarNode{<sun.security.action.GetPropertyAction: java.lang.String run()>/$r1}" -> "VarNode{<java.lang.System: java.lang.String getProperty(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[134@L444] new java.net.SocketPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.URIName: void <init>(java.lang.String)>/$r25}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: java.util.List getConstraints(java.lang.String)>/r1}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>/$r10}" -> "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>/$r11}" [color=green3,style=dashed];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r31}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r32}" [color=green3,style=dashed];
  "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r12}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r13}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r13}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r14}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r9}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r9}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r24}" [color=green3,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/r8}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/$r14}" [color=green3,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/r8}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/$r0}" [color=green3,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/r8}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "VarNode{<java.security.AccessControlException: void <init>(java.lang.String,java.security.Permission)>/r1}" -> "VarNode{<java.lang.SecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.File: long length()>/$r3}" -> "VarNode{<java.lang.SecurityManager: void checkRead(java.lang.String)>/r2}" [color=blue];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.lang.Class findClass(java.lang.String)>[0@L362] new java.net.URLClassLoader$1}.<java.net.URLClassLoader$1: java.lang.String val$name>}" -> "VarNode{<java.net.URLClassLoader$1: java.lang.Class run()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.lang.Class findClass(java.lang.String)>[0@L362] new java.net.URLClassLoader$1}.<java.net.URLClassLoader$1: java.lang.String val$name>}" -> "VarNode{<java.net.URLClassLoader$1: java.lang.Class run()>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.lang.Class findClass(java.lang.String)>[0@L362] new java.net.URLClassLoader$1}.<java.net.URLClassLoader$1: java.lang.String val$name>}" -> "VarNode{<java.net.URLClassLoader$1: java.lang.Class run()>/$r15}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL[] parseClassPath(java.net.URL,java.lang.String)>[11@L1246] new java.net.URL}.<java.net.URL: java.lang.String file>}" -> "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL[] parseClassPath(java.net.URL,java.lang.String)>[11@L1246] new java.net.URL}.<java.net.URL: java.lang.String file>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r25}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/r22}" -> "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r1}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/r22}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/r4}" -> "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r24}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.MissingFormatArgumentException: java.lang.String getMessage()>/$r6}" -> "VarNode{<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty getInstance()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.MissingFormatArgumentException: java.lang.String getMessage()>/$r6}" -> "VarNode{<sun.text.normalizer.NormalizerImpl: void <clinit>()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.util.MissingFormatArgumentException: java.lang.String getMessage()>/$r6}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.util.MissingFormatArgumentException: java.lang.String getMessage()>/$r6}" -> "VarNode{<sun.text.normalizer.UCharacter: void <clinit>()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.util.MissingFormatArgumentException: java.lang.String getMessage()>/$r6}" -> "VarNode{<java.lang.Throwable: java.lang.String getLocalizedMessage()>/$r1}" [color=blue,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.util.ServiceConfigurationError>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>/$r11}" -> "VarNode{<java.lang.AssertionError: void <init>(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r2}" -> "VarNode{<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>/r6}" [color=blue];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r17}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/r35}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r2}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>/$r31}" -> "ArrayIndexNode{NewObj{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>[55@L633] newarray java.lang.Object[%intconst4]}}" [color=red];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.Exception: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.FilePermission$1: java.lang.Object run()>/$r1}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.net.Inet4Address: java.lang.String numericToTextFormat(byte[])>/$r9}" -> "VarNode{<java.net.Inet4Address: java.lang.String getHostAddress()>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r49}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r49}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r100}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.TypeParameterMatcher: java.lang.Class fail(java.lang.Class,java.lang.String)>/$r7}" -> "VarNode{<io.netty.util.internal.TypeParameterMatcher: java.lang.Class fail(java.lang.Class,java.lang.String)>/$r8}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>/$r11}" -> "VarNode{<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r9}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r9}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r18}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r8}" -> "VarNode{<sun.util.locale.StringTokenIterator: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r8}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/$r11}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r8}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext: void write(java.lang.Object,boolean,io.netty.channel.ChannelPromise)>/msg}" [color=blue];
  "VarNode{<io.netty.handler.codec.DecoderResult: java.lang.String toString()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r17}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r18}" [color=green3,style=dashed];
  "VarNode{<java.lang.reflect.Modifier: java.lang.String toString(int)>/$r2}" -> "VarNode{<sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>/$r13}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.logging.LogManager: void readConfiguration()>[47@L1298] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r48}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r49}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkPropertyAccess(java.lang.String)>[0@L1294] new java.util.PropertyPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkPropertyAccess(java.lang.String)>[0@L1294] new java.util.PropertyPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkPropertyAccess(java.lang.String)>[0@L1294] new java.util.PropertyPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>/$r4}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>[0@L625] new sun.security.provider.PolicyParser$PermissionEntry}.<sun.security.provider.PolicyParser$PermissionEntry: java.lang.String signedBy>}" [color=red];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask: void run()>/$r7}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask: void write(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask: void run()>/$r7}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask: void write(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" [color=blue];
  "VarNode{<java.util.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])>/%native-arraycopy-temp473}" -> "ArrayIndexNode{NewObj{<java.util.ArrayDeque: java.lang.Object[] toArray()>[1@L787] newarray java.lang.Object[$i0]}}" [color=red];
  "VarNode{<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>/$r1}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>/r1}" [color=blue];
  "VarNode{<java.text.MessageFormat: int findKeyword(java.lang.String,java.lang.String[])>/$r2}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<java.net.URLClassLoader: boolean isSealed(java.lang.String,java.util.jar.Manifest)>/$r4}" -> "VarNode{<java.util.jar.JavaUtilJarAccessImpl: java.util.jar.Attributes getTrustedAttributes(java.util.jar.Manifest,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: void config(java.lang.Class,java.lang.String)>/$r1}" -> "VarNode{<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger getLogger(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r21}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r20}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>/$r12}" -> "VarNode{<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r2}" -> "VarNode{<java.net.URI: void <init>(java.lang.String)>/r2}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r2}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r44}" [color=green3,style=dashed];
  "VarNode{<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: void throwAccessCheckException(java.lang.Object)>/$r19}" -> "VarNode{<java.lang.IllegalAccessException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.TreeMap$KeyIterator: java.lang.Object next()>/$r2}" -> "VarNode{<java.util.AbstractCollection: boolean addAll(java.util.Collection)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.TreeMap$KeyIterator: java.lang.Object next()>/$r2}" -> "VarNode{<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.TreeMap$KeyIterator: java.lang.Object next()>/$r2}" -> "VarNode{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>/r8}" [color=blue,style=dashed];
  "VarNode{<java.util.TreeMap$KeyIterator: java.lang.Object next()>/$r2}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.util.TreeMap$KeyIterator: java.lang.Object next()>/$r2}" -> "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r20}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.security.Provider)>[18@L284] new java.security.MessageDigest$Delegate}.<java.security.MessageDigest: java.lang.String algorithm>}" -> "VarNode{<java.security.MessageDigest: java.lang.String getAlgorithm()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.security.Provider)>[18@L284] new java.security.MessageDigest$Delegate}.<java.security.MessageDigest: java.lang.String algorithm>}" -> "VarNode{<java.security.MessageDigest: java.lang.String toString()>/$r4}" [color=red,style=dashed];
  "VarNode{<java.net.SocketPermission: java.lang.String getActions()>/$r2}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r19}" -> "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r20}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermissionCollection: void add(java.security.Permission)>/$r9}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>/$r5}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>/$r5}" -> "VarNode{<java.net.URI: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>/r2}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.ApiRoute: org.fengfei.lanproxy.server.config.web.ResponseInfo run(io.netty.handler.codec.http.FullHttpRequest)>[9@L74] new java.net.URI}.<java.net.URI: java.lang.String decodedPath>}" -> "VarNode{<java.net.URI: java.lang.String getPath()>/$r5}" [color=red,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r31}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r31}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/r4}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.GregorianCalendar: void computeTime()>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.GregorianCalendar: void computeTime()>/$r9}" -> "VarNode{<java.util.GregorianCalendar: void computeTime()>/$r17}" [color=green3,style=dashed];
  "VarNode{<sun.util.resources.LocaleData$1: void <init>(java.lang.String,java.util.Locale)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.resources.LocaleData: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>[0@L163] new sun.util.resources.LocaleData$1}.<sun.util.resources.LocaleData$1: java.lang.String val$baseName>}" [color=red];
  "VarNode{<java.security.Security: java.lang.String getProperty(java.lang.String)>/$r8}" -> "VarNode{<java.security.SecurityPermission: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r55}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r55}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r54}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String examineAliases(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,java.lang.String,int,java.util.Map)>/$r8}" -> "VarNode{<sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String examineAliases(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,java.lang.String,int,java.util.Map)>/r9}" [];
  "VarNode{<java.security.Security: void initialize()>/$r66}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r3}" -> "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r3}" -> "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r3}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r3}" -> "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r3}" -> "VarNode{<java.io.File: java.io.File getAbsoluteFile()>/r6}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r3}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r3}" -> "VarNode{<java.io.File: void <init>(java.net.URI)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r3}" -> "VarNode{<java.io.File: java.io.File getParentFile()>/r5}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r3}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r3}" -> "VarNode{<java.io.File: java.io.File getCanonicalFile()>/r6}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r3}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r3}" -> "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/$r3}" -> "VarNode{<java.io.File: java.lang.String[] normalizedList()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: int precision(java.lang.String)>/$r2}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String)>/r0}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.nio.charset.UnsupportedCharsetException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r21}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r22}" [color=green3,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/$r16}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/$r17}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseQuotedString(java.io.Reader,java.lang.StringBuilder)>/$r15}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r19}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r19}" -> "VarNode{<java.net.URL: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.DefaultHttpHeaders: void add0(int,int,java.lang.CharSequence,java.lang.CharSequence)>[3@L142] new io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry}.<io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry: java.lang.CharSequence value>}" -> "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: java.lang.String get(java.lang.CharSequence)>/r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.DefaultHttpHeaders: void add0(int,int,java.lang.CharSequence,java.lang.CharSequence)>[3@L142] new io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry}.<io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry: java.lang.CharSequence value>}" -> "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry: java.lang.String getValue()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.SeedGenerator$URLSeedGenerator: void init()>[0@L504] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.SeedGenerator$URLSeedGenerator: void init()>[0@L504] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.SeedGenerator$URLSeedGenerator: void init()>[0@L504] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: java.lang.String getProtocol()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase()>/$r2}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r39}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase()>/$r2}" -> "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase()>/$r2}" -> "VarNode{<java.net.SocketPermission: boolean match(java.lang.String,java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase()>/$r2}" -> "VarNode{<java.net.SocketPermission: void getCanonName()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase()>/$r2}" -> "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase()>/$r2}" -> "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase()>/$r2}" -> "VarNode{<java.net.SocketPermission: void getCanonName()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase()>/$r2}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase()>/$r2}" -> "VarNode{<java.net.InetAddress: void cacheAddresses(java.lang.String,java.net.InetAddress[],boolean)>/$r0}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase()>/$r2}" -> "VarNode{<io.netty.util.ResourceLeakDetector: void reportLeak(io.netty.util.ResourceLeakDetector$Level)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase()>/$r2}" -> "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase()>/$r2}" -> "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase()>/$r2}" -> "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase()>/$r2}" -> "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase()>/$r2}" -> "VarNode{<java.net.SocketPermission: boolean match(java.lang.String,java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.String: java.lang.String toUpperCase()>/$r2}" -> "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toUpperCase()>/$r2}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toUpperCase()>/$r2}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.util.Calendar,char,java.util.Locale)>/r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toUpperCase()>/$r2}" -> "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toUpperCase()>/$r2}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.String)>/r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toUpperCase()>/$r2}" -> "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toUpperCase()>/$r2}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r24}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveNonFile(java.net.URL,java.lang.String)>[6@L1309] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveNonFile(java.net.URL,java.lang.String)>[6@L1309] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveNonFile(java.net.URL,java.lang.String)>[6@L1309] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: java.lang.String getProtocol()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveNonFile(java.net.URL,java.lang.String)>[6@L1309] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" [color=red,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r9}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r9}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r9}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r9}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>/$r27}" -> "ArrayIndexNode{NewObj{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>[15@L169] newarray java.lang.Object[%intconst1]}}" [color=red];
  "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.misc.URLClassPath: java.net.URL findResource(java.lang.String,boolean)>/r1}" -> "VarNode{<sun.misc.URLClassPath$FileLoader: java.net.URL findResource(java.lang.String,boolean)>/r1}" [color=blue];
  "VarNode{<sun.misc.URLClassPath: java.net.URL findResource(java.lang.String,boolean)>/r1}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: java.net.URL findResource(java.lang.String,boolean)>/r1}" [color=blue];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: void checkDuplicateName(java.lang.String)>/$r7}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.NoSuchMethodException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.ReflectiveOperationException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r37}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/$r8}" -> "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/$r9}" [color=green3,style=dashed];
  "ArrayIndexNode{NewObj{<sun.security.util.CurveDB: java.lang.String[] getNamesByOID(java.lang.String)>[5@L167] newarray java.lang.String[%intconst0]}}" -> "VarNode{<java.util.Arrays$ArrayList: java.lang.Object get(int)>/$r2}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<sun.security.util.CurveDB: java.lang.String[] getNamesByOID(java.lang.String)>[5@L167] newarray java.lang.String[%intconst0]}}" -> "VarNode{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>/%native-arraycopy-temp47}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<sun.security.util.CurveDB: java.lang.String[] getNamesByOID(java.lang.String)>[5@L167] newarray java.lang.String[%intconst0]}}" -> "VarNode{<java.util.ArrayList: java.lang.Object elementData(int)>/$r2}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<sun.security.util.CurveDB: java.lang.String[] getNamesByOID(java.lang.String)>[5@L167] newarray java.lang.String[%intconst0]}}" -> "VarNode{<java.util.ArrayList$Itr: java.lang.Object next()>/$r4}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<sun.security.util.CurveDB: java.lang.String[] getNamesByOID(java.lang.String)>[5@L167] newarray java.lang.String[%intconst0]}}" -> "VarNode{<java.util.ArrayList: java.lang.Object remove(int)>/%native-arraycopy-temp338}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<sun.security.util.CurveDB: java.lang.String[] getNamesByOID(java.lang.String)>[5@L167] newarray java.lang.String[%intconst0]}}" -> "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp341}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<sun.security.util.CurveDB: java.lang.String[] getNamesByOID(java.lang.String)>[5@L167] newarray java.lang.String[%intconst0]}}" -> "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp344}" [color=red,style=dashed];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermissionCollection: void add(java.security.Permission)>/$r8}" -> "VarNode{<java.net.SocketPermissionCollection: void add(java.security.Permission)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/r1}" -> "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/r0}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/r1}" -> "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r11}" [color=green3,style=dashed];
  "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/r1}" -> "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[48@L686] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r9}" -> "VarNode{<java.lang.SecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r53}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.util.DerValue: boolean getBoolean()>/$r11}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.math.BigInteger: void implMulAddCheck(int[],int[],int,int,int)>/$r20}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getEncAlgFromSigAlg(java.lang.String)>/$r1}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getEncAlgFromSigAlg(java.lang.String)>/r3}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getEncAlgFromSigAlg(java.lang.String)>/$r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getEncAlgFromSigAlg(java.lang.String)>/$r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.lang.Double: java.lang.String toHexString(double)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Double: java.lang.String toHexString(double)>/$r5}" -> "VarNode{<java.lang.Double: java.lang.String toHexString(double)>/$r7}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: void incWaiters()>/$r5}" -> "VarNode{<java.lang.IllegalStateException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty range(java.util.regex.Pattern$BitClass)>/$r5}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.PatternSyntaxException error(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r11}" -> "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/r13}" [color=green3,style=dashed];
  "VarNode{<java.lang.ClassLoader: java.lang.Package definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>/r2}" -> "VarNode{<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.lang.Package definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>/r2}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.lang.Package definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>/r2}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r12}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.String expandAffix(java.lang.String,java.lang.StringBuffer)>/r0}" -> "VarNode{<java.text.DecimalFormat: java.lang.String expandAffix(java.lang.String,java.lang.StringBuffer)>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: java.lang.String expandAffix(java.lang.String,java.lang.StringBuffer)>/r0}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r80}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>/r15}" -> "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Object getObject(java.util.spi.LocaleServiceProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r3}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>/r15}" -> "VarNode{<java.util.Currency$CurrencyNameGetter: java.lang.Object getObject(java.util.spi.LocaleServiceProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r3}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>/r15}" -> "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarFieldValueNamesMapGetter: java.lang.Object getObject(java.util.spi.LocaleServiceProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r3}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>/r15}" -> "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarFieldValueNameGetter: java.lang.Object getObject(java.util.spi.LocaleServiceProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r3}" [color=blue];
  "VarNode{<java.io.ExpiringCache$Entry: void setVal(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.io.ExpiringCache: void put(java.lang.String,java.lang.String)>[14@L94] new java.io.ExpiringCache$Entry}.<java.io.ExpiringCache$Entry: java.lang.String val>}" [color=red];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/r33}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<java.net.SocketPermission: int[] parsePort(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier algOID(java.lang.String)>/$r38}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r39}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getEncAlgFromSigAlg(java.lang.String)>/r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.security.x509.AlgorithmId: java.util.HashMap computeOidTable()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<java.util.Formatter: java.util.Formatter$FormatString[] parse(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<java.lang.Class: java.lang.String resolveName(java.lang.String)>/r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<java.util.logging.LogManager$LoggerContext: java.util.logging.LogManager$LogNode getNode(java.lang.String)>/r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>/r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/r58}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.misc.FloatingDecimal: java.lang.String stripLeadingZeros(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>/r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r27}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.util.List getCandidateLocales(java.lang.String,java.util.Locale)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.text.normalizer.RuleCharacterIterator: java.lang.String lookahead()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<java.util.Locale: java.util.Locale initDefault()>/r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.security.x509.X500Name: void parseDN(java.lang.String,java.util.Map)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<java.util.Formatter$FormatSpecifier: int precision(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int)>/$r5}" -> "VarNode{<java.net.Parts: void <init>(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r3}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r31}" [color=green3,style=dashed];
  "VarNode{<java.util.Arrays: char[] copyOfRange(char[],int,int)>/$r7}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Signature$Delegate: void chooseProvider(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>/$r16}" -> "VarNode{<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.lang.IllegalAccessException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.ReflectiveOperationException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r0}" [color=green3,style=dashed];
  "VarNode{<java.util.ArrayList$SubList: java.lang.String outOfBoundsMsg(int)>/$r6}" -> "VarNode{<java.util.ArrayList$SubList: void rangeCheckForAdd(int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r7}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r8}" [color=green3,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r3}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r4}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r36}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r37}" [color=green3,style=dashed];
  "VarNode{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r4}" -> "InstanceFieldNode{NewObj{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>[21@L454] new java.util.StringJoiner}.<java.util.StringJoiner: java.lang.String prefix>}" [color=red];
  "VarNode{<java.time.Instant: java.time.Instant from(java.time.temporal.TemporalAccessor)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: int width(java.lang.String)>/r1}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>/$r11}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>/$r12}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r10}" -> "VarNode{<java.lang.String: java.lang.String toString()>/%this}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r34}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r20}" -> "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/r23}" [];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r40}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r58}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.util.locale.provider.HostLocaleProviderAdapter: java.util.spi.LocaleServiceProvider findInstalledProvider(java.lang.Class)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String getKeyStoreUrl()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r53}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r62}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r21}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.x509.CRLExtensions: void parseExtension(sun.security.x509.Extension)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.x509.X509CertInfo: byte[] getEncodedInfo()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<java.lang.StringCoding: char[] decode(byte[],int,int)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r33}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r65}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r36}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.x509.X509CRLEntryImpl: void <init>(sun.security.util.DerValue)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r73}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.util.locale.provider.LocaleProviderAdapter: void <clinit>()>/$r28}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.pkcs.PKCS9Attribute: void derEncode(java.io.OutputStream)>/$r51}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<java.lang.StringCoding: byte[] encode(char[],int,int)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.util.locale.provider.BreakIteratorProviderImpl: java.text.BreakIterator getBreakInstance(java.util.Locale,int,java.lang.String,java.lang.String)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<java.lang.Throwable: void <init>(java.lang.Throwable)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.x509.CRLExtensions: void init(sun.security.util.DerInputStream)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<java.util.logging.Logger$1: java.util.ResourceBundle run()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.x509.X509CertInfo: byte[] getEncodedInfo()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String getStorePassURL()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r8}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r59}" [color=blue,style=dashed];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add_unchecked(int,int)>/$r5}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r4}" -> "VarNode{<sun.misc.FloatingDecimal: java.lang.String stripLeadingZeros(java.lang.String)>/r0}" [color=blue];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/r2}" -> "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.security.x509.URIName: sun.security.x509.URIName nameConstraint(sun.security.util.DerValue)>/$r25}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.util.Vector: java.lang.Object elementAt(int)>/$r1}" -> "VarNode{<java.text.AttributedString: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute,int)>/$r6}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r17}" -> "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>[1@L1569] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String region>}" [color=red];
  "VarNode{<sun.security.x509.AVA: void <init>(java.io.Reader,int,java.util.Map)>/$r3}" -> "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/r22}" [color=blue];
  "VarNode{<java.net.URLClassLoader$2: java.net.URL run()>/$r3}" -> "VarNode{<sun.misc.URLClassPath: java.net.URL findResource(java.lang.String,boolean)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void checkDateTime()>/$r11}" -> "VarNode{<java.util.MissingFormatWidthException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkDelete(java.lang.String)>[0@L1007] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String actions>}" -> "VarNode{<java.io.FilePermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>/$r25}" -> "VarNode{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>/$r26}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.SerialNumber: java.lang.String toString()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[47@L577] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" -> "VarNode{<java.util.TreeMap: void deleteEntry(java.util.TreeMap$Entry)>/$r19}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[47@L577] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[47@L577] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" -> "VarNode{<java.util.TreeMap: java.lang.Object get(java.lang.Object)>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[47@L577] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.Object getValue()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.lang.StringCoding: char[] decode(byte[],int,int)>/$r9}" -> "VarNode{<sun.misc.MessageUtils: void err(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.StringCoding: byte[] encode(char[],int,int)>/$r8}" -> "VarNode{<java.lang.StringCoding: byte[] encode(char[],int,int)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>/$r27}" -> "VarNode{<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r105}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r105}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r103}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.OtherName: java.lang.String toString()>/$r5}" -> "VarNode{<sun.security.x509.GeneralName: java.lang.String toString()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.net.URI$Parser: void parse(boolean)>/$r5}" -> "VarNode{<java.net.URI: java.lang.String access$702(java.net.URI,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String value()>/$r1}" -> "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r22}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String value()>/$r1}" -> "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.util.LinkedList: boolean add(java.lang.Object)>/r1}" -> "VarNode{<java.util.LinkedList: void linkLast(java.lang.Object)>/r3}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>/$r1}" -> "VarNode{<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>/$r1}" -> "VarNode{<java.lang.String: java.lang.String toString()>/%this}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.lang.SecurityException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r9}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r10}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r9}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "VarNode{<java.util.Vector: boolean add(java.lang.Object)>/r2}" -> "ArrayIndexNode{NewObj{<java.util.Vector: void <init>(int,int)>[12@L138] newarray java.lang.Object[i0]}}" [color=red];
  "VarNode{<java.util.Vector: boolean add(java.lang.Object)>/r2}" -> "ArrayIndexNode{NewObj{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>[2@L3210] newarray java.lang.Object[i0]}}" [color=red];
  "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/r32}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/r32}" -> "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/$r11}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253Name(java.util.Map)>/$r4}" -> "InstanceFieldNode{NewObj{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>[13@L181] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String rfc2253Dn>}" [color=red];
  "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r58}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<java.lang.String: java.lang.String toLowerCase()>/%this}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase()>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase()>/%this}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/r0}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/r0}" -> "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/r0}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/r0}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/r0}" -> "VarNode{<java.util.regex.Pattern: void normalize()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/r0}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/r0}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r1}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/r21}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r17}" [color=green3,style=dashed];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>/$r2}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>[0@L1032] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String codeBase>}" [color=red];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.util.Map getDisplayNamesImpl(java.lang.String,int,int,java.util.Locale,boolean)>/r1}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKey(java.lang.String,int,int,boolean)>/r1}" [color=blue];
  "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r10}" -> "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r11}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r17}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r4}" [color=green3,style=dashed];
  "VarNode{<java.security.Signature$Delegate: void <init>(java.security.SignatureSpi,java.lang.String)>/r1}" -> "VarNode{<java.security.Signature: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.File: java.lang.String getParent()>/$r6}" -> "VarNode{<java.io.File: java.io.File getParentFile()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>/$r14}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.PermissionCollection getPermissions(java.security.Permissions,java.security.ProtectionDomain)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.jar.Manifest: java.util.jar.Attributes getTrustedAttributes(java.lang.String)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r11}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>/$r11}" -> "VarNode{<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>/$r12}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r8}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r10}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r8}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r68}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.LinkedList: boolean addAll(int,java.util.Collection)>[18@L424] new java.util.LinkedList$Node}.<java.util.LinkedList$Node: java.lang.Object item>}" -> "VarNode{<java.util.LinkedList$ListItr: java.lang.Object next()>/$r5}" [color=red,style=dashed];
  "VarNode{<java.lang.Long: long parseLong(java.lang.String,int)>/$r18}" -> "VarNode{<java.lang.NumberFormatException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.String toPattern(boolean)>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.String toPattern(boolean)>/$r19}" -> "VarNode{<java.text.DecimalFormat: java.lang.String toPattern(boolean)>/$r18}" [color=green3,style=dashed];
  "VarNode{<java.util.AbstractList: java.lang.String outOfBoundsMsg(int)>/$r6}" -> "VarNode{<java.util.AbstractList: void rangeCheckForAdd(int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<java.io.FileInputStream: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.SecureRandom: void <init>(java.security.SecureRandomSpi,java.security.Provider,java.lang.String)>/$r13}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=green3,style=dashed];
  "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>/$r2}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.security.CodeSigner[] getSigners(sun.security.pkcs.SignerInfo[],sun.security.pkcs.PKCS7)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r26}" -> "VarNode{<java.util.zip.ZipError: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/r3}" -> "InstanceFieldNode{NewObj{<java.util.jar.JarFile: void initializeVerifier()>[23@L387] new sun.security.util.ManifestEntryVerifier}.<sun.security.util.ManifestEntryVerifier: java.lang.String name>}" [color=red];
  "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/r3}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r28}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/r3}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r34}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/r3}" -> "InstanceFieldNode{NewObj{<java.util.jar.JarVerifier$VerifierStream: void <init>(java.util.jar.Manifest,java.util.jar.JarEntry,java.io.InputStream,java.util.jar.JarVerifier)>[3@L458] new sun.security.util.ManifestEntryVerifier}.<sun.security.util.ManifestEntryVerifier: java.lang.String name>}" [color=red];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r10}" -> "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r9}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/$r16}" -> "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.x509.X509Key: java.lang.String toString()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r15}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<java.util.UnknownFormatFlagsException: java.lang.String getMessage()>/$r5}" -> "VarNode{<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty getInstance()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.UnknownFormatFlagsException: java.lang.String getMessage()>/$r5}" -> "VarNode{<sun.text.normalizer.NormalizerImpl: void <clinit>()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.util.UnknownFormatFlagsException: java.lang.String getMessage()>/$r5}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.util.UnknownFormatFlagsException: java.lang.String getMessage()>/$r5}" -> "VarNode{<sun.text.normalizer.UCharacter: void <clinit>()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.util.UnknownFormatFlagsException: java.lang.String getMessage()>/$r5}" -> "VarNode{<java.lang.Throwable: java.lang.String getLocalizedMessage()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r26}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r26}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: boolean isSupportedLocale(java.util.Locale)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r26}" -> "VarNode{<sun.util.locale.provider.LocaleProviderAdapter: boolean isSupportedLocale(java.util.Locale,sun.util.locale.provider.LocaleProviderAdapter$Type,java.util.Set)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r2}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r28}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r2}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r19}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r2}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r30}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r2}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r17}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r2}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r15}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r2}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r23}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r2}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r21}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r2}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r14}" [color=green3,style=dashed];
  "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r35}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r35}" -> "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r34}" [color=green3,style=dashed];
  "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r27}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.misc.FloatingDecimal: int getHexDigit(java.lang.String,int)>/r0}" -> "VarNode{<sun.misc.FloatingDecimal: int getHexDigit(java.lang.String,int)>/$c3}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/$r7}" -> "VarNode{<java.text.DecimalFormat: void append(java.lang.StringBuffer,java.lang.String,java.text.Format$FieldDelegate,java.text.FieldPosition[],java.text.Format$Field)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r11}" -> "VarNode{<java.util.MissingFormatArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.CRLExtensions: void init(sun.security.util.DerInputStream)>/$r10}" -> "VarNode{<sun.security.x509.CRLExtensions: void init(sun.security.util.DerInputStream)>/$r11}" [color=green3,style=dashed];
  "VarNode{<java.util.Arrays$ArrayList: java.lang.Object get(int)>/$r2}" -> "VarNode{<java.util.AbstractList$Itr: java.lang.Object next()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.Arrays$ArrayList: java.lang.Object get(int)>/$r2}" -> "VarNode{<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String convertOldISOCodes(java.lang.String)>/$r0}" -> "VarNode{<java.util.Locale: java.lang.String convertOldISOCodes(java.lang.String)>/$r1}" [color=green3,style=dashed];
  "VarNode{<java.util.AbstractMap: void putAll(java.util.Map)>/$r6}" -> "VarNode{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r2}" [color=blue];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String toString()>/$r13}" -> "VarNode{<sun.security.x509.GeneralName: java.lang.String toString()>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.misc.FileURLMapper: boolean exists()>/$r1}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r1}" -> "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>/$r12}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r9}" -> "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r3}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.JarVerifier: void verify()>/$r27}" -> "VarNode{<java.util.jar.JarException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r36}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.String)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: boolean isNonENLangSupported()>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" -> "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" -> "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" -> "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" -> "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" -> "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" -> "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" -> "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" -> "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r11}" [color=blue,style=dashed];
  "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/$r13}" -> "VarNode{<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.resources.LocaleData: java.util.ResourceBundle getCalendarData(java.util.Locale)>/$r6}" -> "VarNode{<sun.util.resources.LocaleData: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r52}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r52}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r52}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r14}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.util.Map getDisplayNamesImpl(java.lang.String,int,int,java.util.Locale,boolean)>/$r2}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getJavaTimeNames(java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.util.Map getDisplayNamesImpl(java.lang.String,int,int,java.util.Locale,boolean)>/$r2}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getCalendarNames(java.lang.String)>/r2}" [color=blue];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkRead(java.lang.String)>[0@L888] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkRead(java.lang.String)>[0@L888] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkRead(java.lang.String)>[0@L888] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r14}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r15}" [color=green3,style=dashed];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r31}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r32}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r45}" -> "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[0@L417] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String privateuse>}" [color=red];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r45}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r45}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r23}" -> "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r24}" [color=green3,style=dashed];
  "VarNode{<java.io.File: java.lang.String[] normalizedList()>/$r9}" -> "VarNode{<java.lang.SecurityManager: void checkRead(java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.security.pkcs.PKCS9Attributes: byte[] decode(sun.security.util.DerInputStream)>/$r24}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getEncAlgFromSigAlg(java.lang.String)>/r2}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getEncAlgFromSigAlg(java.lang.String)>/$r1}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getEncAlgFromSigAlg(java.lang.String)>/r2}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void floatArrayAppend(java.lang.StringBuffer,float[])>/r0}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveNonFile(java.net.URL,java.lang.String)>[6@L1309] new java.net.URL}.<java.net.URL: java.lang.String host>}" -> "VarNode{<java.net.URL: java.lang.String getHost()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveNonFile(java.net.URL,java.lang.String)>[6@L1309] new java.net.URL}.<java.net.URL: java.lang.String host>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r24}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String getLanguage()>/$r1}" -> "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r6}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String getLanguage()>/$r1}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r10}" -> "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[61@L1837] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r10}" -> "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[82@L1848] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r10}" -> "InstanceFieldNode{NewObj{<sun.util.calendar.ZoneInfoFile$1: java.lang.Object run()>[13@L255] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r10}" -> "InstanceFieldNode{NewObj{<java.util.logging.LogManager: void readConfiguration()>[44@L1297] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r10}" -> "InstanceFieldNode{NewObj{<sun.security.util.AnchorCertificates$1: java.lang.Void run()>[0@L57] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r49}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r28}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r28}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.cert.Certificate[] getCertificates(java.security.KeyStore,java.lang.String,sun.security.provider.PolicyFile$PolicyInfo)>[1@L1014] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" [color=red];
  "VarNode{<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>[83@L377] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" [color=red];
  "VarNode{<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>[19@L728] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" [color=red];
  "VarNode{<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>/r1}" -> "InstanceFieldNode{NewObj{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>[30@L1210] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" [color=red];
  "VarNode{<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>/r1}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: java.lang.String[] getPackages(java.lang.String)>[6@L1480] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" [color=red];
  "VarNode{<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[42@L452] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" [color=red];
  "VarNode{<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>[26@L409] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" [color=red];
  "VarNode{<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>/r1}" -> "InstanceFieldNode{NewObj{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>[13@L406] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" [color=red];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r32}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r33}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r32}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.lang.Integer: java.lang.Integer decode(java.lang.String)>/$r12}" -> "VarNode{<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>/r0}" [color=blue];
  "VarNode{<java.lang.SecurityException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.logging.Logger: java.lang.String getName()>/$r1}" -> "VarNode{<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.logging.Logger: java.lang.String getName()>/$r1}" -> "VarNode{<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger,boolean)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.net.Parts: void <init>(java.lang.String)>/$r2}" -> "InstanceFieldNode{NewObj{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>[52@L408] new java.net.Parts}.<java.net.Parts: java.lang.String path>}" [color=red];
  "VarNode{<sun.security.x509.AVAKeyword: java.lang.String getKeyword(sun.security.util.ObjectIdentifier,int,java.util.Map)>/$r12}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toKeyword(int,java.util.Map)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.util.Hashtable$Enumerator: java.lang.Object nextElement()>/$r6}" -> "VarNode{<java.util.Hashtable$Enumerator: java.lang.Object next()>/$r2}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkPropertyAccess(java.lang.String)>[0@L1294] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r15}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void process(java.util.Hashtable,java.util.List,java.lang.String)>/r4}" [color=blue];
  "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/$r4}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/$r4}" -> "VarNode{<sun.security.util.Debug: java.lang.String toHexString(java.math.BigInteger)>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.AbstractStringBuilder)>/r0}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.AbstractStringBuilder)>/$r2}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[26@L835] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[26@L835] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[26@L835] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[26@L835] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.FilePermission: void init(int)>[51@L228] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext newContext(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)>/name}" -> "VarNode{<io.netty.channel.DefaultChannelHandlerContext: void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.util.concurrent.EventExecutor,java.lang.String,io.netty.channel.ChannelHandler)>/name}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleProviderAdapter: void <clinit>()>/$r28}" -> "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: void config(java.lang.Class,java.lang.String)>/r3}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: void process(java.util.Hashtable,java.util.List,java.lang.String)>/r4}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/r27}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.JdkLoggerFactory: io.netty.util.internal.logging.InternalLogger newInstance(java.lang.String)>/name}" -> "VarNode{<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL[] parseClassPath(java.net.URL,java.lang.String)>[11@L1246] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL[] parseClassPath(java.net.URL,java.lang.String)>[11@L1246] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL[] parseClassPath(java.net.URL,java.lang.String)>[11@L1246] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: java.lang.String getProtocol()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL[] parseClassPath(java.net.URL,java.lang.String)>[11@L1246] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" [color=red,style=dashed];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r23}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r24}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r5}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r52}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r5}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r81}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r5}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r5}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r17}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r5}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r86}" [];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r5}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r44}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r5}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void <clinit>()>[35@L212] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void <clinit>()>[35@L212] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void <clinit>()>[35@L212] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: java.lang.String getProtocol()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>/r1}" -> "VarNode{<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>/r3}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r15}" -> "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r16}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.CertificateAlgorithmId: java.lang.String toString()>/$r12}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r25}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[4@L1369] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[4@L1369] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r34}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r35}" [color=green3,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/r27}" -> "VarNode{<java.io.ExpiringCache: void put(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.InetAddress: java.lang.String getHostName(boolean)>/$r6}" -> "InstanceFieldNode{NewObj{<java.net.InetAddress: void <init>()>[2@L309] new java.net.InetAddress$InetAddressHolder}.<java.net.InetAddress$InetAddressHolder: java.lang.String hostName>}" [color=red];
  "VarNode{<java.security.Signature: java.lang.String getAlgorithm()>/$r1}" -> "VarNode{<sun.security.util.SignatureUtil: java.lang.String checkName(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r0}" -> "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r17}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.misc.Launcher$Factory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>/$r17}" -> "VarNode{<java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<java.util.regex.Matcher: java.lang.String group(int)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: java.lang.CharSequence toCharSequence(java.lang.Object)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry: java.lang.String getKey()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: java.lang.CharSequence toCharSequence(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r32}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry: java.lang.String getValue()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.MimeType: java.lang.String parseSuffix(java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toString()>/%this}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r11}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r3}" -> "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r3}" -> "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.InvalidKeyException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.security.KeyException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[31@L471] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[31@L471] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[31@L471] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[31@L471] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getParent()>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[31@L471] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean isDirectory()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[31@L471] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getParent()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.Launcher: java.io.File[] getClassPath(java.lang.String)>[31@L471] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$c1}" -> "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$c1}" -> "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$c1}" -> "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r16}" [color=green3,style=dashed];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$c1}" -> "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$c1}" -> "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r19}" [color=green3,style=dashed];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$c1}" -> "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r15}" [color=green3,style=dashed];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$c1}" -> "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r13}" [color=green3,style=dashed];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$c1}" -> "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r12}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r42}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r42}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r101}" [color=green3,style=dashed];
  "VarNode{<java.net.URI$Parser: void checkChars(int,int,long,long,java.lang.String)>/$r5}" -> "VarNode{<java.net.URI$Parser: void fail(java.lang.String,int)>/r2}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.time.LocalDate: java.time.LocalDate create(int,int,int)>/$r16}" -> "VarNode{<java.time.DateTimeException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String string>}" -> "VarNode{<java.net.URI: java.lang.String toString()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r28}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/r14}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/r14}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r3}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/r14}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r80}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r10}" -> "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r11}" [color=green3,style=dashed];
  "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r10}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r22}" -> "InstanceFieldNode{NewObj{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>[74@L132] new sun.security.x509.IPAddressName}.<sun.security.x509.IPAddressName: java.lang.String name>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r30}" -> "VarNode{<java.net.MalformedURLException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.ObjectIdentifier: void checkOidSize(int)>/$r7}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/r32}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/r32}" -> "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r23}" [color=green3,style=dashed];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/r32}" -> "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r9}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509Key: java.security.PublicKey parse(sun.security.util.DerValue)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509Key: java.security.PublicKey parse(sun.security.util.DerValue)>/$r14}" -> "VarNode{<sun.security.x509.X509Key: java.security.PublicKey parse(sun.security.util.DerValue)>/$r13}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.BasicPermissionCollection: void add(java.security.Permission)>/$r7}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r17}" -> "ArrayIndexNode{NewObj{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>[23@L731] newarray java.lang.String[$i3]}}" [color=red];
  "VarNode{<java.util.Collections: void reverse(java.util.List)>/$r4}" -> "VarNode{<java.util.ArrayList$ListItr: void set(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/$r2}" -> "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>[0@L535] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String prefix>}" [color=red];
  "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/$r2}" -> "InstanceFieldNode{NewObj{<sun.security.x509.CRLExtensions: sun.security.x509.Extension get(java.lang.String)>[0@L184] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String prefix>}" [color=red];
  "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/$r2}" -> "InstanceFieldNode{NewObj{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>[0@L692] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String prefix>}" [color=red];
  "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/$r2}" -> "InstanceFieldNode{NewObj{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>[18@L699] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String prefix>}" [color=red];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r9}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.security.cert.CRLException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Set getLanguageTagSet(java.lang.String)>/r1}" -> "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: java.util.Set createLanguageTagSet(java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r14}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r15}" [];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r19}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r33}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String toString()>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r17}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger,boolean)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeRegion(java.lang.String)>/$r1}" -> "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r19}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeRegion(java.lang.String)>/$r1}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r38}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r60}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r61}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r34}" -> "VarNode{<java.util.ArrayList: boolean add(java.lang.Object)>/r2}" [color=blue];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r28}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r56}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r2}" -> "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r0}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r12}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r12}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r18}" [color=green3,style=dashed];
  "VarNode{<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>/$r9}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r1}" -> "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>[90@L1557] newarray java.lang.String[i25]}}" [color=red];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class,java.lang.ClassLoader)>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.DateFormat: java.util.Date parse(java.lang.String)>/$r9}" -> "VarNode{<java.text.ParseException: void <init>(java.lang.String,int)>/r1}" [color=blue];
  "VarNode{<sun.misc.JarIndex: java.util.LinkedList get(java.lang.String)>/r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r15}" -> "VarNode{<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int,java.security.cert.CertPathValidatorException$Reason)>/r1}" [color=blue];
  "VarNode{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>/$r20}" -> "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r4}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r30}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r30}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r10}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String getStorePassURL()>/$r9}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.x509.CRLExtensions: void init(sun.security.util.DerInputStream)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r12}" -> "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r13}" [color=green3,style=dashed];
  "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>[21@L1513] newarray java.lang.String[%intconst2]}}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r9}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>[21@L1513] newarray java.lang.String[%intconst2]}}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r10}" [color=red,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r12}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r13}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DerValue: boolean getBoolean()>/$r6}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r8}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r9}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseQuotedString(java.io.Reader,java.lang.StringBuilder)>/$r26}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CRLEntryImpl: void <init>(sun.security.util.DerValue)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r33}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r47}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.SecurityManager: java.lang.String[] getPackages(java.lang.String)>/$r2}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.lang.Class access$100(java.net.URLClassLoader,java.lang.String,sun.misc.Resource)>/r1}" -> "VarNode{<java.net.URLClassLoader: java.lang.Class defineClass(java.lang.String,sun.misc.Resource)>/r0}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "ArrayIndexNode{NewObj{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>[23@L731] newarray java.lang.String[$i3]}}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r15}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>[23@L731] newarray java.lang.String[$i3]}}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r24}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>[23@L731] newarray java.lang.String[$i3]}}" -> "VarNode{<sun.security.provider.PolicyFile$4: java.lang.Void run()>/$r30}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>[23@L731] newarray java.lang.String[$i3]}}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r9}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>[23@L731] newarray java.lang.String[$i3]}}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r14}" [color=red,style=dashed];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<java.security.AllPermissionCollection: void add(java.security.Permission)>/$r6}" -> "VarNode{<java.security.AllPermissionCollection: void add(java.security.Permission)>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/r2}" -> "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r21}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/r2}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/r2}" -> "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/$r12}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/r2}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/r4}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r19}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/r4}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r8}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/r4}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase()>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r33}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r33}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void loadPolicies(java.io.File,javax.crypto.CryptoPermissions,javax.crypto.CryptoPermissions)>[0@L353] new java.util.jar.JarFile}.<java.util.zip.ZipFile: java.lang.String name>}" -> "VarNode{<java.util.zip.ZipFile: java.lang.String access$800(java.util.zip.ZipFile)>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-290}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>[12@L1093] new java.util.regex.Matcher}.<java.util.regex.Matcher: java.lang.CharSequence text>}" [color=red];
  "VarNode{<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.LinkageError: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.BaseLocale$1)>/r3}" -> "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r3}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r24}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r25}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r8}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.buffer.UnpooledUnsafeDirectByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,int,int)>/$r12}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/r25}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/r25}" -> "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/r25}" -> "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/r25}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/r25}" -> "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[140@L447] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String hostname>}" [color=red];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/r25}" -> "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[134@L444] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String hostname>}" [color=red];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/r25}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/r25}" -> "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/r1}" [];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/r25}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/r25}" -> "VarNode{<sun.net.util.IPAddressUtil: byte[] textToNumericFormatV6(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/r25}" -> "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r14}" [color=green3,style=dashed];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable)>/r5}" -> "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String,java.lang.String,sun.text.normalizer.SymbolTable)>/r4}" [color=blue];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence)>/r0}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence)>/$r5}" [];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence)>/r0}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence)>/$r3}" [];
  "VarNode{<java.net.URI: java.lang.String getPath()>/$r4}" -> "InstanceFieldNode{NewObj{<java.net.URI: java.net.URI create(java.lang.String)>[0@L850] new java.net.URI}.<java.net.URI: java.lang.String decodedPath>}" [color=red];
  "VarNode{<java.net.URI: java.lang.String getPath()>/$r4}" -> "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.ApiRoute: org.fengfei.lanproxy.server.config.web.ResponseInfo run(io.netty.handler.codec.http.FullHttpRequest)>[9@L74] new java.net.URI}.<java.net.URI: java.lang.String decodedPath>}" [color=red];
  "VarNode{<java.net.URI: java.lang.String getPath()>/$r4}" -> "InstanceFieldNode{NewObj{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>[1@L77] new java.net.URI}.<java.net.URI: java.lang.String decodedPath>}" [color=red];
  "VarNode{<java.text.ChoiceFormat: void applyPattern(java.lang.String)>/r1}" -> "VarNode{<java.text.ChoiceFormat: void applyPattern(java.lang.String)>/$c3}" [color=green3,style=dashed];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r8}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" -> "VarNode{<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.net.SocketPermission: void getCanonName()>/$r12}" -> "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[134@L444] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String cname>}" [color=red];
  "VarNode{<java.net.SocketPermission: void getCanonName()>/$r12}" -> "InstanceFieldNode{NewObj{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>[140@L447] new java.net.SocketPermission}.<java.net.SocketPermission: java.lang.String cname>}" [color=red];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String)>[18@L185] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" -> "VarNode{<java.lang.ref.Reference: java.lang.Object get()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r11}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r14}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r11}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r11}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.jar.JarFile: void initializeVerifier()>[23@L387] new sun.security.util.ManifestEntryVerifier}.<sun.security.util.ManifestEntryVerifier: java.lang.String name>}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r63}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.jar.JarFile: void initializeVerifier()>[23@L387] new sun.security.util.ManifestEntryVerifier}.<sun.security.util.ManifestEntryVerifier: java.lang.String name>}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r52}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.jar.JarFile: void initializeVerifier()>[23@L387] new sun.security.util.ManifestEntryVerifier}.<sun.security.util.ManifestEntryVerifier: java.lang.String name>}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r32}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.jar.JarFile: void initializeVerifier()>[23@L387] new sun.security.util.ManifestEntryVerifier}.<sun.security.util.ManifestEntryVerifier: java.lang.String name>}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r26}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.jar.JarFile: void initializeVerifier()>[23@L387] new sun.security.util.ManifestEntryVerifier}.<sun.security.util.ManifestEntryVerifier: java.lang.String name>}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r13}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>[11@L499] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" -> "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String next()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>[11@L499] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" -> "VarNode{<sun.util.locale.StringTokenIterator: sun.util.locale.StringTokenIterator setStart(int)>/$r2}" [color=red,style=dashed];
  "VarNode{<java.security.Policy$1: java.lang.String run()>/$r0}" -> "VarNode{<java.security.Policy$1: java.lang.Object run()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.misc.JarIndex: void addToList(java.lang.String,java.lang.String,java.util.HashMap)>/r3}" -> "VarNode{<java.util.LinkedList: boolean add(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.util.UnknownFormatConversionException>}.<java.util.UnknownFormatConversionException: java.lang.String s>}" -> "VarNode{<java.util.UnknownFormatConversionException: java.lang.String getMessage()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>[0@L311] new sun.util.locale.BaseLocale}.<sun.util.locale.BaseLocale: java.lang.String region>}" -> "VarNode{<sun.util.locale.BaseLocale: java.lang.String getRegion()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>/$r6}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<java.net.InetAddress: void <clinit>()>[56@L989] new sun.security.action.GetPropertyAction}.<sun.security.action.GetPropertyAction: java.lang.String theProp>}" -> "VarNode{<sun.security.action.GetPropertyAction: java.lang.String run()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r15}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r45}" [color=green3,style=dashed];
  "VarNode{<java.net.URI$Parser: int parseHierarchical(int,int)>/$r4}" -> "VarNode{<java.net.URI: java.lang.String access$1402(java.net.URI,java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry: java.lang.Object getKey()>/$r1}" -> "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)>/$r5}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r59}" -> "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r60}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r15}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r15}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r15}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r15}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r19}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/r22}" [color=green3,style=dashed];
  "VarNode{<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" -> "VarNode{<java.security.KeyException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r51}" -> "VarNode{<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.AlgorithmParameters: void <init>(java.security.AlgorithmParametersSpi,java.security.Provider,java.lang.String)>/r3}" -> "InstanceFieldNode{NewObj{<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>[2@L148] new java.security.AlgorithmParameters}.<java.security.AlgorithmParameters: java.lang.String algorithm>}" [color=red];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r33}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r32}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r10}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r11}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" -> "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r9}" [color=red,style=dashed];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: boolean validatePromise(io.netty.channel.ChannelPromise,boolean)>/$r16}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r14}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/r15}" [];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r14}" -> "VarNode{<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r5}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getDisplayNameImpl(java.lang.String,int,int,int,java.util.Locale,boolean)>/r1}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/r10}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getDisplayNameImpl(java.lang.String,int,int,int,java.util.Locale,boolean)>/r1}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKey(java.lang.String,int,int,boolean)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getDisplayNameImpl(java.lang.String,int,int,int,java.util.Locale,boolean)>/r1}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getDisplayName(java.lang.String,int,int,int,java.util.Locale)>/r1}" [color=blue];
  "ArrayIndexNode{NewObj{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>[15@L532] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r13}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>[15@L532] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r14}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>[15@L532] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r15}" [color=red,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkExternalForm(java.net.URL)>/$r8}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=blue,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>/$r23}" -> "VarNode{<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.zip.ZipCoder: java.lang.String toString(byte[],int)>/$r13}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r5}" [];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r13}" [];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r62}" [];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r38}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r35}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r16}" [];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r25}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r37}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r36}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r22}" [color=blue,style=dashed];
  "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r9}" -> "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[17@L446] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String mode>}" [color=red];
  "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r9}" -> "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[25@L451] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String mode>}" [color=red];
  "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r9}" -> "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[36@L452] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String mode>}" [color=red];
  "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r9}" -> "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[44@L453] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String mode>}" [color=red];
  "VarNode{<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r9}" -> "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[53@L454] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String mode>}" [color=red];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r24}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r24}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r23}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r26}" -> "VarNode{<sun.security.provider.PolicyFile$SelfPermission: void <init>(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate[])>/r3}" [color=blue];
  "VarNode{<java.text.DigitList: double getDouble()>/$r3}" -> "VarNode{<java.lang.Double: double parseDouble(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r16}" -> "VarNode{<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>/r2}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveFile(java.net.URL,java.lang.String)>[10@L1296] new java.net.URL}.<java.net.URL: java.lang.String file>}" -> "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveFile(java.net.URL,java.lang.String)>[10@L1296] new java.net.URL}.<java.net.URL: java.lang.String file>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r25}" [color=red,style=dashed];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: void checkDeadLock()>/$r3}" -> "VarNode{<io.netty.util.concurrent.BlockingOperationException: void <init>(java.lang.String)>/s}" [color=blue];
  "VarNode{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>/$r5}" -> "VarNode{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>/r9}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r15}" -> "VarNode{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r2}" [color=blue];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/r7}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/$r10}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.IllformedLocaleException: void <init>(java.lang.String,int)>/$r9}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$c19}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r36}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>[14@L895] new sun.security.action.GetPropertyAction}.<sun.security.action.GetPropertyAction: java.lang.String defaultVal>}" -> "VarNode{<sun.security.action.GetPropertyAction: java.lang.String run()>/$r3}" [color=red,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r4}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/r85}" [];
  "VarNode{<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>/$r8}" -> "VarNode{<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/$r6}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r55}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r55}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r26}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r26}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r25}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r32}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r32}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r32}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r32}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r32}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r24}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.ReflectiveOperationException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" -> "VarNode{<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r29}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r30}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>[0@L625] new sun.security.provider.PolicyParser$PermissionEntry}.<sun.security.provider.PolicyParser$PermissionEntry: java.lang.String name>}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r20}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>[0@L625] new sun.security.provider.PolicyParser$PermissionEntry}.<sun.security.provider.PolicyParser$PermissionEntry: java.lang.String name>}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r45}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>[0@L625] new sun.security.provider.PolicyParser$PermissionEntry}.<sun.security.provider.PolicyParser$PermissionEntry: java.lang.String name>}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r16}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>[0@L625] new sun.security.provider.PolicyParser$PermissionEntry}.<sun.security.provider.PolicyParser$PermissionEntry: java.lang.String name>}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r48}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>[0@L625] new sun.security.provider.PolicyParser$PermissionEntry}.<sun.security.provider.PolicyParser$PermissionEntry: java.lang.String name>}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r27}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>[0@L625] new sun.security.provider.PolicyParser$PermissionEntry}.<sun.security.provider.PolicyParser$PermissionEntry: java.lang.String name>}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>[0@L625] new sun.security.provider.PolicyParser$PermissionEntry}.<sun.security.provider.PolicyParser$PermissionEntry: java.lang.String name>}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r33}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>[0@L625] new sun.security.provider.PolicyParser$PermissionEntry}.<sun.security.provider.PolicyParser$PermissionEntry: java.lang.String name>}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r11}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>[0@L625] new sun.security.provider.PolicyParser$PermissionEntry}.<sun.security.provider.PolicyParser$PermissionEntry: java.lang.String name>}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r18}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>[0@L625] new sun.security.provider.PolicyParser$PermissionEntry}.<sun.security.provider.PolicyParser$PermissionEntry: java.lang.String name>}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r89}" [color=red,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>/%taint-temp-154}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>[12@L1093] new java.util.regex.Matcher}.<java.util.regex.Matcher: java.lang.CharSequence text>}" [color=red];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void shortArrayAppend(java.lang.StringBuffer,short[])>/r0}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void shortArrayAppend(java.lang.StringBuffer,short[])>/r0}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(int)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/$r13}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[61@L1837] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[61@L1837] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[61@L1837] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[61@L1837] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "VarNode{<sun.security.util.PolicyUtil: java.io.InputStream getInputStream(java.net.URL)>/$r6}" -> "VarNode{<java.io.FileInputStream: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String schemeSpecificPart>}" -> "VarNode{<java.net.URI: void defineString()>/$r18}" [color=red,style=dashed];
  "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" -> "VarNode{<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.nio.charset.IllegalCharsetNameException: void <init>(java.lang.String)>/$r2}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>/r2}" -> "VarNode{<java.security.Security: java.lang.Object[] getImpl(java.lang.String,java.lang.String,java.lang.String)>/r3}" [color=blue];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>/r2}" -> "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/r3}" [color=blue];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>/r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>/r2}" -> "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>/$r11}" [color=green3,style=dashed];
  "VarNode{<java.security.KeyFactory: void <init>(java.lang.String)>/$r9}" -> "VarNode{<java.security.KeyFactory: void <init>(java.lang.String)>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.text.Format: java.lang.String format(java.lang.Object)>/$r4}" -> "VarNode{<java.text.Format: java.lang.String format(java.lang.Object)>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/r5}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r43}" [color=green3,style=dashed];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/r5}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r44}" [color=green3,style=dashed];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/r5}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r45}" [color=green3,style=dashed];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/r5}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r46}" [color=green3,style=dashed];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/r5}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r47}" [color=green3,style=dashed];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/r5}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/r5}" [color=blue];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getCanonicalFile()>[7@L655] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: long length()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getCanonicalFile()>[7@L655] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getCanonicalFile()>[7@L655] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getCanonicalFile()>[7@L655] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getCanonicalFile()>[7@L655] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getCanonicalFile()>[7@L655] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getCanonicalFile()>[7@L655] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean isDirectory()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getCanonicalFile()>[7@L655] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean mkdir()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getCanonicalFile()>[7@L655] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getParent()>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.File: java.io.File getCanonicalFile()>[7@L655] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getParent()>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>/$r16}" -> "VarNode{<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>/r2}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r72}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.text.DateFormat: java.util.Date parse(java.lang.String)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.UnknownFormatConversionException: java.lang.String getMessage()>/$r2}" -> "ArrayIndexNode{NewObj{<java.util.UnknownFormatConversionException: java.lang.String getMessage()>[1@L66] newarray java.lang.Object[%intconst0]}}" [color=red];
  "VarNode{<java.security.ProviderException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.ObjectIdentifier: void checkOtherComponent(int,int)>/$r5}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r60}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[46@L691] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[46@L691] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r22}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[46@L691] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: java.lang.String access$000(java.io.FilePermission)>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[46@L691] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[46@L691] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r30}" [color=red,style=dashed];
  "VarNode{<java.io.FilePermission: void init(int)>/$r30}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r14}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r13}" [color=green3,style=dashed];
  "VarNode{<java.util.Arrays: int[] copyOfRange(int[],int,int)>/$r7}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.MissingFormatWidthException: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{MergedObj{<Merged java.util.MissingFormatWidthException>}.<java.util.MissingFormatWidthException: java.lang.String s>}" [color=red];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r39}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r39}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r37}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: java.lang.String getUnicodeLocaleType(java.lang.String)>/$r3}" -> "VarNode{<sun.util.locale.UnicodeLocaleExtension: java.lang.String getUnicodeLocaleType(java.lang.String)>/$r4}" [];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r24}" -> "VarNode{<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>/r2}" [color=blue];
  "VarNode{<javax.crypto.Cipher$Transform: int supportsMode(java.security.Provider$Service)>/$r2}" -> "VarNode{<javax.crypto.Cipher$Transform: int supports(java.security.Provider$Service,java.lang.String,java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.text.DigitList: double getDouble()>/$r1}" -> "VarNode{<java.text.DigitList: double getDouble()>/$r3}" [color=green3,style=dashed];
  "VarNode{<java.text.DigitList: double getDouble()>/$r1}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(int)>/%this}" [color=blue];
  "VarNode{<java.text.DigitList: double getDouble()>/$r1}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r68}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,java.security.AlgorithmParameters,sun.security.util.ConstraintsParameters)>/r1}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/r4}" [color=blue];
  "VarNode{<sun.security.x509.X509CRLImpl: void <init>(sun.security.util.DerValue)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>/r0}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String,int)>/r0}" [color=blue];
  "VarNode{<java.security.Signature: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>[25@L266] new java.security.Signature$Delegate}.<java.security.Signature: java.lang.String algorithm>}" [color=red];
  "VarNode{<java.security.Signature: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<java.security.Signature: java.security.Signature getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>[10@L288] new java.security.Signature$Delegate}.<java.security.Signature: java.lang.String algorithm>}" [color=red];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r35}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.ExpiringCache$Entry: java.lang.String val()>/$r1}" -> "VarNode{<java.io.ExpiringCache: java.lang.String get(java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r54}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r55}" [color=green3,style=dashed];
  "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r19}" -> "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r20}" [color=green3,style=dashed];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r8}" -> "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.util.ArrayList$SubList: void rangeCheckForAdd(int)>/$r2}" -> "VarNode{<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Timestamp: java.lang.String toString()>/$r13}" -> "VarNode{<java.security.Timestamp: java.lang.String toString()>/$r14}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r58}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r25}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>/$r5}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r5}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.CertificateSerialNumber: java.lang.String toString()>/$r3}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r53}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r0}" -> "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r2}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r0}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/r0}" -> "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/r0}" -> "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/$r4}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/r87}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r77}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/r87}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r34}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r15}" -> "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r0}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r37}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>[0@L625] new sun.security.provider.PolicyParser$PermissionEntry}.<sun.security.provider.PolicyParser$PermissionEntry: java.lang.String name>}" [color=red];
  "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/r7}" -> "VarNode{<java.io.File: java.net.URI toURI()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/r7}" -> "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/r7}" -> "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r33}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/$r9}" -> "VarNode{<sun.misc.URLClassPath$FileLoader: void <init>(java.net.URL)>/$r6}" [color=blue,style=dashed];
  "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/$r9}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>/$r11}" [color=blue,style=dashed];
  "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/$r9}" -> "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r14}" [color=blue,style=dashed];
  "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/$r9}" -> "VarNode{<sun.misc.FileURLMapper: java.lang.String getPath()>/$r10}" [color=blue,style=dashed];
  "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/$r9}" -> "VarNode{<sun.security.util.PolicyUtil: java.io.InputStream getInputStream(java.net.URL)>/$r6}" [color=blue,style=dashed];
  "VarNode{<sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>/$r9}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/r25}" [color=blue,style=dashed];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r2}" -> "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r3}" [color=green3,style=dashed];
  "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r11}" -> "VarNode{<java.security.CodeSource: java.lang.String toString()>/$r12}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void objectArrayAppend(java.lang.StringBuffer,java.lang.Object[],java.util.Map)>/r0}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)>/r2}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void objectArrayAppend(java.lang.StringBuffer,java.lang.Object[],java.util.Map)>/r0}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r2}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r35}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r35}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r34}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)>/r2}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void intArrayAppend(java.lang.StringBuffer,int[])>/r0}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)>/r2}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void booleanArrayAppend(java.lang.StringBuffer,boolean[])>/r0}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)>/r2}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void charArrayAppend(java.lang.StringBuffer,char[])>/r0}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)>/r2}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void doubleArrayAppend(java.lang.StringBuffer,double[])>/r0}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)>/r2}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void longArrayAppend(java.lang.StringBuffer,long[])>/r0}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)>/r2}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void byteArrayAppend(java.lang.StringBuffer,byte[])>/r0}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)>/r2}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void shortArrayAppend(java.lang.StringBuffer,short[])>/r0}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)>/r2}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void floatArrayAppend(java.lang.StringBuffer,float[])>/r0}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)>/r2}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void objectArrayAppend(java.lang.StringBuffer,java.lang.Object[],java.util.Map)>/r0}" [color=blue];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String)>/$r1}" -> "VarNode{<sun.security.jca.ProviderConfig$3: java.lang.String run()>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String)>/$r1}" -> "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r19}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String)>/$r1}" -> "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.text.normalizer.ReplaceableString: void <init>(java.lang.String)>/r2}" -> "VarNode{<java.lang.StringBuffer: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/$r15}" -> "VarNode{<java.net.UnknownHostException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r15}" -> "VarNode{<java.util.regex.Pattern: void normalize()>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.text.SimpleDateFormat: void applyPattern(java.lang.String)>/r1}" -> "VarNode{<java.text.SimpleDateFormat: void applyPatternImpl(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpResponseStatus: io.netty.handler.codec.http.HttpResponseStatus valueOf(int)>[134@L455] new io.netty.handler.codec.http.HttpResponseStatus}.<io.netty.handler.codec.http.HttpResponseStatus: java.lang.String reasonPhrase>}" -> "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: java.lang.String toString()>/$r5}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toString()>/$r2}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r21}" -> "VarNode{<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>/$r60}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r51}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r25}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r17}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r17}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String,boolean)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier algOID(java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier algOID(java.lang.String)>/r0}" -> "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier algOID(java.lang.String)>/r0}" -> "VarNode{<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier algOID(java.lang.String)>/$r38}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier algOID(java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.net.URI: java.lang.String getAuthority()>/$r3}" -> "VarNode{<java.net.URI: java.lang.String decode(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.io.FilePermission: java.lang.String access$000(java.io.FilePermission)>/$r1}" -> "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.io.FilePermission: java.lang.String access$000(java.io.FilePermission)>/$r1}" -> "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r21}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.JRELocaleProviderAdapter: java.util.Locale[] createAvailableLocales()>[13@L406] new java.util.StringTokenizer}.<java.util.StringTokenizer: java.lang.String str>}" -> "VarNode{<java.util.StringTokenizer: java.lang.String nextToken()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>/$r2}" -> "VarNode{<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>/$r7}" [color=blue,style=dashed];
  "VarNode{<io.netty.channel.ChannelException: void <init>(java.lang.String,java.lang.Throwable)>/message}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r64}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r64}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r63}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r24}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r25}" [color=green3,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.lang.IndexOutOfBoundsException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.ServiceLoader$LazyIterator: boolean hasNextService()>/$r19}" -> "VarNode{<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ServiceLoader$LazyIterator: boolean hasNextService()>/$r19}" -> "VarNode{<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>/r4}" [color=blue];
  "VarNode{<java.lang.Package: java.lang.Package getSystemPackage(java.lang.String)>/$r4}" -> "VarNode{<java.lang.Package: java.lang.Package defineSystemPackage(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/$r11}" -> "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/$r12}" [color=green3,style=dashed];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r28}" -> "VarNode{<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>/r3}" [color=blue];
  "VarNode{<java.net.URLClassLoader$1: java.lang.Class run()>/$r15}" -> "VarNode{<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>/$r22}" -> "VarNode{<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r23}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r24}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[123@L857] new java.security.UnresolvedPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.Extension: java.lang.String getID()>/$r1}" -> "VarNode{<sun.util.locale.Extension: java.lang.String toString()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.Extension: java.lang.String getID()>/$r1}" -> "VarNode{<sun.util.locale.UnicodeLocaleExtension: java.lang.String getID()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>/$r32}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r29}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r30}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(double,java.util.Locale)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>/r2}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<java.net.URI: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>/r2}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(int)>/%this}" [color=blue];
  "VarNode{<sun.security.pkcs.PKCS9Attributes: byte[] decode(sun.security.util.DerInputStream)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.EDIPartyName: java.lang.String toString()>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.String argumentTypesToString(java.lang.Class[])>/$r2}" -> "VarNode{<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.Class: java.lang.String argumentTypesToString(java.lang.Class[])>/$r2}" -> "VarNode{<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.Class: java.lang.String argumentTypesToString(java.lang.Class[])>/$r2}" -> "VarNode{<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>/$r8}" [color=blue,style=dashed];
  "VarNode{<sun.security.pkcs.PKCS7: void parseOldSignedData(sun.security.util.DerValue)>/$r29}" -> "VarNode{<sun.security.pkcs.ParsingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.File: void <init>(java.net.URI)>/r1}" -> "VarNode{<java.io.File: void <init>(java.net.URI)>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r4}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r59}" [];
  "VarNode{<java.util.jar.JarVerifier: void doneWithMeta()>/$r8}" -> "VarNode{<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>/r3}" [color=blue];
  "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r21}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r3}" -> "VarNode{<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void longArrayAppend(java.lang.StringBuffer,long[])>/r0}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: void longArrayAppend(java.lang.StringBuffer,long[])>/r0}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(long)>/%this}" [color=blue];
  "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r10}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>/r0}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String,int)>/r0}" [color=blue];
  "VarNode{<java.util.LinkedList: java.lang.Object[] toArray()>/$r2}" -> "ArrayIndexNode{NewObj{<java.util.LinkedList: java.lang.Object[] toArray()>[1@L1050] newarray java.lang.Object[$i0]}}" [color=red];
  "InstanceFieldNode{MergedObj{<Merged java.lang.StringBuilder>}.<java.lang.AbstractStringBuilder: char[] value>}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.AbstractStringBuilder)>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.lang.StringBuilder>}.<java.lang.AbstractStringBuilder: char[] value>}" -> "VarNode{<java.lang.StringBuilder: java.lang.String toString()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.lang.StringBuilder>}.<java.lang.AbstractStringBuilder: char[] value>}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.String substring(int,int)>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.lang.StringBuilder>}.<java.lang.AbstractStringBuilder: char[] value>}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.security.jca.GetInstance: void checkSuperClass(java.security.Provider$Service,java.lang.Class,java.lang.Class)>/$r14}" -> "VarNode{<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.Object call()>/$r2}" -> "VarNode{<io.netty.util.concurrent.PromiseTask: void run()>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/$r4}" -> "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.pkcs.SignerInfo: sun.security.pkcs.SignerInfo verify(sun.security.pkcs.PKCS7,byte[])>/$r4}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/r6}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>[52@L98] new sun.util.locale.Extension}.<sun.util.locale.Extension: java.lang.String id>}" -> "VarNode{<sun.util.locale.Extension: java.lang.String getID()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.UniqueName: void <init>(java.util.concurrent.ConcurrentMap,java.lang.String,java.lang.Object[])>/$r9}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r36}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "VarNode{<javax.crypto.CryptoPermission: void <init>(java.lang.String,int,java.security.spec.AlgorithmParameterSpec,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<javax.crypto.JceSecurityManager: javax.crypto.CryptoPermission getCryptoPermission(java.lang.String)>[91@L186] new javax.crypto.CryptoPermission}.<javax.crypto.CryptoPermission: java.lang.String alg>}" [color=red];
  "VarNode{<javax.crypto.CryptoPermission: void <init>(java.lang.String,int,java.security.spec.AlgorithmParameterSpec,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>[14@L1081] new javax.crypto.CryptoPermission}.<javax.crypto.CryptoPermission: java.lang.String alg>}" [color=red];
  "VarNode{<sun.security.x509.X500Name: void parseDN(java.lang.String,java.util.Map)>/$r7}" -> "VarNode{<sun.security.x509.RDN: void <init>(java.lang.String,java.util.Map)>/r2}" [color=blue];
  "VarNode{<java.security.Signature$Delegate: void <init>(java.security.Provider$Service,java.util.Iterator,java.lang.String)>/r1}" -> "VarNode{<java.security.Signature: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r29}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask: io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask newInstance(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask: void init(io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask,io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>/msg}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.String toPattern(boolean)>/$r6}" -> "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/r8}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC1779Name()>/$r2}" -> "VarNode{<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String)>/$r8}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>[5@L524] new java.io.StringWriter}.<java.io.StringWriter: java.lang.StringBuffer buf>}" -> "VarNode{<java.io.StringWriter: java.lang.String toString()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>[5@L524] new java.io.StringWriter}.<java.io.StringWriter: java.lang.StringBuffer buf>}" -> "VarNode{<java.io.StringWriter: void write(java.lang.String)>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>[5@L524] new java.io.StringWriter}.<java.io.StringWriter: java.lang.StringBuffer buf>}" -> "VarNode{<java.io.StringWriter: void write(java.lang.String,int,int)>/$r2}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>[1@L66] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r13}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>[1@L66] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r14}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>[1@L66] newarray java.lang.Object[%intconst0]}}" -> "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r15}" [color=red,style=dashed];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/r1}" -> "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r54}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r55}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r39}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void checkNumeric()>/$r15}" -> "VarNode{<java.util.MissingFormatWidthException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[46@L691] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[46@L691] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[46@L691] new java.io.FilePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r3}" -> "VarNode{<java.lang.Throwable: java.lang.String toString()>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String getVariant()>/$r2}" -> "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String getVariant()>/$r2}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String getVariant()>/$r2}" -> "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String getVariant()>/$r2}" -> "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.ObjectIdentifier: void <init>(sun.security.util.DerInputStream)>/$r17}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r22}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r23}" [color=green3,style=dashed];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.SimpleDateFormat: void subFormat(int,int,java.text.Format$FieldDelegate,java.lang.StringBuffer,boolean)>/r0}" -> "VarNode{<sun.util.calendar.CalendarUtils: java.lang.StringBuffer sprintf0d(java.lang.StringBuffer,int,int)>/r0}" [color=blue];
  "VarNode{<java.text.SimpleDateFormat: void subFormat(int,int,java.text.Format$FieldDelegate,java.lang.StringBuffer,boolean)>/r0}" -> "VarNode{<java.text.SimpleDateFormat: void zeroPaddingNumber(int,int,int,java.lang.StringBuffer)>/r3}" [color=blue];
  "VarNode{<java.text.SimpleDateFormat: void subFormat(int,int,java.text.Format$FieldDelegate,java.lang.StringBuffer,boolean)>/r0}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<java.util.LinkedList: boolean addAll(int,java.util.Collection)>/r4}" -> "VarNode{<java.util.LinkedList$Node: void <init>(java.util.LinkedList$Node,java.lang.Object,java.util.LinkedList$Node)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r41}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.x509.X509CRLEntryImpl: void <init>(sun.security.util.DerValue)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CRLEntryImpl: void <init>(sun.security.util.DerValue)>/$r6}" -> "VarNode{<sun.security.x509.X509CRLEntryImpl: void <init>(sun.security.util.DerValue)>/$r5}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>[36@L898] new java.net.URL}.<java.net.URL: java.lang.String file>}" -> "VarNode{<java.net.URL: java.lang.String getFile()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.pkcs.PKCS9Attribute: void <init>(sun.security.util.DerValue)>/$r52}" -> "VarNode{<sun.security.pkcs.PKCS9Attribute: void <init>(sun.security.util.DerValue)>/$r53}" [color=green3,style=dashed];
  "VarNode{<java.util.SimpleTimeZone: void decodeEndRule()>/$r15}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.math.BigInteger: void implSquareToLenChecks(int[],int,int[],int)>/$r8}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[28@L998] new java.net.NetPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[28@L998] new java.net.NetPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[28@L998] new java.net.NetPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/$r8}" -> "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String getScript()>/$r2}" -> "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String getScript()>/$r2}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String getScript()>/$r2}" -> "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/$r11}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r4}" -> "VarNode{<java.net.URI: void <init>(java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r4}" -> "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r6}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r4}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r33}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.VirtualMachineError: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.Error: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.SecureClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.CodeSource)>/r1}" -> "VarNode{<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)>/r2}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[0@L417] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String language>}" -> "VarNode{<sun.util.locale.LanguageTag: java.lang.String getLanguage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.EDIPartyName: java.lang.String toString()>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.EOFException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/$r12}" -> "VarNode{<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>/r2}" [color=blue];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/$r9}" -> "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r14}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.Object,java.util.Locale)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>/$r20}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>/r32}" -> "VarNode{<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>/r32}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>/r32}" -> "VarNode{<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>/$r23}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r87}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r87}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r106}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/r3}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-146}" [];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/r3}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-144}" [];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/r3}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>/$r8}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>[0@L625] new sun.security.provider.PolicyParser$PermissionEntry}.<sun.security.provider.PolicyParser$PermissionEntry: java.lang.String name>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r59}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r59}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" [color=green3,style=dashed];
  "VarNode{<sun.security.pkcs.ContentInfo: byte[] getData()>/$r13}" -> "VarNode{<sun.security.pkcs.ContentInfo: byte[] getData()>/$r14}" [color=green3,style=dashed];
  "VarNode{<java.util.ArrayList: java.lang.Object elementData(int)>/$r2}" -> "VarNode{<java.util.ArrayList: java.lang.Object get(int)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.ArrayList: java.lang.Object elementData(int)>/$r2}" -> "VarNode{<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r32}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r32}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r31}" [color=green3,style=dashed];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[99@L720] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<javax.crypto.JarVerifier: void verify()>[11@L81] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[0@L1368] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>[0@L702] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<java.net.URI: java.net.URL toURL()>[7@L1089] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL[] parseClassPath(java.net.URL,java.lang.String)>[11@L1246] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[28@L517] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource checkResource(java.lang.String,boolean,java.util.jar.JarEntry)>[0@L970] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveFile(java.net.URL,java.lang.String)>[10@L1296] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$Loader: sun.misc.Resource getResource(java.lang.String,boolean)>[0@L738] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader$1: java.lang.Void run()>[36@L898] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[4@L1369] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>[16@L1711] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<sun.security.provider.SeedGenerator$URLSeedGenerator: void init()>[0@L504] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<javax.crypto.JceSecurity: void <clinit>()>[35@L212] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>[15@L1110] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.net.URL tryResolveNonFile(java.net.URL,java.lang.String)>[6@L1309] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<java.security.Security: void initialize()>[107@L144] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[46@L120] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<java.security.Security: void initialize()>[118@L147] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[84@L155] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[23@L764] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[39@L113] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/r37}" -> "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[77@L148] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" [color=red];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r7}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r5}" [color=green3,style=dashed];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>[11@L499] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" -> "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String current()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.io.File: boolean isDirectory()>/$r3}" -> "VarNode{<java.lang.SecurityManager: void checkRead(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.io.FilePermission: void init(int)>/$r13}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkRead(java.lang.String)>[0@L888] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "VarNode{<java.io.FilePermission: void init(int)>/$r13}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkWrite(java.lang.String)>[0@L979] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "VarNode{<java.io.FilePermission: void init(int)>/$r13}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkDelete(java.lang.String)>[0@L1007] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "VarNode{<java.io.FilePermission: void init(int)>/$r13}" -> "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[22@L684] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "VarNode{<java.io.FilePermission: void init(int)>/$r13}" -> "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[46@L691] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "VarNode{<java.io.FilePermission: void init(int)>/$r13}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[4@L990] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[5@L45] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" -> "VarNode{<io.netty.handler.codec.http.HttpMethod: java.lang.String name()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>/$r4}" -> "VarNode{<sun.security.x509.CertificateExtensions: sun.security.x509.Extension get(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r9}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r12}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r12}" -> "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty family(boolean,boolean)>/$r25}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.PatternSyntaxException error(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r21}" -> "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r5}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>[0@L535] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String prefix>}" -> "VarNode{<sun.security.x509.X509AttributeName: java.lang.String getPrefix()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Calendar$Builder: java.util.Calendar build()>/$r37}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.security.Provider)>/r1}" -> "VarNode{<java.security.Security: java.lang.Object[] getImpl(java.lang.String,java.lang.String,java.security.Provider)>/r2}" [color=blue];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.security.Provider)>/r1}" -> "VarNode{<java.security.MessageDigest$Delegate: void <init>(java.security.MessageDigestSpi,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>/r0}" -> "VarNode{<java.lang.System: java.lang.String getProperty(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$c3}" -> "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r14}" [color=green3,style=dashed];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r14}" -> "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/r30}" [];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r14}" -> "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r17}" [color=green3,style=dashed];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String toString()>/$r3}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.ArrayList: java.lang.String outOfBoundsMsg(int)>/$r6}" -> "VarNode{<java.util.ArrayList: void rangeCheck(int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.ArrayList: java.lang.String outOfBoundsMsg(int)>/$r6}" -> "VarNode{<java.util.ArrayList: void rangeCheckForAdd(int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r45}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r46}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[60@L695] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r41}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier algOID(java.lang.String)>[15@L496] new sun.security.util.ObjectIdentifier}.<sun.security.util.ObjectIdentifier: java.lang.String stringForm>}" -> "VarNode{<sun.security.util.ObjectIdentifier: java.lang.String toString()>/r11}" [color=red,style=dashed];
  "VarNode{<io.netty.channel.SimpleChannelInboundHandler: void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)>/msg}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)>/r2}" [color=blue];
  "VarNode{<io.netty.channel.SimpleChannelInboundHandler: void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)>/msg}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>/msg}" [color=blue];
  "VarNode{<java.lang.SecurityManager$1: java.lang.String run()>/$r0}" -> "VarNode{<java.lang.SecurityManager$1: java.lang.Object run()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.zip.ZipInputStream: void readEnd(java.util.zip.ZipEntry)>/$r15}" -> "VarNode{<java.util.zip.ZipException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r42}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r14}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r42}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r42}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r17}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r42}" -> "VarNode{<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r15}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r14}" [color=green3,style=dashed];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.util.List getCandidateLocales(java.lang.String,java.util.Locale)>/r1}" -> "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.util.List getCandidateLocales(java.lang.String,java.util.Locale)>/$r15}" [];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.util.List getCandidateLocales(java.lang.String,java.util.Locale)>/r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.security.Security: void initialize()>/$r35}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void checkCharacter()>/$r11}" -> "VarNode{<java.util.MissingFormatWidthException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r7}" -> "VarNode{<java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/r4}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.Shutdown: void add(int,boolean,java.lang.Runnable)>/$r11}" -> "VarNode{<java.lang.InternalError: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.OtherName: sun.security.x509.GeneralNameInterface getGNI(sun.security.util.ObjectIdentifier,byte[])>/$r12}" -> "VarNode{<sun.security.x509.OtherName: sun.security.x509.GeneralNameInterface getGNI(sun.security.util.ObjectIdentifier,byte[])>/$r13}" [color=green3,style=dashed];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r64}" -> "VarNode{<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.time.Instant: java.time.Instant from(java.time.temporal.TemporalAccessor)>/$r14}" -> "VarNode{<java.time.DateTimeException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r8}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.LinkedHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" -> "VarNode{<java.util.HashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r2}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>[48@L1735] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean isDirectory()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>[48@L1735] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>[48@L1735] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>[48@L1735] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r89}" -> "VarNode{<java.security.UnresolvedPermission: void <init>(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate[])>/r2}" [color=blue];
  "VarNode{<java.util.Collections$SingletonSet: void <init>(java.lang.Object)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.Collections: java.util.Set singleton(java.lang.Object)>[0@L4669] new java.util.Collections$SingletonSet}.<java.util.Collections$SingletonSet: java.lang.Object element>}" [color=red];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r18}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])>/%native-arraycopy-temp476}" -> "ArrayIndexNode{NewObj{<java.util.ArrayDeque: java.lang.Object[] toArray()>[1@L787] newarray java.lang.Object[$i0]}}" [color=red];
  "VarNode{<java.security.BasicPermissionCollection: void add(java.security.Permission)>/$r19}" -> "VarNode{<java.security.BasicPermissionCollection: void add(java.security.Permission)>/$r20}" [color=green3,style=dashed];
  "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/$r6}" -> "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/r7}" [color=green3,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.lang.Package: void <init>(java.lang.String,java.util.jar.Manifest,java.net.URL,java.lang.ClassLoader,java.lang.Package$1)>/r1}" -> "VarNode{<java.lang.Package: void <init>(java.lang.String,java.util.jar.Manifest,java.net.URL,java.lang.ClassLoader)>/r1}" [color=blue];
  "VarNode{<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>/$r7}" -> "VarNode{<sun.misc.JarFilter: boolean accept(java.io.File,java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.LinkedHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" -> "VarNode{<java.util.HashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" [color=blue];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r23}" -> "VarNode{<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>/$r13}" [color=blue,style=dashed];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r23}" -> "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r9}" -> "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r4}" [color=green3,style=dashed];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r23}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r24}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r21}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r20}" [color=green3,style=dashed];
  "VarNode{<java.util.LinkedList: void checkPositionIndex(int)>/$r2}" -> "VarNode{<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: java.util.HashMap computeOidTable()>/r6}" -> "VarNode{<sun.security.x509.AlgorithmId: java.util.HashMap computeOidTable()>/$r10}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.util.HashMap computeOidTable()>/r6}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: java.util.HashMap computeOidTable()>/r6}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r15}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r18}" -> "VarNode{<java.io.FilePermission$1: java.lang.Object run()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier algOID(java.lang.String)>/$r38}" -> "VarNode{<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r41}" -> "VarNode{<sun.util.locale.StringTokenIterator: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r8}" -> "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeRegion(java.lang.String)>/r0}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String fragment>}" -> "VarNode{<java.net.URI: void defineString()>/$r8}" [color=red,style=dashed];
  "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r11}" -> "VarNode{<sun.security.jca.ProviderConfig: void <init>(java.lang.String,java.lang.String)>/r2}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>[80@L302] new sun.security.util.SignatureFileVerifier}.<sun.security.util.SignatureFileVerifier: java.lang.String name>}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r54}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>[80@L302] new sun.security.util.SignatureFileVerifier}.<sun.security.util.SignatureFileVerifier: java.lang.String name>}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r15}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>[80@L302] new sun.security.util.SignatureFileVerifier}.<sun.security.util.SignatureFileVerifier: java.lang.String name>}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r7}" [color=red,style=dashed];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r12}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r12}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>/$r24}" [color=green3,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.lang.StringBuffer>}.<java.lang.AbstractStringBuilder: char[] value>}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.lang.StringBuffer>}.<java.lang.AbstractStringBuilder: char[] value>}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.String substring(int,int)>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.lang.StringBuffer>}.<java.lang.AbstractStringBuilder: char[] value>}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.AbstractStringBuilder)>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>[124@L396] new sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint}.<sun.security.util.DisabledAlgorithmConstraints$Constraint: java.lang.String algorithm>}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r15}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>[124@L396] new sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint}.<sun.security.util.DisabledAlgorithmConstraints$Constraint: java.lang.String algorithm>}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r6}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.IPAddressName: void parseIPv6(java.lang.String)>/$r13}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/$r5}" -> "VarNode{<java.io.FilePermission: int getMask(java.lang.String)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.util.Vector: java.lang.Object set(int,java.lang.Object)>/r2}" -> "ArrayIndexNode{NewObj{<java.util.Vector: void <init>(int,int)>[12@L138] newarray java.lang.Object[i0]}}" [color=red];
  "VarNode{<java.util.Vector: java.lang.Object set(int,java.lang.Object)>/r2}" -> "ArrayIndexNode{NewObj{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>[2@L3210] newarray java.lang.Object[i0]}}" [color=red];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getResourceKeyFor(sun.util.locale.provider.LocaleProviderAdapter$Type,java.lang.String,int,int,boolean)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r24}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>/$r8}" -> "VarNode{<java.util.Currency: void info(java.lang.String,java.lang.Throwable)>/r3}" [color=blue];
  "VarNode{<java.util.ArrayDeque: boolean add(java.lang.Object)>/r1}" -> "VarNode{<java.util.ArrayDeque: void addLast(java.lang.Object)>/r0}" [color=blue];
  "VarNode{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>/$r15}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource checkResource(java.lang.String,boolean,java.util.jar.JarEntry)>[0@L970] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource checkResource(java.lang.String,boolean,java.util.jar.JarEntry)>[0@L970] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.lang.InstantiationException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.logging.LogManager$SystemLoggerContext: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String)>[3@L925] new java.util.logging.Logger}.<java.util.logging.Logger: java.lang.String name>}" -> "VarNode{<java.util.logging.Logger: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.text.DecimalFormat: void expandAffixes()>/$r13}" -> "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String positivePrefix>}" [color=red];
  "VarNode{<java.text.DecimalFormat: void expandAffixes()>/$r13}" -> "InstanceFieldNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[99@L1481] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String positivePrefix>}" [color=red];
  "VarNode{<sun.security.pkcs.PKCS9Attribute: void throwSingleValuedException()>/$r9}" -> "VarNode{<sun.security.pkcs.PKCS9Attribute: void throwSingleValuedException()>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/$r11}" -> "VarNode{<java.text.DecimalFormat: void append(java.lang.StringBuffer,java.lang.String,java.text.Format$FieldDelegate,java.text.FieldPosition[],java.text.Format$Field)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r53}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$i3}" -> "VarNode{<java.util.regex.Pattern: void normalize()>/$r14}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$i3}" -> "VarNode{<java.util.regex.Pattern: void normalize()>/$r15}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/reasonPhrase}" -> "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/$r11}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/reasonPhrase}" -> "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpResponseStatus: io.netty.handler.codec.http.HttpResponseStatus valueOf(int)>[134@L455] new io.netty.handler.codec.http.HttpResponseStatus}.<io.netty.handler.codec.http.HttpResponseStatus: java.lang.String reasonPhrase>}" [color=red];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/reasonPhrase}" -> "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/$r4}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/reasonPhrase}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty unicodeScriptPropertyFor(java.lang.String)>/$r9}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.PatternSyntaxException error(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.CertificateExtensions: void parseExtension(sun.security.x509.Extension)>/$r38}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.pkcs.PKCS7: void parse(sun.security.util.DerInputStream)>/$r4}" -> "VarNode{<sun.security.pkcs.ParsingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Policy$2: java.security.Policy run()>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: boolean isSupportedLocale(java.util.Locale)>/$r6}" -> "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" [color=blue];
  "VarNode{<java.util.WeakHashMap: void <init>(int,float)>/$r12}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r17}" -> "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r18}" [color=green3,style=dashed];
  "VarNode{<sun.misc.URLClassPath$2: boolean next()>/$r5}" -> "VarNode{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>/r5}" [color=blue];
  "VarNode{<sun.misc.URLClassPath$2: boolean next()>/$r5}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean)>/r2}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r0}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r12}" [color=green3,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r0}" -> "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r0}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r0}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r0}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r0}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.io.File)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r0}" -> "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r0}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r4}" [color=green3,style=dashed];
  "VarNode{<java.util.Currency: java.util.Currency getInstance(java.lang.String)>/r0}" -> "VarNode{<java.util.Currency: java.util.Currency getInstance(java.lang.String,int,int)>/r0}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r35}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.io.FilePermission$1: java.lang.String run()>[18@L245] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.X509Key: java.lang.String toString()>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r20}" -> "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: void append(java.lang.StringBuffer,java.lang.String,java.text.Format$FieldDelegate,java.text.FieldPosition[],java.text.Format$Field)>/r1}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>/$r2}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>/$r2}" -> "VarNode{<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>/$r0}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$Node group0()>/$r29}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.PatternSyntaxException error(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r47}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r37}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>[0@L840] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>[0@L840] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r3}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r3}" -> "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r4}" -> "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r4}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URI$Parser: void fail(java.lang.String,int)>/$r3}" -> "VarNode{<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String,int)>/r2}" [color=blue];
  "VarNode{<java.math.BigInteger: void <clinit>()>/$r68}" -> "VarNode{<java.math.BigInteger: void <clinit>()>/$r70}" [color=green3,style=dashed];
  "VarNode{<java.math.BigInteger: void <clinit>()>/$r68}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.net.RegisteredDomain: sun.security.util.RegisteredDomain registeredDomain(java.lang.String)>/r0}" -> "VarNode{<sun.net.RegisteredDomain: java.lang.String getRegisteredDomain(java.lang.String)>/r49}" [color=blue];
  "VarNode{<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty getInstance()>/$r5}" -> "VarNode{<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.zip.ZipException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.pkcs.SignerInfo: java.util.Set verifyAlgorithms(sun.security.pkcs.SignerInfo[],sun.security.util.JarConstraintsParameters,java.lang.String)>/$r9}" -> "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/r3}" [color=blue];
  "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/r8}" -> "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/r8}" -> "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/r8}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/r8}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.net.InetAddress: void <init>()>[2@L309] new java.net.InetAddress$InetAddressHolder}.<java.net.InetAddress$InetAddressHolder: java.lang.String hostName>}" -> "VarNode{<java.net.InetAddress$InetAddressHolder: java.lang.String getHostName()>/$r1}" [color=red,style=dashed];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/%taint-temp-23376}" -> "InstanceFieldNode{NewObj{<io.netty.util.concurrent.PromiseTask: java.util.concurrent.Callable toCallable(java.lang.Runnable,java.lang.Object)>[0@L24] new io.netty.util.concurrent.PromiseTask$RunnableAdapter}.<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.Object result>}" [color=red];
  "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.AbstractStringBuilder)>/r1}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.AbstractStringBuilder)>/r0}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/r2}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: int getMask(java.lang.String)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/r3}" -> "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/r3}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase()>/%this}" [color=blue];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r23}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r23}" -> "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.net.URLClassLoader: boolean isSealed(java.lang.String,java.util.jar.Manifest)>/r2}" -> "VarNode{<java.net.URLClassLoader: boolean isSealed(java.lang.String,java.util.jar.Manifest)>/$r3}" [color=green3,style=dashed];
  "VarNode{<java.net.URLClassLoader: boolean isSealed(java.lang.String,java.util.jar.Manifest)>/r2}" -> "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r39}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.resources.LocaleData: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>[0@L163] new sun.util.resources.LocaleData$1}.<sun.util.resources.LocaleData$1: java.lang.String val$baseName>}" -> "VarNode{<sun.util.resources.LocaleData$1: java.util.ResourceBundle run()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>/$r12}" -> "VarNode{<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.DuplicateFormatFlagsException: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{MergedObj{<Merged java.util.DuplicateFormatFlagsException>}.<java.util.DuplicateFormatFlagsException: java.lang.String flags>}" [color=red];
  "VarNode{<java.util.logging.LogManager$5: java.lang.Object run()>/$r25}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.calendar.CalendarSystem: java.util.Properties getCalendarProperties()>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r5}" -> "InstanceFieldNode{NewObj{<sun.security.pkcs.SignerInfo: void <init>(sun.security.util.DerInputStream,boolean)>[19@L153] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" [color=red];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r5}" -> "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: void parse(sun.security.util.DerValue)>[26@L649] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" [color=red];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r5}" -> "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: void parse(sun.security.util.DerValue)>[39@L659] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" [color=red];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r5}" -> "InstanceFieldNode{NewObj{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>[13@L181] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" [color=red];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r5}" -> "InstanceFieldNode{NewObj{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>[100@L149] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" [color=red];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253CanonicalName()>/$r5}" -> "InstanceFieldNode{NewObj{<sun.security.x509.X509CRLImpl: void parse(sun.security.util.DerValue)>[104@L1116] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String canonicalDn>}" [color=red];
  "VarNode{<java.text.SimpleDateFormat: void applyPatternImpl(java.lang.String)>/$r2}" -> "InstanceFieldNode{NewObj{<sun.util.locale.provider.DateFormatProviderImpl: java.text.DateFormat getInstance(int,int,java.util.Locale)>[4@L150] new java.text.SimpleDateFormat}.<java.text.SimpleDateFormat: char[] compiledPattern>}" [color=red];
  "VarNode{<sun.util.locale.Extension: void setValue(java.lang.String)>/$r5}" -> "VarNode{<sun.util.locale.Extension: void setValue(java.lang.String)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>/$r8}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>/$r8}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/$r0}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>/$r8}" -> "VarNode{<sun.security.util.AlgorithmDecomposer: java.lang.String hashName(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp344}" -> "ArrayIndexNode{NewObj{<java.util.ArrayList: void <clinit>()>[1@L120] newarray java.lang.Object[%intconst0]}}" [color=red];
  "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp344}" -> "ArrayIndexNode{NewObj{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>[2@L3210] newarray java.lang.Object[i0]}}" [color=red];
  "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp344}" -> "ArrayIndexNode{NewObj{<sun.security.util.CurveDB: java.lang.String[] getNamesByOID(java.lang.String)>[5@L167] newarray java.lang.String[%intconst0]}}" [color=red];
  "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp344}" -> "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[40@L1229] newarray java.lang.String[%intconst1]}}" [color=red];
  "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp344}" -> "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[64@L1240] newarray java.lang.String[i14]}}" [color=red];
  "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp344}" -> "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[82@L2364] newarray java.lang.String[%intconst0]}}" [color=red];
  "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp344}" -> "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[103@L2377] newarray java.lang.String[i26]}}" [color=red];
  "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r8}" -> "VarNode{<java.lang.SecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)>/$r3}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void channelRead0(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/request}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r57}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String path>}" -> "VarNode{<java.net.URI: void defineString()>/$r10}" [color=red,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: int index(java.lang.String)>/$r2}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27899}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1774] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27899}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1789] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27899}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1784] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27899}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1779] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object value>}" [color=red];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>[14@L1766] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/r22}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/r12}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r32}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r32}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r30}" [color=green3,style=dashed];
  "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>/r1}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence)>/r0}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigInteger,java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean)>/$r5}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigInteger,java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean)>/$r5}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.math.BigInteger,java.lang.StringBuffer,java.text.FieldPosition)>/$r5}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r83}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r84}" [color=green3,style=dashed];
  "VarNode{<java.io.FilePermission: void <init>(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.File: void <init>(java.net.URI)>/r20}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r36}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r40}" [];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r36}" -> "VarNode{<java.text.MessageFormat: void <init>(java.lang.String,java.util.Locale)>/r5}" [color=blue];
  "VarNode{<io.netty.buffer.UnpooledDirectByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,int,int)>/$r17}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.calendar.ZoneInfoFile$1: java.lang.Object run()>/$r5}" -> "VarNode{<sun.util.calendar.ZoneInfoFile$1: java.lang.Object run()>/$r6}" [color=green3,style=dashed];
  "VarNode{<Server: void main(java.lang.String[])>/$r4}" -> "ArrayIndexNode{NewObj{<Server: void main(java.lang.String[])>[8@L11] newarray java.lang.Object[%intconst0]}}" [color=red];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r5}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r4}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.CryptoPermission: void <init>(java.lang.String,int,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<javax.crypto.JceSecurityManager: javax.crypto.CryptoPermission getCryptoPermission(java.lang.String)>[98@L191] new javax.crypto.CryptoPermission}.<javax.crypto.CryptoPermission: java.lang.String alg>}" [color=red];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String paramsToString()>/$r8}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String,int)>/r1}" -> "VarNode{<java.lang.Exception: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>/$r8}" -> "VarNode{<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.io.File: java.io.File getCanonicalFile()>/$r1}" -> "VarNode{<java.io.File: java.io.File getCanonicalFile()>/r6}" [];
  "VarNode{<java.io.File: java.io.File getCanonicalFile()>/$r1}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String normalize(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.UnknownFormatConversionException: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{MergedObj{<Merged java.util.UnknownFormatConversionException>}.<java.util.UnknownFormatConversionException: java.lang.String s>}" [color=red];
  "VarNode{<sun.util.locale.LanguageTag: boolean parsePrivateuse(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r5}" -> "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[21@L199] new sun.util.locale.LanguageTag}.<sun.util.locale.LanguageTag: java.lang.String privateuse>}" [color=red];
  "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/r13}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/r13}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r91}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/r13}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r90}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.Extension: java.lang.String toString()>/r13}" -> "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r7}" -> "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r2}" -> "VarNode{<java.util.ArrayList: boolean add(java.lang.Object)>/r2}" [color=blue];
  "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r2}" -> "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r2}" -> "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r13}" [color=green3,style=dashed];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r27}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName0(java.lang.String,java.net.InetAddress,boolean)>/r0}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getCachedAddresses(java.lang.String)>/r7}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName0(java.lang.String,java.net.InetAddress,boolean)>/r0}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAddressesFromNameService(java.lang.String,java.net.InetAddress)>/r0}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName0(java.lang.String,java.net.InetAddress,boolean)>/r0}" -> "VarNode{<java.net.UnknownHostException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName0(java.lang.String,java.net.InetAddress,boolean)>/r0}" -> "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/r13}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig: void <init>(java.lang.String)>/r1}" -> "VarNode{<sun.security.jca.ProviderConfig: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.jca.Providers: void endThreadProviderList(sun.security.jca.ProviderList)>/$r7}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r31}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r32}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r31}" -> "VarNode{<java.lang.String: java.lang.String toString()>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r32}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.CRLExtensions: void parseExtension(sun.security.x509.Extension)>/$r23}" -> "VarNode{<java.security.cert.CRLException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>[11@L941] new java.util.jar.JarFile}.<java.util.zip.ZipFile: java.lang.String name>}" -> "VarNode{<java.util.zip.ZipFile: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>[11@L941] new java.util.jar.JarFile}.<java.util.zip.ZipFile: java.lang.String name>}" -> "VarNode{<java.util.zip.ZipFile: java.lang.String access$800(java.util.zip.ZipFile)>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>[0@L311] new sun.util.locale.BaseLocale}.<sun.util.locale.BaseLocale: java.lang.String language>}" -> "VarNode{<sun.util.locale.BaseLocale: java.lang.String getLanguage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String,boolean)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.misc.FloatingDecimal: java.lang.String stripLeadingZeros(java.lang.String)>/$r1}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r18}" [color=blue,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: java.lang.String stripLeadingZeros(java.lang.String)>/$r1}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: java.lang.String stripLeadingZeros(java.lang.String)>/$r1}" -> "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r29}" [color=blue,style=dashed];
  "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r11}" -> "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r12}" [color=green3,style=dashed];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r37}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r38}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: java.lang.String name()>/$r1}" -> "VarNode{<io.netty.handler.codec.http.HttpMethod: java.lang.String toString()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r14}" -> "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r15}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r14}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r15}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r57}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.Formatter: java.util.Formatter$FormatString[] parse(java.lang.String)>[14@L2557] new java.util.Formatter$FixedString}.<java.util.Formatter$FixedString: java.lang.String s>}" -> "VarNode{<java.util.Formatter$FixedString: void print(java.lang.Object,java.util.Locale)>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter: java.util.Formatter$FormatString[] parse(java.lang.String)>[14@L2557] new java.util.Formatter$FixedString}.<java.util.Formatter$FixedString: java.lang.String s>}" -> "VarNode{<java.util.Formatter$FixedString: java.lang.String toString()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r67}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r67}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" [color=green3,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.util.DuplicateFormatFlagsException>}.<java.util.DuplicateFormatFlagsException: java.lang.String flags>}" -> "VarNode{<java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>/$r2}" [color=red,style=dashed];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r2}" -> "VarNode{<java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>/r0}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.String expandAffix(java.lang.String,java.lang.StringBuffer)>/$r2}" -> "VarNode{<java.text.DecimalFormat: void expandAffixes()>/$r13}" [color=blue,style=dashed];
  "VarNode{<java.text.DecimalFormat: java.lang.String expandAffix(java.lang.String,java.lang.StringBuffer)>/$r2}" -> "VarNode{<java.text.DecimalFormat: void expandAffixes()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.text.DecimalFormat: java.lang.String expandAffix(java.lang.String,java.lang.StringBuffer)>/$r2}" -> "VarNode{<java.text.DecimalFormat: void expandAffixes()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.text.DecimalFormat: java.lang.String expandAffix(java.lang.String,java.lang.StringBuffer)>/$r2}" -> "VarNode{<java.text.DecimalFormat: void expandAffixes()>/$r7}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[22@L684] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[22@L684] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r22}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[22@L684] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: java.lang.String access$000(java.io.FilePermission)>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[22@L684] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r30}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[22@L684] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r12}" [color=red,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r6}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r14}" [color=green3,style=dashed];
  "VarNode{<io.netty.buffer.UnpooledUnsafeDirectByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,int,int)>/$r7}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.jar.Attributes: java.lang.String putValue(java.lang.String,java.lang.String)>[0@L168] new java.util.jar.Attributes$Name}.<java.util.jar.Attributes$Name: java.lang.String name>}" -> "VarNode{<java.util.jar.Attributes$Name: java.lang.String toString()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r48}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r49}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r48}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.jar.JarFile$JarEntryIterator: java.util.jar.JarEntry next()>[3@L269] new java.util.jar.JarFile$JarFileEntry}.<java.util.zip.ZipEntry: java.lang.String name>}" -> "VarNode{<java.util.zip.ZipEntry: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r17}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r18}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r2}" -> "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r9}" -> "VarNode{<java.util.StringJoiner: java.lang.String toString()>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/$r15}" -> "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/$r14}" [color=green3,style=dashed];
  "VarNode{<java.lang.String: java.lang.String concat(java.lang.String)>/%this}" -> "VarNode{<java.net.URLClassLoader$1: java.lang.Class run()>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String concat(java.lang.String)>/%this}" -> "VarNode{<java.net.URLClassLoader: java.lang.Package definePackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String concat(java.lang.String)>/%this}" -> "VarNode{<java.net.URLClassLoader: boolean isSealed(java.lang.String,java.util.jar.Manifest)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String concat(java.lang.String)>/%this}" -> "VarNode{<java.lang.Package: java.lang.Package getSystemPackage(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String concat(java.lang.String)>/%this}" -> "VarNode{<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>/r14}" [color=blue,style=dashed];
  "VarNode{<java.net.URI: java.lang.String getPath()>/$r3}" -> "VarNode{<java.net.URI: java.lang.String decode(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r4}" -> "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27937}" [];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r4}" -> "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27939}" [];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r32}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/r12}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r32}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r35}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r32}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r32}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/$r7}" -> "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/$r8}" [color=green3,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String describeChar(char)>/$r4}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkUserInfo(java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String describeChar(char)>/$r4}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String describeChar(char)>/$r4}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String describeChar(char)>/$r4}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkAuth(java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String describeChar(char)>/$r4}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkExternalForm(java.net.URL)>/$r6}" [color=blue,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String describeChar(char)>/$r4}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHostString(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r0}" -> "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.util.TreeMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.util.TreeMap$Entry)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[3@L540] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.TreeMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.util.TreeMap$Entry)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[47@L577] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.TreeMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.util.TreeMap$Entry)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>[26@L2571] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeLanguage(java.lang.String)>/$r1}" -> "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r21}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[12@L668] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<io.netty.channel.ChannelException: void <init>(java.lang.String)>/message}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.JceSecurity: void setupJurisdictionPolicies()>/$r26}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r60}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r29}" -> "VarNode{<sun.security.pkcs.SignerInfo: void verifyTimestamp(sun.security.timestamp.TimestampToken)>/$r30}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r20}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r6}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.util.HashSet: boolean add(java.lang.Object)>/r1}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>/$r2}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>/$r2}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>/$r2}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise await()>/$r2}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.String toString()>/$r2}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: void checkDeadLock()>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.RFC822Name: java.lang.String toString()>/$r5}" -> "VarNode{<sun.security.x509.GeneralName: java.lang.String toString()>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r35}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r35}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.security.MessageDigest getDigest(java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r8}" -> "VarNode{<sun.reflect.AccessorGenerator: java.lang.String internalize(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r33}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r33}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/r51}" [color=green3,style=dashed];
  "VarNode{<java.util.Locale: java.util.Locale initDefault(java.util.Locale$Category)>/$r14}" -> "VarNode{<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r5}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/r50}" [];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r5}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r54}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName()>/$r1}" -> "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName()>/$r1}" -> "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.provider.TimeZoneNameProviderImpl: java.lang.String getGenericDisplayName(java.lang.String,int,java.util.Locale)>/r1}" -> "VarNode{<sun.util.locale.provider.TimeZoneNameProviderImpl: java.lang.String[] getDisplayNameArray(java.lang.String,java.util.Locale)>/r0}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>/r3}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>/r4}" [color=blue];
  "VarNode{<java.text.MessageFormat: int findKeyword(java.lang.String,java.lang.String[])>/r1}" -> "VarNode{<java.text.MessageFormat: int findKeyword(java.lang.String,java.lang.String[])>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.text.MessageFormat: int findKeyword(java.lang.String,java.lang.String[])>/r1}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "VarNode{<java.util.MissingFormatWidthException: java.lang.String getMessage()>/$r1}" -> "VarNode{<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty getInstance()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.util.MissingFormatWidthException: java.lang.String getMessage()>/$r1}" -> "VarNode{<sun.text.normalizer.NormalizerImpl: void <clinit>()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.util.MissingFormatWidthException: java.lang.String getMessage()>/$r1}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.util.MissingFormatWidthException: java.lang.String getMessage()>/$r1}" -> "VarNode{<sun.text.normalizer.UCharacter: void <clinit>()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.util.MissingFormatWidthException: java.lang.String getMessage()>/$r1}" -> "VarNode{<java.lang.Throwable: java.lang.String getLocalizedMessage()>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$c21}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r33}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r23}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.util.jar.JarVerifier: void beginEntry(java.util.jar.JarEntry,sun.security.util.ManifestEntryVerifier)>/$r17}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r21}" -> "VarNode{<java.io.FilePermission$1: java.lang.Object run()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r43}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.math.BigInteger: void toString(java.math.BigInteger,java.lang.StringBuilder,int,int)>/r5}" -> "VarNode{<java.math.BigInteger: void toString(java.math.BigInteger,java.lang.StringBuilder,int,int)>/r5}" [color=blue];
  "VarNode{<java.math.BigInteger: void toString(java.math.BigInteger,java.lang.StringBuilder,int,int)>/r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.math.BigInteger: void toString(java.math.BigInteger,java.lang.StringBuilder,int,int)>/r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r7}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void checkNumeric()>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r7}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void checkDateTime()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r7}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void checkCharacter()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r7}" -> "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r7}" -> "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r7}" -> "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r7}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void checkGeneral()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r7}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void checkText()>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<io.netty.buffer.WrappedByteBuf: java.lang.String toString()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<io.netty.handler.codec.DecoderResult: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<io.netty.util.concurrent.PromiseTask: java.lang.StringBuilder toStringBuilder()>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.text.DecimalFormat: java.lang.String toPattern(boolean)>/$r18}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<io.netty.buffer.WrappedByteBuf: java.lang.String toString()>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: java.lang.String toString()>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.util.Locale: java.lang.String toString()>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.util.Locale: java.lang.String toString()>/$r23}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r42}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r48}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r20}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r59}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r19}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r30}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r24}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r81}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r36}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r22}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<sun.misc.FloatingDecimal: int getHexDigit(java.lang.String,int)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r54}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r62}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r8}" [color=blue,style=dashed];
  "VarNode{<sun.security.pkcs.PKCS7: void parseNetscapeCertChain(sun.security.util.DerValue)>/$r21}" -> "VarNode{<sun.security.pkcs.ParsingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.KeyFactory: void <init>(java.lang.String)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/$r13}" -> "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>[89@L1890] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>[89@L1890] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r3}" [color=red,style=dashed];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<javax.crypto.JarVerifier: void verify()>/$r34}" -> "VarNode{<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<sun.security.pkcs.PKCS7: void parseSignedData(sun.security.util.DerValue)>/$r59}" -> "VarNode{<sun.security.pkcs.ParsingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.KeyFactory: void <init>(java.lang.String)>/$r10}" -> "VarNode{<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String internalize(java.lang.String)>/$r1}" -> "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r9}" [color=blue,style=dashed];
  "VarNode{<sun.reflect.AccessorGenerator: java.lang.String internalize(java.lang.String)>/$r1}" -> "VarNode{<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getDisplayNameImpl(java.lang.String,int,int,int,java.util.Locale,boolean)>/$r2}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getJavaTimeNames(java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getDisplayNameImpl(java.lang.String,int,int,int,java.util.Locale,boolean)>/$r2}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getCalendarNames(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r29}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r36}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>[93@L122] new sun.util.locale.UnicodeLocaleExtension}.<sun.util.locale.Extension: java.lang.String id>}" -> "VarNode{<sun.util.locale.Extension: java.lang.String getID()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.io.PrintWriter: void write(java.lang.String,int,int)>/r2}" -> "VarNode{<java.io.StringWriter: void write(java.lang.String,int,int)>/r1}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: java.lang.String toString()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/r25}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/r25}" -> "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/$r31}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/r25}" -> "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/$r27}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/r25}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "VarNode{<java.text.AttributedString$AttributedStringIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>/$r3}" -> "VarNode{<java.text.AttributedString: void <init>(java.text.AttributedCharacterIterator,int,int,java.text.AttributedCharacterIterator$Attribute[])>/$r10}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r59}" -> "InstanceFieldNode{NewObj{<java.util.Locale$Builder: void <init>()>[1@L2373] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String variant>}" [color=red];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r59}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: int checkVariants(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r59}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r59}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r34}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>/r4}" -> "VarNode{<java.util.ResourceBundle$CacheKey: void <init>(java.lang.String,java.util.Locale,java.lang.ClassLoader)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>/r4}" -> "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.util.List getCandidateLocales(java.lang.String,java.util.Locale)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>/r4}" -> "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/r3}" [color=blue];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/r12}" -> "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$r14}" [color=green3,style=dashed];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/r12}" -> "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/$c10}" [color=green3,style=dashed];
  "VarNode{<java.text.SimpleDateFormat: char[] compile(java.lang.String)>/r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: int escape(boolean,boolean,boolean)>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[11@L194] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" -> "VarNode{<sun.util.locale.StringTokenIterator: sun.util.locale.StringTokenIterator setStart(int)>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>[11@L194] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String text>}" -> "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String next()>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/$r12}" -> "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/$r13}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DisabledConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String)>[11@L183] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" -> "VarNode{<java.lang.ref.Reference: java.lang.Object get()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeScript(java.lang.String)>/$r1}" -> "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r20}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeScript(java.lang.String)>/$r1}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r39}" [color=blue,style=dashed];
  "VarNode{<java.util.BitSet: void <init>(int)>/$r5}" -> "VarNode{<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r53}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r53}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r51}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r11}" -> "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>[0@L311] new sun.util.locale.BaseLocale}.<sun.util.locale.BaseLocale: java.lang.String variant>}" [color=red];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[0@L37] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" -> "VarNode{<io.netty.handler.codec.http.HttpMethod: java.lang.String name()>/$r1}" [color=red,style=dashed];
  "VarNode{<io.netty.buffer.PooledByteBufAllocator: int validateAndCalculateChunkSize(int,int)>/$r11}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>[66@L1880] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>[66@L1880] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r3}" [color=red,style=dashed];
  "VarNode{<java.util.logging.LogManager$LoggerContext: java.util.logging.LogManager$LogNode getNode(java.lang.String)>/r11}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[7@L666] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.channel.AbstractChannel: io.netty.channel.ChannelPromise newPromise()>[0@L254] new io.netty.channel.DefaultChannelPromise}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/r7}" [color=red,style=dashed];
  "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URI$Parser: int parseHostname(int,int)>/$r2}" -> "VarNode{<java.net.URI: java.lang.String access$2402(java.net.URI,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.NullPointerException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Security: void initialize()>/$r33}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/%this}" [color=blue];
  "VarNode{<java.security.KeyStore$1: java.lang.String run()>/$r0}" -> "VarNode{<java.security.KeyStore$1: java.lang.Object run()>/$r1}" [color=blue,style=dashed];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r5}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/r15}" [];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r35}" -> "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r36}" [color=green3,style=dashed];
  "VarNode{<sun.security.pkcs.PKCS7: void parseNetscapeCertChain(sun.security.util.DerValue)>/$r18}" -> "VarNode{<sun.security.pkcs.ParsingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.calendar.ZoneInfoFile$1: java.lang.Object run()>/$r6}" -> "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r31}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[91@L831] new sun.security.provider.PolicyFile$SelfPermission}.<sun.security.provider.PolicyFile$SelfPermission: java.lang.String actions>}" -> "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[91@L831] new sun.security.provider.PolicyFile$SelfPermission}.<sun.security.provider.PolicyFile$SelfPermission: java.lang.String actions>}" -> "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String getSelfActions()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r50}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r9}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r106}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r106}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" [color=green3,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkExternalForm(java.net.URL)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[80@L708] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<io.netty.util.concurrent.PromiseTask: void run()>/$r2}" -> "VarNode{<io.netty.util.concurrent.PromiseTask: io.netty.util.concurrent.Promise setSuccessInternal(java.lang.Object)>/result}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r75}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509Key: java.lang.String toString()>/$r10}" -> "VarNode{<sun.security.x509.X509Key: java.lang.String toString()>/$r11}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r36}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable)>/r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable)>/r1}" -> "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable)>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable)>/r1}" -> "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable)>/r5}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.util.ResourceLeakDetector: void <init>(java.lang.String,int,long)>[4@L148] new io.netty.util.ResourceLeakDetector$DefaultResourceLeak}.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String creationRecord>}" -> "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r14}" [color=red,style=dashed];
  "VarNode{<java.net.URI: void <init>(java.lang.String)>/r2}" -> "VarNode{<java.net.URI$Parser: void <init>(java.net.URI,java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.security.Permission: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r27}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[103@L2377] newarray java.lang.String[i26]}}" -> "VarNode{<java.util.ArrayList: java.lang.Object remove(int)>/%native-arraycopy-temp338}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[103@L2377] newarray java.lang.String[i26]}}" -> "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp344}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[103@L2377] newarray java.lang.String[i26]}}" -> "VarNode{<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>/%native-arraycopy-temp383}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[103@L2377] newarray java.lang.String[i26]}}" -> "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp341}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[103@L2377] newarray java.lang.String[i26]}}" -> "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/$r6}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[103@L2377] newarray java.lang.String[i26]}}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/r89}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[103@L2377] newarray java.lang.String[i26]}}" -> "VarNode{<java.util.Arrays$ArrayList: java.lang.Object get(int)>/$r2}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[103@L2377] newarray java.lang.String[i26]}}" -> "VarNode{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>/%native-arraycopy-temp47}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[103@L2377] newarray java.lang.String[i26]}}" -> "VarNode{<java.util.ArrayList: java.lang.Object elementData(int)>/$r2}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[103@L2377] newarray java.lang.String[i26]}}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/r4}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[103@L2377] newarray java.lang.String[i26]}}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.MimeType: java.lang.String parseSuffix(java.lang.String)>/r9}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[103@L2377] newarray java.lang.String[i26]}}" -> "VarNode{<java.util.ArrayList$Itr: java.lang.Object next()>/$r4}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String getKeyStoreUrl()>/$r4}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String getKeyStoreUrl()>/$r5}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String getKeyStoreUrl()>/$r4}" -> "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void failMismatch(java.util.Formatter$Flags,char)>/$r1}" -> "VarNode{<java.util.FormatFlagsConversionMismatchException: void <init>(java.lang.String,char)>/r1}" [color=blue];
  "VarNode{<java.io.UTFDataFormatException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.ObjectIdentifier: java.lang.String toString()>/r11}" -> "VarNode{<sun.security.x509.AVAKeyword: java.lang.String getKeyword(sun.security.util.ObjectIdentifier,int,java.util.Map)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.ObjectIdentifier: java.lang.String toString()>/r11}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String getName()>/$r14}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.ObjectIdentifier: java.lang.String toString()>/r11}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.Throwable)>/$r4}" -> "InstanceFieldNode{MergedObj{<Merged java.io.IOException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.Throwable)>/$r4}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.RuntimeException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.Throwable)>/$r4}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.Error>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.Throwable)>/$r4}" -> "InstanceFieldNode{MergedObj{<Merged java.security.NoSuchAlgorithmException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.Throwable)>/$r4}" -> "InstanceFieldNode{MergedObj{<Merged java.nio.charset.CoderMalfunctionError>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.Throwable)>/$r4}" -> "InstanceFieldNode{MergedObj{<Merged java.lang.InternalError>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.Throwable)>/$r4}" -> "InstanceFieldNode{MergedObj{<Merged java.security.InvalidKeyException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.Throwable)>/$r4}" -> "InstanceFieldNode{MergedObj{<Merged java.security.InvalidAlgorithmParameterException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.Throwable)>/$r4}" -> "InstanceFieldNode{MergedObj{<Merged java.security.ProviderException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.Throwable)>/$r4}" -> "InstanceFieldNode{MergedObj{<Merged java.security.SignatureException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<java.lang.Throwable: void <init>(java.lang.Throwable)>/$r4}" -> "InstanceFieldNode{MergedObj{<Merged java.security.cert.CertificateParsingException>}.<java.lang.Throwable: java.lang.String detailMessage>}" [color=red];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r8}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r16}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-80}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>[12@L1093] new java.util.regex.Matcher}.<java.util.regex.Matcher: java.lang.CharSequence text>}" [color=red];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>[54@L182] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>[54@L182] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean isDirectory()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>[54@L182] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>[54@L182] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "VarNode{<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)>/r2}" -> "VarNode{<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>/r1}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)>/r2}" -> "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.math.BigInteger,java.util.Locale)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.io.BufferedReader: java.lang.String readLine()>/$r1}" -> "VarNode{<sun.misc.MetaIndex: void registerDirectory(java.io.File)>/$r14}" [color=blue,style=dashed];
  "VarNode{<java.io.BufferedReader: java.lang.String readLine()>/$r1}" -> "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.io.BufferedReader: java.lang.String readLine()>/$r1}" -> "VarNode{<sun.misc.JarIndex: void read(java.io.InputStream)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.io.BufferedReader: java.lang.String readLine()>/$r1}" -> "VarNode{<sun.misc.JarIndex: void read(java.io.InputStream)>/r10}" [color=blue,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/r0}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r3}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/r0}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r18}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/r0}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r23}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/r0}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r13}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/r0}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>/$r9}" -> "VarNode{<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r15}" -> "VarNode{<java.time.temporal.ValueRange: long checkValidValue(long,java.time.temporal.TemporalField)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r15}" -> "VarNode{<java.time.temporal.ValueRange: int checkValidIntValue(long,java.time.temporal.TemporalField)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r22}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/r90}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r26}" -> "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.nio.cs.StreamDecoder: int readBytes()>/$r18}" -> "VarNode{<java.lang.AssertionError: void <init>(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r8}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: java.lang.String typeName(java.lang.Class)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: java.lang.String typeName(java.lang.Class)>/$r4}" -> "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: java.lang.String typeName(java.lang.Class)>/$r2}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>/$r17}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean isUntrusted()>/$r19}" -> "VarNode{<sun.net.www.URLConnection: boolean isProxiedHost(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.io.FilePermission: void init(int)>/$r5}" -> "VarNode{<java.io.FilePermission: void init(int)>/$r6}" [];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r1}" -> "VarNode{<sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r3}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r0}" -> "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/$r5}" [color=green3,style=dashed];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>/$r15}" -> "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.math.BigDecimal: boolean commonNeedIncrement(int,int,int,boolean)>/$r11}" -> "VarNode{<java.math.BigDecimal: boolean commonNeedIncrement(int,int,int,boolean)>/$r12}" [color=green3,style=dashed];
  "VarNode{<java.net.URL: java.net.URI toURI()>/$r5}" -> "VarNode{<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r24}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r10}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r11}" [color=green3,style=dashed];
  "VarNode{<java.util.ArrayList: java.lang.Object get(int)>/$r1}" -> "VarNode{<java.util.Collections: void swap(java.util.List,int,int)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.ArrayList: java.lang.Object get(int)>/$r1}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.security.CodeSigner[] getSigners(sun.security.pkcs.SignerInfo[],sun.security.pkcs.PKCS7)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.util.ArrayList: java.lang.Object get(int)>/$r1}" -> "VarNode{<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>/$r2}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.logging.LogManager: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String,java.lang.Class)>[3@L554] new java.util.logging.Logger}.<java.util.logging.Logger: java.lang.String name>}" -> "VarNode{<java.util.logging.Logger: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.X509Key: java.security.PublicKey parse(sun.security.util.DerValue)>/$r16}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.TypeParameterMatcher: java.lang.Class find0(java.lang.Object,java.lang.Class,java.lang.String)>/$r26}" -> "VarNode{<java.lang.IllegalStateException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.buffer.WrappedByteBuf: java.lang.String toString()>/$r9}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<io.netty.buffer.WrappedByteBuf: java.lang.String toString()>/$r9}" -> "VarNode{<io.netty.buffer.WrappedByteBuf: java.lang.String toString()>/$r6}" [color=blue,style=dashed];
  "VarNode{<io.netty.buffer.WrappedByteBuf: java.lang.String toString()>/$r9}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>/$r38}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>/$r3}" -> "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/r25}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r17}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r18}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r3}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r2}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r10}" -> "VarNode{<java.util.ResourceBundle$Control$1: void <init>(java.util.ResourceBundle$Control,boolean,java.lang.ClassLoader,java.lang.String)>/r3}" [color=blue];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r18}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r19}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/r25}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: java.util.List getConstraints(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.security.KeyStoreException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: void checkDateTime()>/$r16}" -> "VarNode{<java.util.UnknownFormatConversionException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>[21@L470] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>[21@L470] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>[21@L470] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>[21@L470] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>[21@L470] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean isDirectory()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.util.regex.PatternSyntaxException>}.<java.util.regex.PatternSyntaxException: java.lang.String desc>}" -> "VarNode{<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>[1@L1569] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String script>}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r2}" [color=red,style=dashed];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r8}" -> "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/r5}" [];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r62}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r32}" -> "VarNode{<sun.util.locale.Extension: void <init>(char,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String getStorePassURL()>/$r4}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String getStorePassURL()>/$r5}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String getStorePassURL()>/$r4}" -> "VarNode{<java.lang.String: java.lang.String replace(char,char)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>[39@L1564] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r8}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>[39@L1564] new java.lang.RuntimePermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r18}" [color=red,style=dashed];
  "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r13}" -> "VarNode{<sun.util.resources.LocaleData$LocaleDataResourceBundleControl: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/r22}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.stream.ChunkedNioFile: void <init>(java.nio.channels.FileChannel,long,long,int)>/$r13}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.CryptoPolicyParser: java.lang.String match(java.lang.String)>/$r30}" -> "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String,java.lang.String,sun.text.normalizer.SymbolTable)>/$r6}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r18}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r17}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r18}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Object getObject(java.util.spi.LocaleServiceProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r3}" -> "VarNode{<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>/r0}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.Long: long parseLong(java.lang.String,int)>/$r12}" -> "VarNode{<java.lang.NumberFormatException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.rsa.RSAUtil$KeyType: sun.security.rsa.RSAUtil$KeyType lookup(java.lang.String)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>[67@L1256] new sun.security.util.ObjectIdentifier}.<sun.security.util.ObjectIdentifier: java.lang.String stringForm>}" -> "VarNode{<sun.security.util.ObjectIdentifier: java.lang.String toString()>/r11}" [color=red,style=dashed];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: void callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)>/$r11}" -> "VarNode{<io.netty.channel.ChannelPipelineException: void <init>(java.lang.String,java.lang.Throwable)>/message}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.Object,java.util.Locale)>/r1}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>/r0}" [color=blue];
  "VarNode{<java.net.URI: java.net.URI create(java.lang.String)>/r1}" -> "VarNode{<java.net.URI: void <init>(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.net.URI: java.net.URI create(java.lang.String)>/r1}" -> "VarNode{<java.net.URI: java.net.URI create(java.lang.String)>/$r0}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/r13}" -> "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/r13}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/r13}" -> "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r11}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/r13}" -> "VarNode{<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/r13}" -> "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r3}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/r13}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/r13}" -> "VarNode{<java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r1}" -> "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/r16}" [];
  "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r1}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged sun.security.util.PropertyExpander$ExpandException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>/r2}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r9}" -> "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>[40@L1229] newarray java.lang.String[%intconst1]}}" [color=red];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1779] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object value>}" -> "VarNode{<java.util.HashMap$Node: java.lang.Object getValue()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1779] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object value>}" -> "VarNode{<java.util.HashMap: java.lang.Object get(java.lang.Object)>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1779] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object value>}" -> "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1779] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object value>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1779] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object value>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r3}" [color=red,style=dashed];
  "VarNode{<java.lang.Class: java.lang.String getCanonicalName()>/$r15}" -> "VarNode{<sun.util.locale.provider.LocaleServiceProviderPool: void config(java.lang.Class,java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.Class: java.lang.String getCanonicalName()>/$r15}" -> "VarNode{<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.lang.Class: java.lang.String getCanonicalName()>/$r15}" -> "VarNode{<sun.util.locale.provider.SPILocaleProviderAdapter$1: java.util.spi.LocaleServiceProvider run()>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.util.Vector: void insertElementAt(java.lang.Object,int)>/$r10}" -> "VarNode{<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>[0@L1054] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String normalizedPattern>}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>[0@L1054] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String normalizedPattern>}" -> "VarNode{<java.util.regex.Pattern: void normalize()>/$r13}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>[0@L1054] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String normalizedPattern>}" -> "VarNode{<java.util.regex.Pattern: void normalize()>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>[0@L1054] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String normalizedPattern>}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r11}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>[0@L1054] new java.util.regex.Pattern}.<java.util.regex.Pattern: java.lang.String normalizedPattern>}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.PatternSyntaxException error(java.lang.String)>/$r3}" [color=red,style=dashed];
  "VarNode{<java.net.URI: void defineString()>/$r14}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI: void defineString()>/$r14}" -> "VarNode{<java.net.URI: void defineString()>/$r22}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r17}" -> "VarNode{<sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>/$r18}" [];
  "VarNode{<sun.util.calendar.BaseCalendar: void getCalendarDateFromFixedDate(sun.util.calendar.CalendarDate,long)>/$r8}" -> "VarNode{<java.lang.AssertionError: void <init>(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/$r8}" -> "VarNode{<java.security.NoSuchAlgorithmException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27855}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1774] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27855}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1789] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27855}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>[0@L1784] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/%taint-temp-27855}" -> "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1779] new java.util.HashMap$Node}.<java.util.HashMap$Node: java.lang.Object value>}" [color=red];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r69}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r49}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r49}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r52}" [color=green3,style=dashed];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r7}" -> "VarNode{<java.net.MalformedURLException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.pkcs.PKCS9Attribute: void throwSingleValuedException()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.provider.BreakDictionary: void readDictionaryFile(java.lang.String)>/$r24}" -> "VarNode{<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/r61}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI: java.lang.String getFragment()>/$r3}" -> "VarNode{<java.net.URI: java.lang.String decode(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String,java.lang.String,sun.text.normalizer.SymbolTable)>/$r5}" -> "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String,java.lang.String,sun.text.normalizer.SymbolTable)>/$r6}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/$r27}" -> "VarNode{<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline addLast(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)>/name}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: void checkDuplicateName(java.lang.String)>/name}" [color=blue];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline addLast(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)>/name}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext newContext(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)>/name}" [color=blue];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String)>/r0}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/r0}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[91@L831] new sun.security.provider.PolicyFile$SelfPermission}.<java.security.Permission: java.lang.String name>}" -> "VarNode{<java.security.Permission: java.lang.String getName()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.lang.AssertionError: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.Error: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r51}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/r2}" [color=green3,style=dashed];
  "VarNode{<java.security.BasicPermission: void <init>(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.security.Permission: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.BasicPermission: void <init>(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.security.BasicPermission: void init(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r31}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>/r1}" -> "VarNode{<java.net.URLClassLoader: java.lang.Class findClass(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>/r1}" -> "VarNode{<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r4}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/r5}" [];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-276}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>[12@L1093] new java.util.regex.Matcher}.<java.util.regex.Matcher: java.lang.CharSequence text>}" [color=red];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r26}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r27}" [color=green3,style=dashed];
  "VarNode{<java.util.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])>/%native-arraycopy-temp479}" -> "ArrayIndexNode{NewObj{<java.util.ArrayDeque: java.lang.Object[] toArray()>[1@L787] newarray java.lang.Object[$i0]}}" [color=red];
  "VarNode{<sun.security.util.DerInputBuffer: java.util.Date getTime(int,boolean)>/$r74}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r6}" -> "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r9}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.Security: void initialize()>[103@L142] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.Security: void initialize()>[103@L142] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.Security: void initialize()>[103@L142] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.Security: void initialize()>[103@L142] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: void callHandlerAdded0(io.netty.channel.AbstractChannelHandlerContext)>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r3}" -> "VarNode{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r4}" [color=blue];
  "VarNode{<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r3}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r2}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>/$r36}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.net.URLClassLoader$1: java.lang.Class run()>/$r3}" -> "VarNode{<sun.misc.URLClassPath: sun.misc.Resource getResource(java.lang.String,boolean)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: int index(java.lang.String)>/r0}" -> "VarNode{<java.util.Formatter$FormatSpecifier: int index(java.lang.String)>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: int index(java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String getUnicodeLocaleType(java.lang.String)>/$r7}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r35}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r35}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r52}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.Debug: java.lang.String marshal(java.lang.String)>/$r23}" -> "VarNode{<sun.security.util.Debug: java.lang.String marshal(java.lang.String)>/$r24}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.Debug: java.lang.String marshal(java.lang.String)>/$r23}" -> "VarNode{<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r55}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r58}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r58}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r57}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r25}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r13}" -> "VarNode{<sun.security.util.JarConstraintsParameters: void setExtendedExceptionMsg(java.lang.String,java.lang.String)>/$r2}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/r5}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/$r9}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: java.lang.String getWeakAlgorithms(java.lang.String)>/r5}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r53}" -> "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r54}" [color=green3,style=dashed];
  "VarNode{<java.text.DecimalFormat: java.lang.String toPattern(boolean)>/$r39}" -> "VarNode{<java.text.DecimalFormat: void appendAffix(java.lang.StringBuffer,java.lang.String,java.lang.String,boolean)>/r8}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[19@L512] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[19@L512] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[19@L512] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[19@L512] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String canonPath(java.lang.String)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r22}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r23}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r10}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r9}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getDisplayName(java.lang.String,int,int,int,java.util.Locale)>/r1}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.lang.String getDisplayNameImpl(java.lang.String,int,int,int,java.util.Locale,boolean)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r9}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r7}" -> "VarNode{<java.util.AbstractCollection: java.lang.String toString()>/$r2}" [color=green3,style=dashed];
  "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>/%this}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: java.lang.String removePrivateuseVariant(java.lang.String)>[0@L542] new sun.util.locale.StringTokenIterator}.<sun.util.locale.StringTokenIterator: java.lang.String token>}" -> "VarNode{<sun.util.locale.StringTokenIterator: java.lang.String current()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.text.AttributeEntry: void <init>(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>/r2}" -> "InstanceFieldNode{NewObj{<java.text.AttributedString$AttributeMap: java.util.Set entrySet()>[34@L1082] new java.text.AttributeEntry}.<java.text.AttributeEntry: java.lang.Object value>}" [color=red];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[73@L240] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" -> "VarNode{<java.lang.ref.Reference: java.lang.Object get()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged io.netty.util.IllegalReferenceCountException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r95}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r96}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String toString()>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r36}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-98}" [];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r36}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r36}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-96}" [];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r36}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.util.RegisteredDomain: java.util.Optional from(java.lang.String)>/r0}" -> "VarNode{<sun.net.RegisteredDomain: sun.security.util.RegisteredDomain registeredDomain(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>/$r18}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/r15}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String printPD(java.security.ProtectionDomain)>/$r23}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: void record()>/$r2}" -> "VarNode{<java.util.ArrayDeque: boolean add(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>/$r15}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.Object,java.util.Locale)>/r1}" [color=blue];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r4}" -> "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/%taint-temp-23376}" [];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r27}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/r1}" [color=blue];
  "VarNode{<java.io.File: java.net.URI toURI()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r4}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r25}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r22}" -> "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r23}" [color=green3,style=dashed];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r40}" -> "VarNode{<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r6}" -> "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r12}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r11}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/r37}" [];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r11}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r16}" [color=green3,style=dashed];
  "VarNode{<java.lang.Runtime: void loadLibrary0(java.lang.Class,java.lang.String)>/$r7}" -> "VarNode{<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String,java.lang.String,sun.text.normalizer.SymbolTable)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv4(java.lang.String,byte[])>/$r16}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>/$r37}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void process(java.util.Hashtable,java.util.List,java.lang.String)>/r4}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.DefaultMessageSizeEstimator: void <init>(int)>/$r7}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AVA: sun.security.util.DerValue parseString(java.io.Reader,int,int,java.lang.StringBuilder)>/$r38}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.io.DataInputStream: java.lang.String readUTF(java.io.DataInput)>/$r18}" -> "VarNode{<java.io.UTFDataFormatException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r18}" -> "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r19}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>/r1}" -> "VarNode{<java.util.regex.Pattern: void <init>(java.lang.String,int)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC1779Name(java.util.Map)>/$r4}" -> "InstanceFieldNode{NewObj{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>[13@L181] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String rfc1779Dn>}" [color=red];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(int)>/%this}" -> "VarNode{<java.lang.StringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[0@L427] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String signedBy>}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r10}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[0@L427] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String signedBy>}" -> "VarNode{<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[0@L427] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String signedBy>}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r41}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[0@L427] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String signedBy>}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r20}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[0@L427] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String signedBy>}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource getCodeSource(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r16}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[0@L427] new sun.security.provider.PolicyParser$GrantEntry}.<sun.security.provider.PolicyParser$GrantEntry: java.lang.String signedBy>}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r42}" [color=red,style=dashed];
  "VarNode{<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger,boolean)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r56}" -> "VarNode{<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>/r2}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency$2: java.io.File run()>[15@L407] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency$2: java.io.File run()>[15@L407] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency$2: java.io.File run()>[15@L407] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.ExtensionDependency$2: java.io.File run()>[15@L407] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r37}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r63}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r64}" [color=green3,style=dashed];
  "VarNode{<sun.text.normalizer.ReplaceableUCharacterIterator: void <init>(java.lang.String)>/r1}" -> "VarNode{<sun.text.normalizer.ReplaceableString: void <init>(java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.net.URI$Parser: int scanByte(int,int)>/$r1}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>/r1}" -> "VarNode{<java.lang.ref.SoftReference: void <init>(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.cert.Certificate[] getCertificates(java.security.KeyStore,java.lang.String,sun.security.provider.PolicyFile$PolicyInfo)>/r1}" -> "VarNode{<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r17}" -> "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/$r16}" [color=green3,style=dashed];
  "VarNode{<java.security.Provider: java.lang.String getProperty(java.lang.String)>/$r2}" -> "VarNode{<sun.security.x509.AlgorithmId: java.util.HashMap computeOidTable()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r7}" -> "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: void init(java.lang.String,int)>/$r7}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase()>/%this}" [color=blue];
  "VarNode{<java.util.TreeMap: void deleteEntry(java.util.TreeMap$Entry)>/$r19}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[3@L540] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.TreeMap: void deleteEntry(java.util.TreeMap$Entry)>/$r19}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>[26@L2571] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.TreeMap: void deleteEntry(java.util.TreeMap$Entry)>/$r19}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[47@L577] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" [color=red];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>[15@L1110] new java.net.URL}.<java.net.URL: java.lang.String host>}" -> "VarNode{<java.net.URL: java.lang.String getHost()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>[15@L1110] new java.net.URL}.<java.net.URL: java.lang.String host>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r24}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String getSelfActions()>/$r1}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r21}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String getSelfActions()>/$r1}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r90}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void <init>(java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>[124@L396] new sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint}.<sun.security.util.DisabledAlgorithmConstraints$Constraint: java.lang.String algorithm>}" [color=red];
  "InstanceFieldNode{NewObj{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>[0@L692] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String suffix>}" -> "VarNode{<sun.security.x509.X509AttributeName: java.lang.String getSuffix()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r28}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>/%this}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>/r2}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r9}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r8}" [color=green3,style=dashed];
  "VarNode{<sun.security.pkcs.SignerInfo: java.util.Set verifyAlgorithms(sun.security.pkcs.SignerInfo[],sun.security.util.JarConstraintsParameters,java.lang.String)>/$r14}" -> "VarNode{<java.util.HashSet: boolean add(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/r8}" -> "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.net.Inet6Address$Inet6AddressHolder: java.lang.String getHostAddress()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r2}" -> "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r2}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase()>/%this}" [color=blue];
  "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/%this}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r7}" -> "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r16}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r7}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[128@L530] new sun.security.provider.PolicyParser$PrincipalEntry}.<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String principalName>}" [color=red];
  "InstanceFieldNode{NewObj{<sun.security.provider.SunEntries: java.io.File getDeviceFile(java.net.URL)>[18@L377] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>/$r21}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.Object[] getDecimalFormatSymbolsData()>/$r22}" [color=green3,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>/%this}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>/%this}" -> "VarNode{<java.security.Provider: void addEngine(java.lang.String,boolean,java.lang.String)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>/%this}" -> "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>/%this}" -> "VarNode{<io.netty.util.internal.PlatformDependent: int bitMode0()>/$r7}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>/%this}" -> "VarNode{<io.netty.buffer.ByteBufUtil: void <clinit>()>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>/%this}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>/$r15}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>/%this}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r17}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>/%this}" -> "VarNode{<java.lang.String: java.lang.String toLowerCase()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>/%this}" -> "VarNode{<sun.util.locale.provider.CurrencyNameProviderImpl: java.lang.String getDisplayName(java.lang.String,java.util.Locale)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r56}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.text.DateFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>/$r9}" -> "VarNode{<java.text.Format: java.lang.String format(java.lang.Object)>/$r4}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URI: java.net.URL toURL()>[7@L1089] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URI: java.net.URL toURL()>[7@L1089] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URI: java.net.URL toURL()>[7@L1089] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: java.lang.String getProtocol()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URI: java.net.URL toURL()>[7@L1089] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" [color=red,style=dashed];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.String substring(int,int)>/$r1}" -> "VarNode{<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.String substring(int,int)>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.String substring(int,int)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r22}" -> "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/$r5}" -> "VarNode{<java.util.logging.LogManager$SystemLoggerContext: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/$r5}" -> "VarNode{<java.util.logging.LogManager$LoggerContext: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/$r5}" -> "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/$r5}" -> "VarNode{<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>/$r11}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r30}" -> "VarNode{<java.util.ArrayList: boolean add(java.lang.Object)>/r2}" [color=blue];
  "VarNode{<java.util.logging.LogManager: void readPrimordialConfiguration()>/$r9}" -> "VarNode{<java.lang.AssertionError: void <init>(java.lang.Object)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>[21@L272] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: java.lang.String getProtocol()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>[21@L272] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r21}" [color=red,style=dashed];
  "VarNode{<java.util.regex.PatternSyntaxException: void <init>(java.lang.String,java.lang.String,int)>/r2}" -> "InstanceFieldNode{MergedObj{<Merged java.util.regex.PatternSyntaxException>}.<java.util.regex.PatternSyntaxException: java.lang.String pattern>}" [color=red];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r12}" -> "InstanceFieldNode{NewObj{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>[74@L132] new sun.security.x509.IPAddressName}.<sun.security.x509.IPAddressName: java.lang.String name>}" [color=red];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r19}" -> "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/r30}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.jca.ProviderList: sun.security.jca.ProviderList getJarList(java.lang.String[])>[6@L206] new sun.security.jca.ProviderConfig}.<sun.security.jca.ProviderConfig: java.lang.String argument>}" -> "VarNode{<sun.security.jca.ProviderConfig: java.lang.String toString()>/$r6}" [color=red,style=dashed];
  "VarNode{<java.net.Parts: java.lang.String getPath()>/$r1}" -> "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r42}" [color=blue,style=dashed];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r6}" -> "VarNode{<java.net.URI: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r6}" -> "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r6}" -> "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r6}" -> "VarNode{<java.net.URI: void appendFragment(java.lang.StringBuffer,java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r6}" -> "VarNode{<java.net.URI: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r6}" -> "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r6}" -> "VarNode{<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.net.URI: java.lang.String quote(java.lang.String,long,long)>/$r6}" -> "VarNode{<java.net.URI: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>/$r9}" [color=blue,style=dashed];
  "VarNode{<java.io.PrintStream: void println(java.lang.Object)>/r0}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/r0}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r14}" -> "VarNode{<sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r14}" -> "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r14}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/$r17}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r11}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r9}" [color=green3,style=dashed];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String expand(java.lang.String)>/r0}" -> "VarNode{<sun.security.jca.ProviderConfig: void <init>(java.lang.String,java.lang.String)>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.security.jca.ProviderConfig: java.lang.String expand(java.lang.String)>/r0}" -> "VarNode{<sun.security.jca.ProviderConfig$3: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.CodeSigner: java.lang.String toString()>/$r10}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[84@L155] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[84@L155] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>[84@L155] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: java.lang.String getProtocol()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>/r8}" -> "VarNode{<java.util.TreeMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.util.TreeMap$Entry)>/r1}" [color=blue];
  "VarNode{<java.util.Currency: boolean isPastCutoverDate(java.lang.String)>/r3}" -> "VarNode{<java.util.Currency: boolean isPastCutoverDate(java.lang.String)>/$r4}" [color=green3,style=dashed];
  "VarNode{<java.util.Currency: boolean isPastCutoverDate(java.lang.String)>/r3}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.net.URI: java.net.URI create(java.lang.String)>[0@L850] new java.net.URI}.<java.net.URI: java.lang.String query>}" -> "VarNode{<java.net.URI: java.lang.String getQuery()>/$r3}" [color=red,style=dashed];
  "VarNode{<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>/$r3}" -> "VarNode{<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>/$r1}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r12}" -> "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r13}" [color=green3,style=dashed];
  "VarNode{<java.security.SecureClassLoader: java.security.ProtectionDomain getProtectionDomain(java.security.CodeSource)>/$r13}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>/r0}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.x509.CertificateExtensions: void parseExtension(sun.security.x509.Extension)>[50@L124] new sun.security.x509.UnparseableExtension}.<sun.security.x509.UnparseableExtension: java.lang.String name>}" -> "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r5}" [color=red,style=dashed];
  "VarNode{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>/r9}" -> "VarNode{<java.util.TreeMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.util.TreeMap$Entry)>/r2}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r27}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.io.FilePermission$1: java.lang.String run()>/$r6}" -> "VarNode{<java.io.FilePermission$1: java.lang.Object run()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean)>/r2}" -> "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>/r1}" [color=blue];
  "VarNode{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean)>/r2}" -> "VarNode{<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.resources.LocaleData: java.util.ResourceBundle getBreakIteratorInfo(java.util.Locale)>/$r6}" -> "VarNode{<sun.util.resources.LocaleData: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>/r1}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.lang.Class findClass(java.lang.String)>/r2}" -> "VarNode{<java.net.URLClassLoader$1: void <init>(java.net.URLClassLoader,java.lang.String)>/r2}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.lang.Class findClass(java.lang.String)>/r2}" -> "VarNode{<java.lang.ClassNotFoundException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>/$r5}" -> "InstanceFieldNode{NewObj{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>[21@L454] new java.util.StringJoiner}.<java.util.StringJoiner: java.lang.String delimiter>}" [color=red];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$4: java.lang.Void run()>[56@L692] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r54}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r54}" -> "VarNode{<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List,java.lang.String)>/$r53}" [color=green3,style=dashed];
  "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: void <init>()>/$r13}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: io.netty.handler.codec.http.HttpResponseStatus valueOf(int)>/$r61}" -> "VarNode{<io.netty.handler.codec.http.HttpResponseStatus: void <init>(int,java.lang.String)>/reasonPhrase}" [color=blue];
  "VarNode{<sun.security.util.AlgorithmDecomposer: java.util.Set decomposeImpl(java.lang.String)>/r4}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Signature: void initVerify(java.security.PublicKey,java.security.spec.AlgorithmParameterSpec)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r6}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r6}" -> "VarNode{<java.io.File: void <init>(java.io.File,java.lang.String)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r6}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.io.File)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r6}" -> "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/$r6}" -> "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r10}" [color=blue,style=dashed];
  "ArrayIndexNode{NewObj{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>[38@L1527] newarray java.lang.String[i21]}}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r1}" [color=red,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String canonicalize(java.lang.String)>/r26}" -> "VarNode{<java.io.File: java.lang.String getCanonicalPath()>/$r4}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[60@L234] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" -> "VarNode{<java.lang.ref.Reference: java.lang.Object get()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r24}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.misc.ExtensionDependency: java.lang.Boolean addNewExtensionsToClassLoader(sun.misc.Launcher$ExtClassLoader)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r34}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r35}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r38}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r2}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String toString()>/$r0}" [color=green3,style=dashed];
  "VarNode{<java.util.Properties: java.lang.String getProperty(java.lang.String)>/$r7}" -> "VarNode{<java.security.Provider: java.lang.String getProperty(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.io.FileInputStream: void <init>(java.io.File)>/$r9}" -> "VarNode{<java.lang.SecurityManager: void checkRead(java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: void setEntry(java.lang.String,java.util.jar.JarEntry)>/$r28}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>/$r15}" -> "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/r7}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/$r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/$r0}" -> "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/$r1}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[0@L1368] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>[0@L1368] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "VarNode{<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>/r6}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName(boolean)>/$r7}" -> "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.AlgorithmId: java.lang.String makeSigAlg(java.lang.String,java.lang.String)>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r82}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.logging.Logger: void setupResourceInfo(java.lang.String,java.lang.Class)>/$r13}" -> "VarNode{<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>[25@L266] new java.security.Signature$Delegate}.<java.security.Signature: java.lang.String algorithm>}" -> "VarNode{<java.security.Signature: java.lang.String getAlgorithm()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>[25@L266] new java.security.Signature$Delegate}.<java.security.Signature: java.lang.String algorithm>}" -> "VarNode{<java.security.Signature: void initVerify(java.security.PublicKey,java.security.spec.AlgorithmParameterSpec)>/$r7}" [color=red,style=dashed];
  "VarNode{<java.lang.Long: long parseLong(java.lang.String)>/r0}" -> "VarNode{<java.lang.Long: long parseLong(java.lang.String,int)>/r0}" [color=blue];
  "VarNode{<java.net.URI: java.lang.String access$2302(java.net.URI,java.lang.String)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>[94@L557] new java.net.URI}.<java.net.URI: java.lang.String userInfo>}" [color=red];
  "VarNode{<java.lang.SecurityManager: void checkPropertyAccess(java.lang.String)>/r2}" -> "VarNode{<java.util.PropertyPermission: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>/$r13}" -> "VarNode{<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r7}" -> "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r8}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r7}" -> "VarNode{<java.lang.String: java.lang.String trim()>/%this}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.String resolveName(java.lang.String)>/r8}" -> "VarNode{<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.lang.Class: java.lang.String resolveName(java.lang.String)>/r8}" -> "VarNode{<java.lang.Class: java.lang.String resolveName(java.lang.String)>/r8}" [color=green3,style=dashed];
  "VarNode{<java.lang.Class: java.lang.String resolveName(java.lang.String)>/r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.String resolveName(java.lang.String)>/r8}" -> "VarNode{<java.lang.Class: java.lang.String resolveName(java.lang.String)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.lang.Class: java.lang.String resolveName(java.lang.String)>/r8}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r5}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.InetAddress: java.lang.String getHostFromNameService(java.net.InetAddress,boolean)>/$r7}" -> "VarNode{<java.net.InetAddress: java.lang.String getHostName(boolean)>/$r6}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r67}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.util.Currency: java.util.Currency getInstance(java.util.Locale)>/$r16}" -> "VarNode{<java.util.Currency: java.util.Currency getInstance(java.lang.String,int,int)>/r0}" [color=blue];
  "VarNode{<java.text.MessageFormat: void applyPattern(java.lang.String)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r10}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r4}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r30}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r30}" -> "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r28}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/$r25}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URLClassLoader: void definePackageInternal(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r10}" -> "VarNode{<java.net.URLClassLoader: void definePackageInternal(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r11}" [color=green3,style=dashed];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r25}" -> "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/r32}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r15}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC2253DN(java.util.Map)>/$r4}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253Name(java.util.Map)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X500Name: java.lang.String generateRFC2253DN(java.util.Map)>/$r4}" -> "VarNode{<sun.security.x509.X500Name: java.lang.String getRFC2253Name(java.util.Map)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r20}" -> "VarNode{<java.lang.StringBuilder: void <init>(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r20}" -> "VarNode{<java.util.Locale: java.lang.String toString()>/$r26}" [color=green3,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.logging.Log4JLogger: void debug(java.lang.String,java.lang.Object)>/arg}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object)>/arg}" [color=blue];
  "VarNode{<java.io.StringWriter: void write(java.lang.String,int,int)>/$r2}" -> "InstanceFieldNode{NewObj{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>[5@L524] new java.io.StringWriter}.<java.io.StringWriter: java.lang.StringBuffer buf>}" [color=red];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getRegion()>/$r1}" -> "VarNode{<java.util.Locale: java.lang.String toString()>/$r25}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getRegion()>/$r1}" -> "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getRegion()>/$r1}" -> "VarNode{<java.util.Locale: java.lang.String getCountry()>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getRegion()>/$r1}" -> "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale: java.lang.String getRegion()>/$r1}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r3}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r25}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.security.Security: java.io.File securityPropFile(java.lang.String)>[1@L215] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean exists()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.Security: java.io.File securityPropFile(java.lang.String)>[1@L215] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.Security: java.io.File securityPropFile(java.lang.String)>[1@L215] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.Security: java.io.File securityPropFile(java.lang.String)>[1@L215] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "VarNode{<java.security.CodeSigner: java.lang.String toString()>/$r0}" -> "VarNode{<java.security.CodeSigner: java.lang.String toString()>/$r10}" [color=green3,style=dashed];
  "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.OtherName: void <init>(sun.security.util.DerValue)>/$r15}" -> "InstanceFieldNode{NewObj{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>[16@L95] new sun.security.x509.OtherName}.<sun.security.x509.OtherName: java.lang.String name>}" [color=red];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r17}" -> "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r5}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CRLImpl: void parse(sun.security.util.DerValue)>/$r36}" -> "VarNode{<java.security.cert.CRLException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r4}" -> "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/$r11}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r18}" -> "VarNode{<sun.security.provider.PolicyFile: boolean replacePrincipals(java.util.List,java.security.KeyStore)>/$r19}" [color=green3,style=dashed];
  "VarNode{<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>/$r10}" -> "VarNode{<java.lang.NoSuchMethodException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>/$r5}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>/$r6}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r17}" -> "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>/$r6}" -> "VarNode{<java.text.Format: java.lang.String format(java.lang.Object)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r5}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-146}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>[12@L1093] new java.util.regex.Matcher}.<java.util.regex.Matcher: java.lang.CharSequence text>}" [color=red];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r31}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderName(java.lang.CharSequence)>/$r10}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.FileURLMapper: java.lang.String getPath()>/$r8}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>[3@L937] new sun.misc.FileURLMapper}.<sun.misc.FileURLMapper: java.lang.String path>}" [color=red];
  "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r3}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toResourceName0(java.lang.String,java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r3}" -> "VarNode{<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>/$r3}" -> "VarNode{<java.util.ResourceBundle$RBClassLoader: java.lang.Class loadClass(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r53}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r53}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r52}" [color=green3,style=dashed];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r8}" -> "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/r7}" -> "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/$r6}" [color=green3,style=dashed];
  "VarNode{<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r20}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r21}" [color=green3,style=dashed];
  "VarNode{<java.security.Policy$1: java.lang.Object run()>/$r1}" -> "VarNode{<java.security.Policy: java.security.Policy getPolicyNoCheck()>/$r7}" [color=blue,style=dashed];
  "VarNode{<sun.text.normalizer.RuleCharacterIterator: java.lang.String lookahead()>/$r4}" -> "VarNode{<sun.text.normalizer.UnicodeSet: void applyPropertyPattern(sun.text.normalizer.RuleCharacterIterator,java.lang.StringBuffer,sun.text.normalizer.SymbolTable)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.net.InetAddress: java.lang.String getHostName(boolean)>/$r4}" -> "VarNode{<java.net.SocketPermission: void getCanonName()>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.net.InetAddress: java.lang.String getHostName(boolean)>/$r4}" -> "VarNode{<java.net.SocketPermission: void getCanonName()>/$r7}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>[0@L702] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r7}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>[0@L702] new java.net.URL}.<java.net.URL: java.lang.String protocol>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r12}" [color=red,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/$r4}" -> "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/r3}" [color=green3,style=dashed];
  "VarNode{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r2}" -> "VarNode{<java.util.TreeMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.util.TreeMap$Entry)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>/r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.calendar.ZoneInfoFile$1: java.lang.Object run()>[13@L255] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>/$r13}" -> "VarNode{<java.text.Format: java.lang.String format(java.lang.Object)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint: void <init>(java.lang.String,int,int,int)>/r1}" -> "InstanceFieldNode{NewObj{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>[159@L413] new sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint}.<sun.security.util.DisabledAlgorithmConstraints$Constraint: java.lang.String algorithm>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r15}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String resolve(java.lang.String,java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r25}" -> "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r26}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<io.netty.channel.AbstractChannelHandlerContext$WriteTask$1: io.netty.channel.AbstractChannelHandlerContext$WriteTask newObject(io.netty.util.Recycler$Handle)>[0@L913] new io.netty.channel.AbstractChannelHandlerContext$WriteTask}.<io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask: java.lang.Object msg>}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask: void run()>/$r7}" [color=red,style=dashed];
  "VarNode{<sun.misc.URLClassPath$FileLoader: void <init>(java.net.URL)>/$r6}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509Key: java.security.PublicKey buildX509Key(sun.security.x509.AlgorithmId,sun.security.util.BitArray)>/$r5}" -> "VarNode{<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>/$r23}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1789] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object value>}" -> "VarNode{<java.util.HashMap$Node: java.lang.Object getValue()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1789] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object value>}" -> "VarNode{<java.util.HashMap$Node: java.lang.String toString()>/$r5}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1789] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object value>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1789] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object value>}" -> "VarNode{<java.util.HashMap: java.lang.Object get(java.lang.Object)>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>[0@L1789] new java.util.HashMap$TreeNode}.<java.util.HashMap$Node: java.lang.Object value>}" -> "VarNode{<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>/$r3}" [color=red,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: void checkText()>/$r17}" -> "VarNode{<java.util.IllegalFormatFlagsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>[145@L447] new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString}.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String str>}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String value()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.text.ChoiceFormat: void applyPattern(java.lang.String)>/$r18}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Object)>/r4}" -> "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders: void add0(int,int,java.lang.CharSequence,java.lang.CharSequence)>/value}" [color=blue];
  "InstanceFieldNode{NewObj{<java.lang.Package$1: java.lang.Package run()>[6@L577] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean isFile()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.Package$1: java.lang.Package run()>[6@L577] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: boolean isDirectory()>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.Package$1: java.lang.Package run()>[6@L577] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.Package$1: java.lang.Package run()>[6@L577] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.Package$1: java.lang.Package run()>[6@L577] new java.io.File}.<java.io.File: java.lang.String path>}" -> "VarNode{<java.io.File: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.security.KeyStore: void <init>(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.Inet6Address: void initstr(java.lang.String,byte[],java.lang.String)>/$r13}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: void <init>(java.lang.String,java.util.Map)>/r1}" -> "VarNode{<sun.security.x509.X500Name: void parseDN(java.lang.String,java.util.Map)>/r0}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r23}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509Key: java.security.PublicKey buildX509Key(sun.security.x509.AlgorithmId,sun.security.util.BitArray)>/$r13}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URI$Parser: int parseAuthority(int,int)>/$r2}" -> "VarNode{<java.net.URI: java.lang.String access$2202(java.net.URI,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>/$r4}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.String)>/r4}" [color=blue];
  "VarNode{<sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>/$r16}" -> "VarNode{<java.lang.IllegalAccessException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.lang.ArrayIndexOutOfBoundsException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r20}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>/$r7}" -> "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>/$r8}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r7}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.net.InetAddress$Cache: java.net.InetAddress$Cache put(java.lang.String,java.net.InetAddress[])>/$r11}" -> "VarNode{<java.net.InetAddress$Cache: java.net.InetAddress$Cache put(java.lang.String,java.net.InetAddress[])>/r15}" [];
  "VarNode{<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>/$r11}" -> "VarNode{<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>/$r12}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r3}" -> "VarNode{<io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>/$r13}" [color=green3,style=dashed];
  "VarNode{<java.math.BigInteger: void <init>(java.lang.String,int)>/$r10}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String,int)>/r0}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.jar.JarVerifier$VerifierStream: void <init>(java.util.jar.Manifest,java.util.jar.JarEntry,java.io.InputStream,java.util.jar.JarVerifier)>[3@L458] new sun.security.util.ManifestEntryVerifier}.<sun.security.util.ManifestEntryVerifier: java.lang.String name>}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r63}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.jar.JarVerifier$VerifierStream: void <init>(java.util.jar.Manifest,java.util.jar.JarEntry,java.io.InputStream,java.util.jar.JarVerifier)>[3@L458] new sun.security.util.ManifestEntryVerifier}.<sun.security.util.ManifestEntryVerifier: java.lang.String name>}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r52}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.jar.JarVerifier$VerifierStream: void <init>(java.util.jar.Manifest,java.util.jar.JarEntry,java.io.InputStream,java.util.jar.JarVerifier)>[3@L458] new sun.security.util.ManifestEntryVerifier}.<sun.security.util.ManifestEntryVerifier: java.lang.String name>}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r32}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.jar.JarVerifier$VerifierStream: void <init>(java.util.jar.Manifest,java.util.jar.JarEntry,java.io.InputStream,java.util.jar.JarVerifier)>[3@L458] new sun.security.util.ManifestEntryVerifier}.<sun.security.util.ManifestEntryVerifier: java.lang.String name>}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r26}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.jar.JarVerifier$VerifierStream: void <init>(java.util.jar.Manifest,java.util.jar.JarEntry,java.io.InputStream,java.util.jar.JarVerifier)>[3@L458] new sun.security.util.ManifestEntryVerifier}.<sun.security.util.ManifestEntryVerifier: java.lang.String name>}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r13}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Locale$Builder: void <init>()>[1@L2373] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String language>}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r1}" [color=red,style=dashed];
  "VarNode{<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>/r2}" -> "VarNode{<java.util.jar.Attributes$Name: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.pkcs.PKCS9Attributes: byte[] decode(sun.security.util.DerInputStream)>/$r23}" -> "VarNode{<sun.security.pkcs.PKCS9Attributes: byte[] decode(sun.security.util.DerInputStream)>/$r24}" [color=green3,style=dashed];
  "VarNode{<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>/$r6}" -> "InstanceFieldNode{NewObj{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.LocaleExtensions getLocaleExtensions()>[11@L533] new sun.util.locale.LocaleExtensions}.<sun.util.locale.LocaleExtensions: java.lang.String id>}" [color=red];
  "InstanceFieldNode{MergedObj{<Merged javax.crypto.NoSuchPaddingException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.io.FilePermission: java.lang.String getActions()>/$r2}" -> "VarNode{<java.security.Permission: java.lang.String toString()>/$r1}" [color=blue,style=dashed];
  "VarNode{<javax.crypto.JceSecurityManager: javax.crypto.CryptoPermission getCryptoPermission(java.lang.String)>/$r1}" -> "VarNode{<javax.crypto.CryptoPermission: void <init>(java.lang.String,int,java.security.spec.AlgorithmParameterSpec,java.lang.String)>/r1}" [color=blue];
  "VarNode{<javax.crypto.JceSecurityManager: javax.crypto.CryptoPermission getCryptoPermission(java.lang.String)>/$r1}" -> "VarNode{<javax.crypto.CryptoPermission: void <init>(java.lang.String,int,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r6}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r10}" -> "VarNode{<java.text.MessageFormat: int findKeyword(java.lang.String,java.lang.String[])>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r59}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r59}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r58}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>/$r13}" -> "VarNode{<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.BaseLocale$1)>/r4}" [color=blue];
  "VarNode{<java.nio.charset.CharsetEncoder: void throwIllegalStateException(int,int)>/$r10}" -> "VarNode{<java.lang.IllegalStateException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String negPrefixPattern>}" -> "VarNode{<java.text.DecimalFormat: java.lang.String toPattern(boolean)>/$r3}" [color=red,style=dashed];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: boolean validatePromise(io.netty.channel.ChannelPromise,boolean)>/$r25}" -> "VarNode{<io.netty.channel.AbstractChannelHandlerContext: boolean validatePromise(io.netty.channel.ChannelPromise,boolean)>/$r26}" [color=green3,style=dashed];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r52}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.SeedGenerator: void <clinit>()>/$r25}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ArrayList$ListItr: java.lang.Object previous()>/$r3}" -> "VarNode{<java.util.Collections: void reverse(java.util.List)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r4}" -> "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[61@L1837] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r4}" -> "InstanceFieldNode{NewObj{<java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>[82@L1848] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r4}" -> "InstanceFieldNode{NewObj{<sun.util.calendar.ZoneInfoFile$1: java.lang.Object run()>[13@L255] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r4}" -> "InstanceFieldNode{NewObj{<java.util.logging.LogManager: void readConfiguration()>[44@L1297] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<java.io.File: void <init>(java.lang.String,java.lang.String)>/$r4}" -> "InstanceFieldNode{NewObj{<sun.security.util.AnchorCertificates$1: java.lang.Void run()>[0@L57] new java.io.File}.<java.io.File: java.lang.String path>}" [color=red];
  "VarNode{<io.netty.buffer.PooledByteBufAllocator: void <init>(boolean,int,int,int,int,int,int,int)>/$r29}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r32}" -> "VarNode{<java.net.SocketPermission: boolean authorizedIPv6(java.lang.String,byte[])>/$r33}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.Signal: java.lang.String toString()>/$r2}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<io.netty.util.Signal: java.lang.String toString()>/$r2}" -> "VarNode{<io.netty.handler.codec.DecoderResult: java.lang.String toString()>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r14}" -> "VarNode{<sun.security.x509.X509CertImpl: java.lang.String toString()>/$r12}" [color=green3,style=dashed];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.String substring(int,int)>/$r2}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.String substring(int,int)>/$r1}" [color=green3,style=dashed];
  "VarNode{<sun.security.jca.ProviderList: void <init>()>/$r27}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[3@L540] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" -> "VarNode{<java.util.TreeMap: void deleteEntry(java.util.TreeMap$Entry)>/$r18}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[3@L540] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.Object getKey()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[3@L540] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" -> "VarNode{<java.util.TreeMap$KeyIterator: java.lang.Object next()>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[3@L540] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object key>}" -> "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/$r2}" [color=red,style=dashed];
  "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r8}" -> "VarNode{<io.netty.util.concurrent.PromiseTask$RunnableAdapter: java.lang.String toString()>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>/$r11}" -> "VarNode{<java.lang.AssertionError: void <init>(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.net.URISyntaxException: java.lang.String getMessage()>/$r4}" -> "VarNode{<java.net.URI: java.net.URI create(java.lang.String)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.net.URISyntaxException: java.lang.String getMessage()>/$r4}" -> "VarNode{<java.lang.Throwable: java.lang.String getLocalizedMessage()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName(boolean)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName(boolean)>/$r4}" -> "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String getDisplayName(boolean)>/$r3}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>[117@L1543] new java.security.UnresolvedPermission}.<java.security.UnresolvedPermission: java.lang.String name>}" -> "VarNode{<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>/$r36}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>[117@L1543] new java.security.UnresolvedPermission}.<java.security.UnresolvedPermission: java.lang.String name>}" -> "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r6}" [color=red,style=dashed];
  "VarNode{<java.io.File: java.lang.String toString()>/$r1}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.io.File: java.lang.String toString()>/$r1}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>/$r51}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$jdkCAConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r10}" -> "VarNode{<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int,java.security.cert.CertPathValidatorException$Reason)>/r1}" [color=blue];
  "VarNode{<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>/$r13}" -> "VarNode{<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>/$r14}" [color=green3,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)>/$r7}" -> "VarNode{<io.netty.handler.codec.http.HttpMessageUtil: void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)>/$r8}" [];
  "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r20}" -> "VarNode{<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>/$r21}" [color=green3,style=dashed];
  "VarNode{<io.netty.buffer.UnpooledHeapByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,byte[],int,int,int)>/$r7}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.DateFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>/$r7}" -> "VarNode{<java.text.Format: java.lang.String format(java.lang.Object)>/$r4}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String getPrivateuse()>/$r1}" -> "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r13}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String getPrivateuse()>/$r1}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>/$r5}" [color=blue,style=dashed];
  "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/r0}" -> "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/r0}" -> "VarNode{<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>/$r6}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>/$r7}" -> "VarNode{<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.util.regex.PatternSyntaxException>}.<java.util.regex.PatternSyntaxException: java.lang.String pattern>}" -> "VarNode{<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>/$r4}" [color=red,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r57}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r57}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r56}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: java.lang.String canonicalizeRegion(java.lang.String)>/r0}" -> "VarNode{<sun.util.locale.LocaleUtils: java.lang.String toUpperString(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>/$r27}" -> "ArrayIndexNode{NewObj{<sun.security.provider.PolicyParser: java.lang.String[] parseExtDirs(java.lang.String,int)>[23@L731] newarray java.lang.String[$i3]}}" [color=red];
  "VarNode{<sun.security.pkcs.PKCS9Attribute: void throwSingleValuedException()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r76}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r76}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r75}" [color=green3,style=dashed];
  "VarNode{<org.fengfei.lanproxy.server.config.web.MimeType: java.lang.String parseSuffix(java.lang.String)>/r0}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>/r2}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.MimeType: java.lang.String parseSuffix(java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String toString()>/%this}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannelHandlerContext: boolean validatePromise(io.netty.channel.ChannelPromise,boolean)>/$r26}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.ExtensionDependency$1: java.util.jar.Manifest run()>/$r7}" -> "VarNode{<java.io.FileNotFoundException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$Node group0()>/$r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$Node group0()>/$r19}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$Node group0()>/$r26}" [color=green3,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.util.regex.Pattern$Node group0()>/$r19}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.UnparseableExtension: java.lang.String toString()>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r3}" -> "VarNode{<io.netty.util.internal.logging.Log4JLogger: void debug(java.lang.String,java.lang.Object)>/arg}" [color=blue];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r3}" -> "VarNode{<io.netty.util.internal.logging.JdkLogger: void debug(java.lang.String,java.lang.Object)>/arg}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser$PrincipalEntry: void <init>(java.lang.String,java.lang.String)>/r4}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>[128@L530] new sun.security.provider.PolicyParser$PrincipalEntry}.<sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String principalName>}" [color=red];
  "VarNode{<javax.security.auth.x500.X500Principal: java.lang.String toString()>/$r2}" -> "VarNode{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>/$r31}" [color=blue,style=dashed];
  "VarNode{<java.util.Currency$1: java.lang.Void run()>/r57}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.channel.AbstractChannel: java.lang.String toString()>/$r13}" -> "VarNode{<io.netty.util.internal.logging.MessageFormatter: void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<io.netty.channel.AbstractChannel: java.lang.String toString()>/$r13}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<io.netty.channel.AbstractChannel: java.lang.String toString()>/$r13}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.util.jar.JarFile: boolean isKnownNotToHaveSpecialAttributes()>/$r26}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$CacheKey: java.lang.String getName()>/$r1}" -> "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,boolean)>/$r6}" [color=blue,style=dashed];
  "VarNode{<java.util.ResourceBundle$CacheKey: java.lang.String getName()>/$r1}" -> "VarNode{<java.util.ResourceBundle: java.util.ResourceBundle findBundleInCache(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle$Control)>/$r11}" [color=blue,style=dashed];
  "VarNode{<java.util.ServiceLoader$LazyIterator: java.lang.Object nextService()>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo getZoneInfo0(java.lang.String)>/$r22}" -> "VarNode{<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.lang.ref.Reference: java.lang.Object get()>/$r1}" -> "VarNode{<java.lang.ref.SoftReference: java.lang.Object get()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r62}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r63}" [color=green3,style=dashed];
  "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r7}" -> "VarNode{<javax.crypto.CryptoPermission: java.lang.String toString()>/$r8}" [color=green3,style=dashed];
  "VarNode{<java.util.SimpleTimeZone: void decodeEndRule()>/$r21}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r6}" -> "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r5}" [color=green3,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.security.AccessControlException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/$r44}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.x509.X500Name: void parseDN(java.lang.String,java.util.Map)>[45@L933] new sun.security.x509.RDN}.<sun.security.x509.RDN: java.lang.String canonicalString>}" -> "VarNode{<sun.security.x509.RDN: java.lang.String toRFC2253String(boolean)>/r5}" [color=red,style=dashed];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkHost(java.lang.String)>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: int escape(boolean,boolean,boolean)>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r35}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String decompose(java.lang.String,boolean,int)>/r2}" -> "VarNode{<sun.text.normalizer.NormalizerImpl: java.lang.String convert(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r49}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/$r6}" -> "VarNode{<java.io.File: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r12}" -> "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: void parse(sun.security.util.DerValue)>[26@L649] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String dn>}" [color=red];
  "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r12}" -> "InstanceFieldNode{NewObj{<sun.security.x509.X509CertInfo: void parse(sun.security.util.DerValue)>[39@L659] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String dn>}" [color=red];
  "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r12}" -> "InstanceFieldNode{NewObj{<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>[13@L181] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String dn>}" [color=red];
  "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r12}" -> "InstanceFieldNode{NewObj{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>[100@L149] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String dn>}" [color=red];
  "VarNode{<sun.security.x509.X500Name: void generateDN()>/$r12}" -> "InstanceFieldNode{NewObj{<sun.security.x509.X509CRLImpl: void parse(sun.security.util.DerValue)>[104@L1116] new sun.security.x509.X500Name}.<sun.security.x509.X500Name: java.lang.String dn>}" [color=red];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r23}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>/r10}" -> "ArrayIndexNode{NewObj{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>[15@L532] newarray java.lang.Object[%intconst0]}}" [color=red];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r4}" -> "InstanceFieldNode{NewObj{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>[74@L132] new sun.security.x509.IPAddressName}.<sun.security.x509.IPAddressName: java.lang.String name>}" [color=red];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27769}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[3@L540] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27769}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[47@L577] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" [color=red];
  "VarNode{<java.util.TreeMap$Entry: java.lang.String toString()>/%taint-temp-27769}" -> "InstanceFieldNode{NewObj{<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>[26@L2571] new java.util.TreeMap$Entry}.<java.util.TreeMap$Entry: java.lang.Object value>}" [color=red];
  "VarNode{<java.security.KeyStore: java.lang.String getDefaultType()>/$r1}" -> "VarNode{<java.security.KeyStore: java.lang.String getDefaultType()>/r2}" [];
  "VarNode{<java.lang.ref.SoftReference: void <init>(java.lang.Object)>/r1}" -> "VarNode{<java.lang.ref.Reference: void <init>(java.lang.Object)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.DecimalFormatSymbolsProviderImpl: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>[4@L85] new java.text.DecimalFormatSymbols}.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol>}" -> "VarNode{<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>/$r27}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.DecimalFormatSymbolsProviderImpl: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>[4@L85] new java.text.DecimalFormatSymbols}.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol>}" -> "VarNode{<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>/$r20}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.DecimalFormatSymbolsProviderImpl: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>[4@L85] new java.text.DecimalFormatSymbols}.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol>}" -> "VarNode{<java.text.DecimalFormatSymbols: java.lang.String getInternationalCurrencySymbol()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.jca.ProviderConfig$2: java.security.Provider run()>/$r17}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>/r2}" -> "VarNode{<java.util.Hashtable$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.Hashtable$Entry)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>[123@L857] new java.security.UnresolvedPermission}.<java.security.UnresolvedPermission: java.lang.String actions>}" -> "VarNode{<java.security.UnresolvedPermission: java.lang.String toString()>/$r9}" [color=red,style=dashed];
  "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/$r7}" [];
  "VarNode{<javax.crypto.Cipher: void chooseProvider(int,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.AlgorithmParameters,java.security.SecureRandom)>/$r20}" -> "VarNode{<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile$3: java.lang.Boolean run()>/$r48}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>/r1}" -> "VarNode{<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>/r1}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>/$r32}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r44}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<io.netty.handler.codec.http.HttpMethod: void <clinit>()>[29@L81] new io.netty.handler.codec.http.HttpMethod}.<io.netty.handler.codec.http.HttpMethod: java.lang.String name>}" -> "VarNode{<io.netty.handler.codec.http.HttpMethod: java.lang.String name()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.util.DerValue: int getInteger()>/$r7}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String toString()>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URL: java.lang.String getProtocol()>/$r1}" -> "VarNode{<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r51}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r51}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,java.util.List)>/$r50}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r34}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r34}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder mant>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r34}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[25@L3565] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r34}" -> "InstanceFieldNode{NewObj{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>[111@L3618] new java.util.Formatter$FormatSpecifier$BigDecimalLayout}.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: java.lang.StringBuilder exp>}" [color=red];
  "VarNode{<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void layout(java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>/$r34}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(int)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/r2}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/$r6}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>/r2}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.lang.InterruptedException: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.Exception: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>[1@L1569] new sun.util.locale.InternalLocaleBuilder}.<sun.util.locale.InternalLocaleBuilder: java.lang.String variant>}" -> "VarNode{<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>/r14}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r29}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r29}" -> "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r28}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r1}" -> "VarNode{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>/r1}" [color=blue];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>/$r6}" -> "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensionAgainst(java.lang.String,java.util.jar.Attributes,java.io.File)>/$r4}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/r0}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r13}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/r0}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/r0}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String,boolean)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/r0}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r12}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/r0}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r11}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/r0}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r2}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/r0}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r14}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/r0}" -> "VarNode{<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.security.NoSuchAlgorithmException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" -> "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.util.Calendar,char,java.util.Locale)>/$r5}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.util.Calendar,char,java.util.Locale)>/r10}" [];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.util.Calendar,char,java.util.Locale)>/$r5}" -> "VarNode{<java.lang.String: java.lang.String toUpperCase()>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r8}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>/r0}" -> "VarNode{<java.lang.String: java.lang.String toString()>/%this}" [color=blue];
  "ArrayIndexNode{NewObj{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>[93@L1893] newarray java.lang.Object[%intconst4]}}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r39}" [color=red,style=dashed];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/r0}" -> "VarNode{<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>/r3}" [color=blue];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/r0}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/r0}" -> "VarNode{<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>/$r18}" [color=green3,style=dashed];
  "VarNode{<java.net.URI: java.lang.String decode(java.lang.String)>/c8}" -> "VarNode{<java.net.URI: java.lang.String decode(java.lang.String)>/$r18}" [color=green3,style=dashed];
  "VarNode{<java.util.ArrayDeque: void doubleCapacity()>/%native-arraycopy-temp167}" -> "ArrayIndexNode{NewObj{<java.util.ArrayDeque: void doubleCapacity()>[20@L162] newarray java.lang.Object[$i5]}}" [color=red];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.math.BigDecimal: boolean commonNeedIncrement(int,int,int,boolean)>/$r12}" -> "VarNode{<java.lang.AssertionError: void <init>(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/$r17}" -> "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/$r19}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>/$r17}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.io.File: java.net.URI toURI()>/$r2}" -> "VarNode{<java.io.File: java.lang.String slashify(java.lang.String,boolean)>/r0}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.x509.GeneralName: void <init>(sun.security.util.DerValue,boolean)>[16@L95] new sun.security.x509.OtherName}.<sun.security.x509.OtherName: java.lang.String name>}" -> "VarNode{<sun.security.x509.OtherName: java.lang.String toString()>/$r3}" [color=red,style=dashed];
  "VarNode{<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>/$r70}" -> "VarNode{<java.lang.StringBuilder: java.lang.Appendable append(char)>/%this}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r3}" -> "VarNode{<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>/$r5}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r35}" -> "VarNode{<java.util.ArrayList: boolean add(java.lang.Object)>/r2}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser: void skipEntry()>/$r11}" -> "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/r8}" [color=blue];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: void checkDuplicateName(java.lang.String)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r36}" -> "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r37}" [color=green3,style=dashed];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r43}" -> "InstanceFieldNode{NewObj{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>[21@L272] new java.net.URL}.<java.net.URL: java.lang.String query>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r43}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[0@L823] new java.net.URL}.<java.net.URL: java.lang.String query>}" [color=red];
  "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File tmpdir0()>/$r21}" -> "VarNode{<io.netty.util.internal.PlatformDependent: java.io.File toDirectory(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>/$r58}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>/r4}" -> "VarNode{<java.util.LinkedHashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" [color=blue];
  "VarNode{<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>/r4}" -> "VarNode{<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>/r1}" [color=blue];
  "VarNode{<java.lang.StringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>/%this}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.math.BigDecimal,java.util.Locale)>/$r8}" -> "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>/r4}" [color=blue];
  "VarNode{<sun.misc.URLClassPath: void check(java.net.URL)>/$r6}" -> "VarNode{<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>/r13}" [color=blue];
  "VarNode{<java.io.File: boolean mkdir()>/$r3}" -> "VarNode{<java.lang.SecurityManager: void checkWrite(java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/r2}" -> "VarNode{<sun.security.util.AlgorithmDecomposer: java.util.Set decomposeOneHash(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/r2}" -> "VarNode{<java.util.HashSet: boolean add(java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/r2}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/$r18}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String toString()>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{MergedObj{<Merged java.security.NoSuchAlgorithmException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/r22}" -> "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r0}" [color=blue];
  "VarNode{<java.security.MessageDigest$Delegate: void <init>(java.security.MessageDigestSpi,java.lang.String)>/r1}" -> "VarNode{<java.security.MessageDigest: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[53@L454] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String pad>}" -> "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/r32}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>[53@L454] new javax.crypto.Cipher$Transform}.<javax.crypto.Cipher$Transform: java.lang.String pad>}" -> "VarNode{<javax.crypto.Cipher$Transform: int supportsPadding(java.security.Provider$Service)>/$r2}" [color=red,style=dashed];
  "VarNode{<sun.security.rsa.RSAUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.security.AlgorithmParameters)>/$r1}" -> "VarNode{<sun.security.rsa.RSAUtil$KeyType: sun.security.rsa.RSAUtil$KeyType lookup(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.rsa.RSAUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.security.AlgorithmParameters)>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.rsa.RSAUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.security.AlgorithmParameters)>/$r1}" -> "VarNode{<sun.security.rsa.RSAUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.security.AlgorithmParameters)>/$r13}" [color=green3,style=dashed];
  "VarNode{<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>/$r9}" -> "VarNode{<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>/$r47}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: void normalize()>/$r10}" -> "VarNode{<java.util.regex.Pattern: void normalize()>/$r11}" [color=green3,style=dashed];
  "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r66}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/r15}" -> "VarNode{<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>/$r18}" [color=green3,style=dashed];
  "VarNode{<sun.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>/$r8}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r12}" -> "VarNode{<java.lang.String: java.lang.String toString()>/%this}" [color=blue];
  "VarNode{<java.io.FilePermission: void init(int)>/$r1}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkRead(java.lang.String)>[0@L888] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "VarNode{<java.io.FilePermission: void init(int)>/$r1}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkWrite(java.lang.String)>[0@L979] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "VarNode{<java.io.FilePermission: void init(int)>/$r1}" -> "InstanceFieldNode{NewObj{<java.lang.SecurityManager: void checkDelete(java.lang.String)>[0@L1007] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "VarNode{<java.io.FilePermission: void init(int)>/$r1}" -> "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[22@L684] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "VarNode{<java.io.FilePermission: void init(int)>/$r1}" -> "InstanceFieldNode{NewObj{<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>[46@L691] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "VarNode{<java.io.FilePermission: void init(int)>/$r1}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyFile: java.security.Permission getKnownInstance(java.lang.Class,java.lang.String,java.lang.String)>[4@L990] new java.io.FilePermission}.<java.io.FilePermission: java.lang.String cpath>}" [color=red];
  "VarNode{<java.lang.String: java.lang.CharSequence subSequence(int,int)>/$r1}" -> "VarNode{<java.util.regex.Matcher: java.lang.CharSequence getSubSequence(int,int)>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.CharSequence subSequence(int,int)>/$r1}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.CharSequence subSequence(int,int)>/$r1}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r10}" [color=blue,style=dashed];
  "VarNode{<java.lang.String: java.lang.CharSequence subSequence(int,int)>/$r1}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r7}" -> "VarNode{<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>/$r23}" [color=green3,style=dashed];
  "VarNode{<sun.security.x509.X509Key: java.lang.String toString()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509Key: java.lang.String toString()>/$r5}" -> "VarNode{<sun.security.x509.X509Key: java.lang.String toString()>/$r2}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: java.lang.String typeName(java.lang.Class)>/$r6}" -> "VarNode{<io.netty.util.internal.JavassistTypeParameterMatcherGenerator: java.lang.String typeName(java.lang.Class)>/$r7}" [color=green3,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.lang.Error>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r2}" -> "VarNode{<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>/$r26}" [color=green3,style=dashed];
  "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r8}" -> "VarNode{<java.net.URLClassLoader: java.lang.Package getAndVerifyPackage(java.lang.String,java.util.jar.Manifest,java.net.URL)>/$r9}" [color=green3,style=dashed];
  "VarNode{<io.netty.buffer.WrappedByteBuf: java.lang.String toString()>/$r6}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.buffer.WrappedByteBuf: java.lang.String toString()>/$r6}" -> "VarNode{<io.netty.buffer.WrappedByteBuf: java.lang.String toString()>/$r4}" [color=green3,style=dashed];
  "VarNode{<java.time.temporal.ValueRange: java.lang.String genInvalidFieldMessage(java.time.temporal.TemporalField,long)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/$r6}" -> "VarNode{<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseVariants(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r2}" -> "VarNode{<java.util.ArrayList: boolean add(java.lang.Object)>/r2}" [color=blue];
  "VarNode{<sun.security.util.CurveDB: void add(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.regex.Pattern)>/$r27}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<java.util.PropertyPermission: int getMask(java.lang.String)>/$r4}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<Server: void main(java.lang.String[])>[2@L10] new io.netty.channel.embedded.EmbeddedChannel}.<io.netty.channel.AbstractChannel: java.lang.String strVal>}" -> "VarNode{<io.netty.channel.AbstractChannel: java.lang.String toString()>/$r13}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<Server: void main(java.lang.String[])>[2@L10] new io.netty.channel.embedded.EmbeddedChannel}.<io.netty.channel.AbstractChannel: java.lang.String strVal>}" -> "VarNode{<io.netty.channel.AbstractChannel: java.lang.String toString()>/$r15}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.security.Policy: java.security.Policy getPolicyNoCheck()>[37@L201] new java.security.Policy$2}.<java.security.Policy$2: java.lang.String val$pc>}" -> "VarNode{<java.security.Policy$2: java.security.Policy run()>/$r9}" [color=red,style=dashed];
  "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r19}" -> "VarNode{<io.netty.handler.codec.http.HttpHeaders: void validateHeaderValue(java.lang.CharSequence)>/$r20}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String negativeSuffix>}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/$r14}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String negativeSuffix>}" -> "VarNode{<java.text.DecimalFormat: java.lang.String toPattern(boolean)>/$r4}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String negativeSuffix>}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r19}" [color=red,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: boolean init(java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>/$r5}" -> "VarNode{<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>/r0}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.HttpRequestHandler: void outputPages(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>/$r47}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.jca.ProviderConfig$3: java.lang.Object run()>/$r1}" -> "VarNode{<sun.security.jca.ProviderConfig: java.lang.String expand(java.lang.String)>/$r2}" [color=blue,style=dashed];
  "VarNode{<sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r24}" -> "VarNode{<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>/$r25}" [color=green3,style=dashed];
  "VarNode{<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>/$r24}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester)>/$r72}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.util.Currency: void <init>(java.lang.String,int,int)>/r1}" -> "InstanceFieldNode{NewObj{<java.util.Currency: java.util.Currency getInstance(java.lang.String,int,int)>[62@L352] new java.util.Currency}.<java.util.Currency: java.lang.String currencyCode>}" [color=red];
  "VarNode{<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>/r2}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>/r1}" [color=blue];
  "VarNode{<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>/r2}" -> "VarNode{<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>/$r1}" [color=green3,style=dashed];
  "VarNode{<java.util.StringJoiner: java.lang.StringBuilder prepareBuilder()>/$r4}" -> "InstanceFieldNode{NewObj{<sun.security.x509.RDN: java.lang.String toRFC2253StringInternal(boolean,java.util.Map)>[21@L454] new java.util.StringJoiner}.<java.util.StringJoiner: java.lang.StringBuilder value>}" [color=red];
  "VarNode{<java.util.Locale: java.lang.String toLanguageTag()>/$r14}" -> "VarNode{<sun.util.locale.provider.FallbackLocaleProviderAdapter: void <clinit>()>/$r1}" [color=blue,style=dashed];
  "VarNode{<io.netty.handler.codec.DecoderResult: java.lang.String toString()>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(char)>/%this}" [color=blue];
  "VarNode{<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>/$r25}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.SocketPermission: void getCanonName()>/$r5}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.misc.ExtensionInfo: java.lang.String toString()>/$r27}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String parentOrNull(java.lang.String)>/r0}" -> "VarNode{<java.io.UnixFileSystem: java.lang.String parentOrNull(java.lang.String)>/$r1}" [color=green3,style=dashed];
  "VarNode{<java.io.UnixFileSystem: java.lang.String parentOrNull(java.lang.String)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r42}" -> "InstanceFieldNode{NewObj{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>[21@L272] new java.net.URL}.<java.net.URL: java.lang.String path>}" [color=red];
  "VarNode{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>/$r42}" -> "InstanceFieldNode{NewObj{<sun.misc.URLClassPath$JarLoader: void <init>(java.net.URL,java.net.URLStreamHandler,java.util.HashMap,java.security.AccessControlContext)>[0@L823] new java.net.URL}.<java.net.URL: java.lang.String path>}" [color=red];
  "VarNode{<sun.util.locale.provider.TimeZoneNameProviderImpl: java.lang.String[] getDisplayNameArray(java.lang.String,java.util.Locale)>/r0}" -> "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getTimeZoneNames(java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkUserInfo(java.lang.String)>/$r4}" -> "VarNode{<sun.net.util.IPAddressUtil: java.lang.String checkUserInfo(java.lang.String)>/$r5}" [color=green3,style=dashed];
  "InstanceFieldNode{MergedObj{<Merged java.lang.IllegalAccessException>}.<java.lang.Throwable: java.lang.String detailMessage>}" -> "VarNode{<java.lang.Throwable: java.lang.String getMessage()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>/$r12}" -> "VarNode{<java.lang.NullPointerException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence)>/$r3}" -> "VarNode{<java.lang.StringBuffer: java.lang.AbstractStringBuilder append(java.lang.AbstractStringBuilder)>/r1}" [color=blue];
  "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence)>/$r3}" -> "VarNode{<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.AbstractStringBuilder)>/r0}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r21}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r21}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r12}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>/$r12}" -> "VarNode{<java.security.PermissionCollection: java.lang.String toString()>/$r11}" [color=blue,style=dashed];
  "VarNode{<sun.misc.JarIndex: void addMapping(java.lang.String,java.lang.String)>/r2}" -> "VarNode{<sun.misc.JarIndex: void addToList(java.lang.String,java.lang.String,java.util.HashMap)>/r3}" [color=blue];
  "VarNode{<sun.misc.JarIndex: void addMapping(java.lang.String,java.lang.String)>/r2}" -> "VarNode{<sun.misc.JarIndex: void addToList(java.lang.String,java.lang.String,java.util.HashMap)>/r1}" [color=blue];
  "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/r0}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=green3,style=dashed];
  "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/r0}" -> "VarNode{<java.lang.String: java.lang.String toString()>/%this}" [color=blue];
  "VarNode{<sun.security.x509.EDIPartyName: java.lang.String toString()>/$r13}" -> "VarNode{<sun.security.x509.GeneralName: java.lang.String toString()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>/r2}" -> "VarNode{<java.text.SimpleDateFormat: int subParse(java.lang.String,int,int,int,boolean,boolean[],java.text.ParsePosition,boolean,java.text.CalendarBuilder)>/r1}" [color=blue];
  "VarNode{<java.util.zip.ZipEntry: void <init>(java.util.zip.ZipEntry)>/$r2}" -> "InstanceFieldNode{NewObj{<java.util.jar.JarFile: java.util.zip.ZipEntry getEntry(java.lang.String)>[2@L253] new java.util.jar.JarFile$JarFileEntry}.<java.util.zip.ZipEntry: java.lang.String name>}" [color=red];
  "VarNode{<java.util.zip.ZipEntry: void <init>(java.util.zip.ZipEntry)>/$r2}" -> "InstanceFieldNode{NewObj{<java.util.jar.JarFile$JarEntryIterator: java.util.jar.JarEntry next()>[3@L269] new java.util.jar.JarFile$JarFileEntry}.<java.util.zip.ZipEntry: java.lang.String name>}" [color=red];
  "VarNode{<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>/$r12}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r16}" -> "VarNode{<io.netty.util.internal.logging.Log4JLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" [color=blue];
  "VarNode{<io.netty.util.ResourceLeakDetector: void <clinit>()>/$r16}" -> "VarNode{<io.netty.util.internal.logging.JdkLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>/argB}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r30}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>/$r6}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/$r2}" -> "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/r20}" [];
  "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List createObject(sun.util.locale.BaseLocale)>/$r2}" -> "VarNode{<java.util.ResourceBundle$Control$CandidateListCache: java.util.List getDefaultList(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>/r3}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r52}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r52}" -> "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r51}" [color=green3,style=dashed];
  "VarNode{<io.netty.util.UniqueName: void <init>(java.util.concurrent.ConcurrentMap,java.lang.String,java.lang.Object[])>/$r4}" -> "VarNode{<io.netty.util.UniqueName: void <init>(java.util.concurrent.ConcurrentMap,java.lang.String,java.lang.Object[])>/$r5}" [];
  "VarNode{<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>/$r8}" -> "VarNode{<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/r4}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/r1}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/$r32}" [color=green3,style=dashed];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r10}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r10}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r0}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>[3@L794] new java.util.PropertyPermission}.<java.util.PropertyPermission: java.lang.String actions>}" -> "VarNode{<java.util.PropertyPermission: java.lang.String getActions()>/$r2}" [color=red,style=dashed];
  "VarNode{<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.Collections$EmptyList: java.lang.Object get(int)>/$r4}" -> "VarNode{<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r28}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r39}" -> "ArrayIndexNode{NewObj{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>[70@L1883] newarray java.lang.Object[%intconst4]}}" [color=red];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>[15@L1415] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r9}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>[15@L1415] new java.text.MessageFormat}.<java.text.MessageFormat: java.lang.String pattern>}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r3}" [color=red,style=dashed];
  "VarNode{<sun.security.util.DerValue: java.lang.String getUTF8String()>/$r7}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.BaseLocale$Key: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>[19@L213] new java.lang.ref.SoftReference}.<java.lang.ref.Reference: java.lang.Object referent>}" -> "VarNode{<java.lang.ref.Reference: java.lang.Object get()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>/$r15}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.security.x509.CRLExtensions: sun.security.x509.Extension get(java.lang.String)>[0@L184] new sun.security.x509.X509AttributeName}.<sun.security.x509.X509AttributeName: java.lang.String prefix>}" -> "VarNode{<sun.security.x509.X509AttributeName: java.lang.String getPrefix()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.security.Security: java.io.File securityPropFile(java.lang.String)>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.util.locale.LanguageTag: boolean parseExtensions(sun.util.locale.StringTokenIterator,sun.util.locale.ParseStatus)>/$r7}" -> "VarNode{<java.util.ArrayList: boolean add(java.lang.Object)>/r2}" [color=blue];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[82@L2364] newarray java.lang.String[%intconst0]}}" -> "VarNode{<java.util.Arrays$ArrayList: java.lang.Object get(int)>/$r2}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[82@L2364] newarray java.lang.String[%intconst0]}}" -> "VarNode{<java.util.ArrayList: java.lang.Object elementData(int)>/$r2}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[82@L2364] newarray java.lang.String[%intconst0]}}" -> "VarNode{<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>/%native-arraycopy-temp47}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[82@L2364] newarray java.lang.String[%intconst0]}}" -> "VarNode{<sun.security.util.AbstractAlgorithmConstraints: java.util.List getAlgorithms(java.lang.String)>/$r6}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[82@L2364] newarray java.lang.String[%intconst0]}}" -> "VarNode{<java.util.ArrayList: java.lang.Object remove(int)>/%native-arraycopy-temp338}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[82@L2364] newarray java.lang.String[%intconst0]}}" -> "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp341}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[82@L2364] newarray java.lang.String[%intconst0]}}" -> "VarNode{<java.util.ArrayList$Itr: java.lang.Object next()>/$r4}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[82@L2364] newarray java.lang.String[%intconst0]}}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void <init>(java.lang.String,java.util.List)>/r89}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[82@L2364] newarray java.lang.String[%intconst0]}}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>/r4}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[82@L2364] newarray java.lang.String[%intconst0]}}" -> "VarNode{<org.fengfei.lanproxy.server.config.web.MimeType: java.lang.String parseSuffix(java.lang.String)>/r9}" [color=red,style=dashed];
  "ArrayIndexNode{NewObj{<java.lang.String: java.lang.String[] split(java.lang.String,int)>[82@L2364] newarray java.lang.String[%intconst0]}}" -> "VarNode{<java.util.ArrayList: boolean addAll(int,java.util.Collection)>/%native-arraycopy-temp344}" [color=red,style=dashed];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>/$r11}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.security.PermissionCollection getPermissions(java.security.Permissions,java.security.ProtectionDomain)>/$r15}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/%taint-temp-8406}" -> "InstanceFieldNode{NewObj{<io.netty.channel.embedded.EmbeddedEventLoop: io.netty.channel.ChannelFuture register(io.netty.channel.Channel)>[0@L115] new io.netty.channel.DefaultChannelPromise}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" [color=red];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/%taint-temp-8406}" -> "InstanceFieldNode{NewObj{<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>[0@L739] new io.netty.channel.DefaultChannelPromise}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" [color=red];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/%taint-temp-8406}" -> "InstanceFieldNode{NewObj{<io.netty.util.concurrent.AbstractEventExecutor: java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable,java.lang.Object)>[0@L106] new io.netty.util.concurrent.PromiseTask}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" [color=red];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>/%taint-temp-8406}" -> "InstanceFieldNode{NewObj{<io.netty.channel.AbstractChannel: io.netty.channel.ChannelPromise newPromise()>[0@L254] new io.netty.channel.DefaultChannelPromise}.<io.netty.util.concurrent.DefaultPromise: java.lang.Object result>}" [color=red];
  "InstanceFieldNode{NewObj{<java.util.Formatter: java.util.Formatter$FormatString[] parse(java.lang.String)>[25@L2567] new java.util.Formatter$FixedString}.<java.util.Formatter$FixedString: java.lang.String s>}" -> "VarNode{<java.util.Formatter$FixedString: void print(java.lang.Object,java.util.Locale)>/$r3}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<java.util.Formatter: java.util.Formatter$FormatString[] parse(java.lang.String)>[25@L2567] new java.util.Formatter$FixedString}.<java.util.Formatter$FixedString: java.lang.String s>}" -> "VarNode{<java.util.Formatter$FixedString: java.lang.String toString()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String getCallerInfo()>/$r8}" -> "VarNode{<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>/$r6}" [color=blue,style=dashed];
  "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r7}" -> "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>[0@L625] new sun.security.provider.PolicyParser$PermissionEntry}.<sun.security.provider.PolicyParser$PermissionEntry: java.lang.String name>}" [color=red];
  "VarNode{<sun.util.locale.provider.LocaleResources: java.lang.String[] getCalendarNames(java.lang.String)>/$r1}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "InstanceFieldNode{NewObj{<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuilder[])>[127@L1505] new java.text.SimpleDateFormat}.<java.text.SimpleDateFormat: java.lang.String pattern>}" -> "VarNode{<java.text.SimpleDateFormat: void initialize(java.util.Locale)>/$r1}" [color=red,style=dashed];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r4}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r4}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r0}" [color=green3,style=dashed];
  "VarNode{<sun.util.calendar.ImmutableGregorianDate: java.lang.String toString()>/$r2}" -> "VarNode{<java.lang.String: java.lang.String valueOf(java.lang.Object)>/$r1}" [color=blue,style=dashed];
  "VarNode{<java.util.SimpleTimeZone: void decodeStartRule()>/$r21}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.IPAddressName: java.lang.String getName()>/$r7}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/r19}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/r19}" -> "VarNode{<java.security.ProtectionDomain: java.lang.String toString()>/$r28}" [color=green3,style=dashed];
  "VarNode{<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>/$r10}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/$r12}" -> "VarNode{<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>/r15}" [];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>[0@L625] new sun.security.provider.PolicyParser$PermissionEntry}.<sun.security.provider.PolicyParser$PermissionEntry: java.lang.String action>}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r26}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>[0@L625] new sun.security.provider.PolicyParser$PermissionEntry}.<sun.security.provider.PolicyParser$PermissionEntry: java.lang.String action>}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r15}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$PermissionEntry parsePermissionEntry()>[0@L625] new sun.security.provider.PolicyParser$PermissionEntry}.<sun.security.provider.PolicyParser$PermissionEntry: java.lang.String action>}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r88}" [color=red,style=dashed];
  "VarNode{<sun.misc.ExtensionDependency: boolean checkExtensions(java.util.jar.JarFile)>/$r38}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.util.jar.JarFile: boolean isKnownNotToHaveSpecialAttributes()>/$r22}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.net.www.ParseUtil: byte unescape(java.lang.String,int)>/r0}" -> "VarNode{<sun.net.www.ParseUtil: byte unescape(java.lang.String,int)>/$r1}" [color=green3,style=dashed];
  "VarNode{<sun.net.www.ParseUtil: byte unescape(java.lang.String,int)>/r0}" -> "VarNode{<java.lang.String: java.lang.String substring(int,int)>/%this}" [color=blue];
  "VarNode{<java.security.Timestamp: java.lang.String toString()>/$r6}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.security.Timestamp: java.lang.String toString()>/$r6}" -> "VarNode{<java.security.Timestamp: java.lang.String toString()>/$r0}" [color=green3,style=dashed];
  "VarNode{<java.security.spec.EllipticCurve: void checkValidity(java.security.spec.ECField,java.math.BigInteger,java.lang.String)>/$r8}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.util.Map getJavaTimeDisplayNames(java.lang.String,int,int,java.util.Locale)>/r1}" -> "VarNode{<sun.util.locale.provider.CalendarNameProviderImpl: java.util.Map getDisplayNamesImpl(java.lang.String,int,int,java.util.Locale,boolean)>/r1}" [color=blue];
  "ArrayIndexNode{NewObj{<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>[19@L1204] newarray java.lang.String[$i1]}}" -> "VarNode{<sun.misc.ExtensionDependency: java.io.File[] getExtFiles(java.io.File[])>/$r14}" [color=red,style=dashed];
  "VarNode{<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>/$r20}" -> "VarNode{<java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r9}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>/$r33}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>/$r34}" [color=green3,style=dashed];
  "InstanceFieldNode{NewObj{<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>[52@L408] new java.net.Parts}.<java.net.Parts: java.lang.String path>}" -> "VarNode{<java.net.Parts: java.lang.String getPath()>/$r1}" [color=red,style=dashed];
  "VarNode{<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>/%taint-temp-274}" -> "InstanceFieldNode{NewObj{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>[12@L1093] new java.util.regex.Matcher}.<java.util.regex.Matcher: java.lang.CharSequence text>}" [color=red];
  "VarNode{<java.text.ChoiceFormat: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.text.ChoiceFormat: void applyPattern(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.text.ChoiceFormat: void applyPattern(java.lang.String)>/$r13}" -> "VarNode{<java.lang.StringBuffer: java.lang.StringBuffer append(char)>/%this}" [color=blue];
  "VarNode{<java.io.DataInputStream: java.lang.String readUTF(java.io.DataInput)>/$r12}" -> "VarNode{<java.io.UTFDataFormatException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r39}" -> "VarNode{<sun.misc.ExtensionInfo: void <init>(java.lang.String,java.util.jar.Attributes)>/$r40}" [color=green3,style=dashed];
  "VarNode{<java.security.SecureClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.CodeSource)>/r1}" -> "VarNode{<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>/r1}" [color=blue];
  "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r7}" -> "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r8}" [color=green3,style=dashed];
  "VarNode{<sun.security.util.SignatureUtil: java.lang.String checkName(java.lang.String)>/r0}" -> "VarNode{<sun.security.util.SignatureUtil: java.security.spec.AlgorithmParameterSpec getParamSpec(java.lang.String,java.security.AlgorithmParameters)>/$r0}" [color=blue,style=dashed];
  "VarNode{<sun.security.util.SignatureUtil: java.lang.String checkName(java.lang.String)>/r0}" -> "VarNode{<java.security.Signature: java.security.Signature getInstance(java.lang.String)>/r0}" [color=blue];
  "VarNode{<sun.security.util.SignatureUtil: java.lang.String checkName(java.lang.String)>/r0}" -> "VarNode{<sun.security.util.SignatureUtil: java.security.AlgorithmParameters createAlgorithmParameters(java.lang.String,byte[])>/$r0}" [color=blue,style=dashed];
  "VarNode{<java.io.File: java.lang.String getName()>/$r4}" -> "VarNode{<java.io.File: java.lang.String getName()>/$r5}" [color=green3,style=dashed];
  "VarNode{<java.io.File: java.lang.String getName()>/$r4}" -> "VarNode{<java.lang.String: java.lang.String substring(int)>/%this}" [color=blue];
  "VarNode{<java.math.BigInteger: void implSquareToLenChecks(int[],int,int[],int)>/$r32}" -> "VarNode{<java.lang.IllegalArgumentException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.InetAddress: void <clinit>()>/$r16}" -> "VarNode{<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>/result}" -> "VarNode{<io.netty.util.concurrent.DefaultPromise: boolean setSuccess0(java.lang.Object)>/result}" [color=blue];
  "VarNode{<sun.text.normalizer.UCharacter: void <clinit>()>/$r9}" -> "VarNode{<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAddressesFromNameService(java.lang.String,java.net.InetAddress)>/r0}" -> "VarNode{<java.net.InetAddress: java.net.InetAddress[] checkLookupTable(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.net.InetAddress: java.net.InetAddress[] getAddressesFromNameService(java.lang.String,java.net.InetAddress)>/r0}" -> "VarNode{<java.net.InetAddress: void cacheAddresses(java.lang.String,java.net.InetAddress[],boolean)>/r6}" [color=blue];
  "VarNode{<java.util.ServiceLoader: void fail(java.lang.Class,java.net.URL,int,java.lang.String)>/$r5}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>/$r36}" -> "VarNode{<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>[21@L272] new java.net.URL}.<java.net.URL: java.lang.String host>}" -> "VarNode{<java.net.URL: java.lang.String getHost()>/$r1}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>[21@L272] new java.net.URL}.<java.net.URL: java.lang.String host>}" -> "VarNode{<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>/$r24}" [color=red,style=dashed];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r3}" -> "VarNode{<java.lang.Integer: int parseInt(java.lang.String)>/r0}" [color=blue];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r3}" -> "VarNode{<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>/r2}" [color=blue];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r3}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r3}" -> "VarNode{<io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>/$r9}" [color=green3,style=dashed];
  "VarNode{<java.util.jar.Attributes: void read(java.util.jar.Manifest$FastInputStream,byte[])>/$r22}" -> "VarNode{<java.io.IOException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<org.fengfei.lanproxy.server.config.web.MimeType: java.lang.String parseSuffix(java.lang.String)>/$r3}" -> "VarNode{<java.lang.String: java.lang.String[] split(java.lang.String)>/%this}" [color=blue];
  "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r11}" -> "VarNode{<java.security.GeneralSecurityException: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.DisabledAlgorithmConstraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/r4}" -> "VarNode{<sun.security.util.DisabledAlgorithmConstraints$Constraints: void permits(java.lang.String,sun.security.util.ConstraintsParameters)>/r2}" [color=blue];
  "VarNode{<sun.security.x509.X509Key: java.security.PublicKey buildX509Key(sun.security.x509.AlgorithmId,sun.security.util.BitArray)>/$r24}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/%this}" [color=blue];
  "VarNode{<java.text.Format: java.lang.String format(java.lang.Object)>/$r5}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r41}" [color=blue,style=dashed];
  "VarNode{<java.text.Format: java.lang.String format(java.lang.Object)>/$r5}" -> "VarNode{<sun.security.provider.PolicyParser: java.lang.String match(java.lang.String)>/$r34}" [color=blue,style=dashed];
  "VarNode{<java.text.Format: java.lang.String format(java.lang.Object)>/$r5}" -> "VarNode{<sun.security.provider.PolicyParser: void read(java.io.Reader)>/$r33}" [color=blue,style=dashed];
  "VarNode{<java.text.Format: java.lang.String format(java.lang.Object)>/$r5}" -> "VarNode{<java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>/$r3}" [color=blue,style=dashed];
  "VarNode{<java.text.Format: java.lang.String format(java.lang.Object)>/$r5}" -> "VarNode{<sun.security.provider.PolicyParser$DomainEntry: void add(sun.security.provider.PolicyParser$KeyStoreEntry)>/$r8}" [color=blue,style=dashed];
  "VarNode{<java.text.Format: java.lang.String format(java.lang.Object)>/$r5}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r26}" [color=blue,style=dashed];
  "VarNode{<java.text.Format: java.lang.String format(java.lang.Object)>/$r5}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/$r36}" [color=blue,style=dashed];
  "VarNode{<java.text.Format: java.lang.String format(java.lang.Object)>/$r5}" -> "VarNode{<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>/r40}" [color=blue,style=dashed];
  "VarNode{<java.text.Format: java.lang.String format(java.lang.Object)>/$r5}" -> "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String)>/$r12}" [color=blue,style=dashed];
  "VarNode{<java.text.Format: java.lang.String format(java.lang.Object)>/$r5}" -> "VarNode{<sun.security.provider.PolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>/$r16}" [color=blue,style=dashed];
  "VarNode{<java.text.Format: java.lang.String format(java.lang.Object)>/$r5}" -> "VarNode{<sun.security.provider.PolicyFile: void expandPermissionName(sun.security.provider.PolicyParser$PermissionEntry,java.security.KeyStore)>/$r47}" [color=blue,style=dashed];
  "InstanceFieldNode{NewObj{<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier algOID(java.lang.String)>[9@L494] new sun.security.util.ObjectIdentifier}.<sun.security.util.ObjectIdentifier: java.lang.String stringForm>}" -> "VarNode{<sun.security.util.ObjectIdentifier: java.lang.String toString()>/r11}" [color=red,style=dashed];
  "VarNode{<java.net.InetAddress$InetAddressHolder: java.lang.String getHostName()>/$r1}" -> "VarNode{<java.net.InetAddress: java.lang.String getHostName(boolean)>/$r4}" [color=blue,style=dashed];
  "VarNode{<java.net.InetAddress$InetAddressHolder: java.lang.String getHostName()>/$r1}" -> "VarNode{<java.net.InetAddress: java.lang.String toString()>/$r2}" [color=blue,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r25}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r25}" -> "VarNode{<java.util.Locale: java.lang.String toString()>/$r23}" [color=green3,style=dashed];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r14}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<java.util.Locale: java.lang.String toString()>/$r14}" -> "VarNode{<java.util.Locale: java.lang.String toString()>/$r12}" [color=green3,style=dashed];
  "VarNode{<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r5}" -> "VarNode{<java.util.WeakHashMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue,int,java.util.WeakHashMap$Entry)>/r3}" [color=blue];
  "VarNode{<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>/r5}" -> "InstanceFieldNode{NewObj{<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>[24@L464] new java.util.WeakHashMap$Entry}.<java.util.WeakHashMap$Entry: java.lang.Object value>}" [color=red];
  "VarNode{<java.security.CodeSigner: java.lang.String toString()>/$r14}" -> "VarNode{<java.security.CodeSigner: java.lang.String toString()>/$r15}" [color=green3,style=dashed];
  "VarNode{<sun.text.normalizer.NormalizerBase$NFDMode: java.lang.String normalize(java.lang.String,int)>/r0}" -> "VarNode{<sun.text.normalizer.NormalizerBase: java.lang.String decompose(java.lang.String,boolean,int)>/r2}" [color=blue];
  "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry: java.lang.String getValue()>/$r2}" -> "VarNode{<io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry: java.lang.Object getValue()>/$r1}" [color=blue,style=dashed];
  "VarNode{<sun.util.cldr.CLDRLocaleProviderAdapter: java.util.Set createLanguageTagSet(java.lang.String)>/r2}" -> "VarNode{<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>/r1}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String negativePrefix>}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.Format$FieldDelegate)>/$r22}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String negativePrefix>}" -> "VarNode{<java.text.DecimalFormat: java.lang.String toPattern(boolean)>/$r2}" [color=red,style=dashed];
  "InstanceFieldNode{NewObj{<sun.util.locale.provider.NumberFormatProviderImpl: java.text.NumberFormat getInstance(java.util.Locale,int)>[14@L180] new java.text.DecimalFormat}.<java.text.DecimalFormat: java.lang.String negativePrefix>}" -> "VarNode{<java.text.DecimalFormat: java.lang.StringBuffer subformat(java.lang.StringBuffer,java.text.Format$FieldDelegate,boolean,boolean,int,int,int,int)>/$r63}" [color=red,style=dashed];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r42}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r42}" -> "VarNode{<sun.security.x509.X509CertInfo: java.lang.String toString()>/$r7}" [color=green3,style=dashed];
  "VarNode{<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>/r1}" -> "VarNode{<java.lang.LinkageError: void <init>(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.JarIndex: void read(java.io.InputStream)>/r10}" -> "VarNode{<sun.misc.JarIndex: void read(java.io.InputStream)>/r9}" [];
  "VarNode{<sun.misc.JarIndex: void read(java.io.InputStream)>/r10}" -> "VarNode{<sun.misc.JarIndex: void addMapping(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.misc.JarIndex: void read(java.io.InputStream)>/r10}" -> "VarNode{<java.util.Vector: boolean add(java.lang.Object)>/r2}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r37}" -> "VarNode{<sun.security.util.SignatureFileVerifier: boolean permittedCheck(java.lang.String,java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester)>/$r37}" -> "VarNode{<sun.security.util.SignatureFileVerifier: java.security.MessageDigest getDigest(java.lang.String)>/r2}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: java.lang.String getDN(java.lang.String,java.security.KeyStore)>/$r9}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "InstanceFieldNode{NewObj{<sun.util.resources.LocaleData: sun.util.resources.OpenListResourceBundle getSupplementary(java.lang.String,java.util.Locale)>[0@L173] new sun.util.resources.LocaleData$2}.<sun.util.resources.LocaleData$2: java.lang.String val$baseName>}" -> "VarNode{<sun.util.resources.LocaleData$2: sun.util.resources.OpenListResourceBundle run()>/$r1}" [color=red,style=dashed];
  "VarNode{<sun.security.util.ManifestEntryVerifier: java.security.CodeSigner[] verify(java.util.Hashtable,java.util.Hashtable)>/$r43}" -> "VarNode{<sun.security.util.Debug: void println(java.lang.String)>/r6}" [color=blue];
  "VarNode{<java.lang.Throwable$WrappedPrintWriter: void println(java.lang.Object)>/r1}" -> "VarNode{<java.io.PrintWriter: void println(java.lang.Object)>/r0}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r42}" -> "VarNode{<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>/r1}" [color=blue];
  "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r42}" -> "VarNode{<sun.security.provider.PolicyFile: void addGrantEntry(sun.security.provider.PolicyParser$GrantEntry,java.security.KeyStore,sun.security.provider.PolicyFile$PolicyInfo)>/$r41}" [color=green3,style=dashed];
  "VarNode{<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>/$r2}" -> "ArrayIndexNode{NewObj{<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>[7@L1102] newarray java.lang.String[$i0]}}" [color=red];
  "VarNode{<java.lang.Double: double parseDouble(java.lang.String)>/r0}" -> "VarNode{<sun.misc.FloatingDecimal: double parseDouble(java.lang.String)>/r0}" [color=blue];
}
