
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
   <head>
      <meta charset="UTF-8"/>
      <title>SpotBugs Report</title>
      <style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
				color: red;
				font-weight: bold;
		}
		.priority-2 {
				color: orange;
				font-weight: bold;
		}
		.priority-3 {
				color: green;
				font-weight: bold;
		}
		.priority-4 {
				color: blue;
				font-weight: bold;
		}
		</style>
      <script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
   </head>
   <body>
      <h1>
         <a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
      <h2>Project Information</h2>
      <p>Project: 
		</p>
      <p>SpotBugs version: 4.6.0</p>
      <p>Code analyzed:</p>
      <ul>
         <li>.\postSQL\pdjdbc-1.0-SNAPSHOT.jar</li>
      </ul>
      <p>
         <br/>
         <br/>
      </p>
      <h2>Metrics</h2>
      <p>134313 lines of code analyzed,
	in 3599 classes, 
	in 238 packages.</p>
      <table width="500" cellpadding="5" cellspacing="2">
         <tr class="tableheader">
            <th align="left">Metric</th>
            <th align="right">Total</th>
            <th align="right">Density*</th>
         </tr>
         <tr class="tablerow0">
            <td>High Priority Warnings</td>
            <td align="right">14</td>
            <td align="right">0.10</td>
         </tr>
         <tr class="tablerow1">
            <td>Medium Priority Warnings</td>
            <td align="right">138</td>
            <td align="right">1.03</td>
         </tr>
         <tr class="$totalClass">
            <td>
               <b>Total Warnings</b>
            </td>
            <td align="right">
               <b>152</b>
            </td>
            <td align="right">
               <b>1.13</b>
            </td>
         </tr>
      </table>
      <p>
         <i>(* Defects per Thousand lines of non-commenting source statements)</i>
      </p>
      <p>
         <br/>
         <br/>
      </p>
      <h2>Contents</h2>
      <ul>
         <li>
            <a href="#Warnings_SECURITY">Security Warnings</a>
         </li>
         <li>
            <a href="#Details">Details</a>
         </li>
      </ul>
      <h1>Summary</h1>
      <table width="500" cellpadding="5" cellspacing="2">
         <tr class="tableheader">
            <th align="left">Warning Type</th>
            <th align="right">Number</th>
         </tr>
         <tr class="tablerow0">
            <td>
               <a href="#Warnings_SECURITY">Security Warnings</a>
            </td>
            <td align="right">152</td>
         </tr>
         <tr class="tablerow1">
            <td>
               <b>Total</b>
            </td>
            <td align="right">
               <b>152</b>
            </td>
         </tr>
      </table>
      <h1>Warnings</h1>
      <p>Click on a warning row to see full context information.</p>
      <h2>
         <a name="Warnings_SECURITY">Security Warnings</a>
      </h2>
      <table class="warningtable" width="100%" cellspacing="0">
         <tr class="tableheader">
            <th align="left">Code</th>
            <th align="left">Warning</th>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e2128');">
            <td>
               <span class="priority-2">ERRMSG</span>
            </td>
            <td>Possible information exposure through an error message</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e2128" style="display: none;">
                  <a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
                  <br/>In class org.springframework.beans.factory.BeanCreationException<br/>In method org.springframework.beans.factory.BeanCreationException.printStackTrace(PrintStream)<br/>At BeanCreationException.java:[line 181]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2140');">
            <td>
               <span class="priority-2">ERRMSG</span>
            </td>
            <td>Possible information exposure through an error message</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2140" style="display: none;">
                  <a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
                  <br/>In class org.springframework.beans.factory.BeanCreationException<br/>In method org.springframework.beans.factory.BeanCreationException.printStackTrace(PrintWriter)<br/>At BeanCreationException.java:[line 194]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e3006');">
            <td>
               <span class="priority-2">ERRMSG</span>
            </td>
            <td>Possible information exposure through an error message</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e3006" style="display: none;">
                  <a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
                  <br/>In class org.springframework.mail.MailSendException<br/>In method org.springframework.mail.MailSendException.printStackTrace(PrintStream)<br/>At MailSendException.java:[line 178]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e3019');">
            <td>
               <span class="priority-2">ERRMSG</span>
            </td>
            <td>Possible information exposure through an error message</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e3019" style="display: none;">
                  <a href="#INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">Bug type INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE (click for details)</a>
                  <br/>In class org.springframework.mail.MailSendException<br/>In method org.springframework.mail.MailSendException.printStackTrace(PrintWriter)<br/>At MailSendException.java:[line 194]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e3121');">
            <td>
               <span class="priority-2">SCRIPTE</span>
            </td>
            <td>This use of javax/script/ScriptEngine.eval(Ljava/lang/String;)Ljava/lang/Object; can be vulnerable to code injection</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e3121" style="display: none;">
                  <a href="#SCRIPT_ENGINE_INJECTION">Bug type SCRIPT_ENGINE_INJECTION (click for details)</a>
                  <br/>In class org.springframework.scripting.support.StandardScriptEvaluator<br/>In method org.springframework.scripting.support.StandardScriptEvaluator.evaluate(ScriptSource, Map)<br/>At StandardScriptEvaluator.java:[line 146]<br/>Sink method javax/script/ScriptEngine.eval(Ljava/lang/String;)Ljava/lang/Object;<br/>Sink parameter 0<br/>Unknown source org/springframework/scripting/ScriptSource.getScriptAsString()Ljava/lang/String;</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e3157');">
            <td>
               <span class="priority-2">SCRIPTE</span>
            </td>
            <td>This use of javax/script/ScriptEngine.eval(Ljava/lang/String;)Ljava/lang/Object; can be vulnerable to code injection</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e3157" style="display: none;">
                  <a href="#SCRIPT_ENGINE_INJECTION">Bug type SCRIPT_ENGINE_INJECTION (click for details)</a>
                  <br/>In class org.springframework.scripting.support.StandardScriptFactory<br/>In method org.springframework.scripting.support.StandardScriptFactory.evaluateScript(ScriptSource)<br/>At StandardScriptFactory.java:[line 199]<br/>Sink method javax/script/ScriptEngine.eval(Ljava/lang/String;)Ljava/lang/Object;<br/>Sink parameter 0<br/>Unknown source org/springframework/scripting/ScriptSource.getScriptAsString()Ljava/lang/String;</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e19');">
            <td>
               <span class="priority-2">SECCI</span>
            </td>
            <td>This usage of java/util/logging/Logger.addHandler(Ljava/util/logging/Handler;)V can be vulnerable to Command Injection</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e19" style="display: none;">
                  <a href="#COMMAND_INJECTION">Bug type COMMAND_INJECTION (click for details)</a>
                  <br/>In class org.postgresql.Driver<br/>In method org.postgresql.Driver.setupLoggerFromProperties(Properties)<br/>At Driver.java:[line 358]<br/>Sink method java/util/logging/Logger.addHandler(Ljava/util/logging/Handler;)V<br/>Sink parameter 0<br/>Unknown source java/util/logging/StreamHandler.&lt;init&gt;(Ljava/io/OutputStream;Ljava/util/logging/Formatter;)V<br/>Unknown source java/util/logging/ConsoleHandler.&lt;init&gt;()V<br/>Unknown source java/util/logging/FileHandler.&lt;init&gt;(Ljava/lang/String;)V<br/>At Driver.java:[line 332]<br/>At Driver.java:[line 345]<br/>At Driver.java:[line 347]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e3103');">
            <td>
               <span class="priority-2">SECCI</span>
            </td>
            <td>This usage of javax/script/ScriptEngine.eval(Ljava/lang/String;)Ljava/lang/Object; can be vulnerable to Command Injection</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e3103" style="display: none;">
                  <a href="#COMMAND_INJECTION">Bug type COMMAND_INJECTION (click for details)</a>
                  <br/>In class org.springframework.scripting.support.StandardScriptEvaluator<br/>In method org.springframework.scripting.support.StandardScriptEvaluator.evaluate(ScriptSource, Map)<br/>At StandardScriptEvaluator.java:[line 146]<br/>Sink method javax/script/ScriptEngine.eval(Ljava/lang/String;)Ljava/lang/Object;<br/>Sink parameter 0<br/>Unknown source org/springframework/scripting/ScriptSource.getScriptAsString()Ljava/lang/String;</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e3139');">
            <td>
               <span class="priority-2">SECCI</span>
            </td>
            <td>This usage of javax/script/ScriptEngine.eval(Ljava/lang/String;)Ljava/lang/Object; can be vulnerable to Command Injection</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e3139" style="display: none;">
                  <a href="#COMMAND_INJECTION">Bug type COMMAND_INJECTION (click for details)</a>
                  <br/>In class org.springframework.scripting.support.StandardScriptFactory<br/>In method org.springframework.scripting.support.StandardScriptFactory.evaluateScript(ScriptSource)<br/>At StandardScriptFactory.java:[line 199]<br/>Sink method javax/script/ScriptEngine.eval(Ljava/lang/String;)Ljava/lang/Object;<br/>Sink parameter 0<br/>Unknown source org/springframework/scripting/ScriptSource.getScriptAsString()Ljava/lang/String;</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e1082');">
            <td>
               <span class="priority-2">SECCRLFLOG</span>
            </td>
            <td>This use of java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;[Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e1082" style="display: none;">
                  <a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgResultSet<br/>In method org.postgresql.jdbc.PgResultSet.isUpdateable()<br/>At PgResultSet.java:[line 1666]<br/>Sink method java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;[Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source org/postgresql/util/internal/Nullness.castNonNull(Ljava/lang/Object;)Ljava/lang/Object;<br/>Tainted source java/sql/ResultSet.getString(I)Ljava/lang/String;<br/>Unknown source org/postgresql/util/internal/Nullness.castNonNull(Ljava/lang/Object;)Ljava/lang/Object; parameter 0<br/>At PgResultSet.java:[line 1660]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1106');">
            <td>
               <span class="priority-2">SECCRLFLOG</span>
            </td>
            <td>This use of java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;[Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1106" style="display: none;">
                  <a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgResultSet<br/>In method org.postgresql.jdbc.PgResultSet.isUpdateable()<br/>At PgResultSet.java:[line 1692]<br/>Sink method java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;[Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source org/postgresql/util/internal/Nullness.castNonNull(Ljava/lang/Object;)Ljava/lang/Object;<br/>Tainted source java/sql/ResultSet.getString(I)Ljava/lang/String;<br/>Unknown source org/postgresql/util/internal/Nullness.castNonNull(Ljava/lang/Object;)Ljava/lang/Object; parameter 0<br/>At PgResultSet.java:[line 1660]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2196');">
            <td>
               <span class="priority-2">SECCRLFLOG</span>
            </td>
            <td>This use of org/apache/commons/logging/Log.trace(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2196" style="display: none;">
                  <a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
                  <br/>In class org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver<br/>In method org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver.getHandlerMappings()<br/>At DefaultNamespaceHandlerResolver.java:[line 166]<br/>Sink method org/apache/commons/logging/Log.trace(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source java/util/Properties.load(Ljava/io/InputStream;)V<br/>Tainted source java/util/Properties.loadFromXML(Ljava/io/InputStream;)V<br/>Tainted source org/springframework/core/io/support/PropertiesLoaderUtils.loadAllProperties(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljava/util/Properties;<br/>At DefaultNamespaceHandlerResolver.java:[line 164]<br/>At DefaultNamespaceHandlerResolver.java:[line 166]<br/>At PropertiesLoaderUtils.java:[line 200]<br/>At PropertiesLoaderUtils.java:[line 203]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e2227');">
            <td>
               <span class="priority-2">SECCRLFLOG</span>
            </td>
            <td>This use of org/apache/commons/logging/Log.trace(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e2227" style="display: none;">
                  <a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
                  <br/>In class org.springframework.beans.factory.xml.PluggableSchemaResolver<br/>In method org.springframework.beans.factory.xml.PluggableSchemaResolver.getSchemaMappings()<br/>At PluggableSchemaResolver.java:[line 160]<br/>Sink method org/apache/commons/logging/Log.trace(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source java/util/Properties.load(Ljava/io/InputStream;)V<br/>Tainted source java/util/Properties.loadFromXML(Ljava/io/InputStream;)V<br/>Tainted source org/springframework/core/io/support/PropertiesLoaderUtils.loadAllProperties(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljava/util/Properties;<br/>At PluggableSchemaResolver.java:[line 158]<br/>At PluggableSchemaResolver.java:[line 160]<br/>At PropertiesLoaderUtils.java:[line 200]<br/>At PropertiesLoaderUtils.java:[line 203]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2259');">
            <td>
               <span class="priority-2">SECCRLFLOG</span>
            </td>
            <td>This use of org/apache/commons/logging/Log.trace(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2259" style="display: none;">
                  <a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
                  <br/>In class org.springframework.beans.factory.xml.PluggableSchemaResolver<br/>In method org.springframework.beans.factory.xml.PluggableSchemaResolver.resolveEntity(String, String)<br/>At PluggableSchemaResolver.java:[line 128]<br/>Sink method org/apache/commons/logging/Log.trace(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Tainted source java/util/Properties.load(Ljava/io/InputStream;)V<br/>Unknown source java/util/concurrent/ConcurrentHashMap.&lt;init&gt;(I)V<br/>Unknown source org/springframework/util/CollectionUtils.mergePropertiesIntoMap(Ljava/util/Properties;Ljava/util/Map;)V parameter 1<br/>Unknown source org/springframework/util/CollectionUtils.mergePropertiesIntoMap(Ljava/util/Properties;Ljava/util/Map;)V parameter 0<br/>Unknown source org/springframework/beans/factory/xml/PluggableSchemaResolver.resolveEntity(Ljava/lang/String;Ljava/lang/String;)Lorg/xml/sax/InputSource; parameter 0<br/>Tainted source org/springframework/beans/factory/xml/PluggableSchemaResolver.getSchemaMappings()Ljava/util/Map;<br/>Unknown source java/util/Map.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;<br/>Unknown source java/util/Properties.get(Ljava/lang/Object;)Ljava/lang/Object;<br/>Tainted source java/util/Map.get(Ljava/lang/Object;)Ljava/lang/Object;<br/>Unknown source java/util/Properties.getProperty(Ljava/lang/String;)Ljava/lang/String;<br/>Tainted source java/util/Properties.loadFromXML(Ljava/io/InputStream;)V<br/>Tainted source org/springframework/core/io/support/PropertiesLoaderUtils.loadAllProperties(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljava/util/Properties;<br/>Unknown source java/util/Properties.propertyNames()Ljava/util/Enumeration;<br/>Unknown source java/util/Enumeration.nextElement()Ljava/lang/Object;<br/>Unknown source org/springframework/beans/factory/xml/PluggableSchemaResolver.schemaMappings<br/>At PluggableSchemaResolver.java:[line 116]<br/>At PluggableSchemaResolver.java:[line 119]<br/>At PluggableSchemaResolver.java:[line 128]<br/>At PluggableSchemaResolver.java:[line 148]<br/>At PluggableSchemaResolver.java:[line 151]<br/>At PluggableSchemaResolver.java:[line 158]<br/>At PluggableSchemaResolver.java:[line 162]<br/>At PropertiesLoaderUtils.java:[line 200]<br/>At PropertiesLoaderUtils.java:[line 203]<br/>At CollectionUtils.java:[line 148]<br/>At CollectionUtils.java:[line 149]<br/>At CollectionUtils.java:[line 150]<br/>At CollectionUtils.java:[line 153]<br/>At CollectionUtils.java:[line 155]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e2119');">
            <td>
               <span class="priority-2">SECDESGAD</span>
            </td>
            <td>This class could make application using serialization vulnerable</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e2119" style="display: none;">
                  <a href="#DESERIALIZATION_GADGET">Bug type DESERIALIZATION_GADGET (click for details)</a>
                  <br/>In class org.springframework.aop.framework.JdkDynamicAopProxy<br/>At JdkDynamicAopProxy.java:[lines 81-286]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2152');">
            <td>
               <span class="priority-2">SECDESGAD</span>
            </td>
            <td>This class could make application using serialization vulnerable</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2152" style="display: none;">
                  <a href="#DESERIALIZATION_GADGET">Bug type DESERIALIZATION_GADGET (click for details)</a>
                  <br/>In class org.springframework.beans.factory.config.DependencyDescriptor<br/>At DependencyDescriptor.java:[lines 72-465]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e2173');">
            <td>
               <span class="priority-2">SECDESGAD</span>
            </td>
            <td>This class could make application using serialization vulnerable</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e2173" style="display: none;">
                  <a href="#DESERIALIZATION_GADGET">Bug type DESERIALIZATION_GADGET (click for details)</a>
                  <br/>In class org.springframework.beans.factory.support.AutowireUtils$ObjectFactoryDelegatingInvocationHandler<br/>At AutowireUtils.java:[lines 275-295]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2669');">
            <td>
               <span class="priority-2">SECDESGAD</span>
            </td>
            <td>This class could make application using serialization vulnerable</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2669" style="display: none;">
                  <a href="#DESERIALIZATION_GADGET">Bug type DESERIALIZATION_GADGET (click for details)</a>
                  <br/>In class org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider<br/>At SerializableTypeWrapper.java:[lines 337-375]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e2678');">
            <td>
               <span class="priority-2">SECDESGAD</span>
            </td>
            <td>This class could make application using serialization vulnerable</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e2678" style="display: none;">
                  <a href="#DESERIALIZATION_GADGET">Bug type DESERIALIZATION_GADGET (click for details)</a>
                  <br/>In class org.springframework.core.SerializableTypeWrapper$MethodParameterTypeProvider<br/>At SerializableTypeWrapper.java:[lines 281-314]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2687');">
            <td>
               <span class="priority-2">SECDESGAD</span>
            </td>
            <td>This class could make application using serialization vulnerable</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2687" style="display: none;">
                  <a href="#DESERIALIZATION_GADGET">Bug type DESERIALIZATION_GADGET (click for details)</a>
                  <br/>In class org.springframework.core.SerializableTypeWrapper$TypeProxyInvocationHandler<br/>At SerializableTypeWrapper.java:[lines 182-218]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e3176');">
            <td>
               <span class="priority-2">SECFREEM</span>
            </td>
            <td>Potential template injection with Freemarker template</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e3176" style="display: none;">
                  <a href="#TEMPLATE_INJECTION_FREEMARKER">Bug type TEMPLATE_INJECTION_FREEMARKER (click for details)</a>
                  <br/>In class org.springframework.ui.freemarker.FreeMarkerTemplateUtils<br/>In method org.springframework.ui.freemarker.FreeMarkerTemplateUtils.processTemplateIntoString(Template, Object)<br/>At FreeMarkerTemplateUtils.java:[line 50]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2161');">
            <td>
               <span class="priority-2">SECGROSH</span>
            </td>
            <td>Potential code injection when using GroovyShell</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2161" style="display: none;">
                  <a href="#GROOVY_SHELL">Bug type GROOVY_SHELL (click for details)</a>
                  <br/>In class org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader<br/>In method org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader.loadBeanDefinitions(EncodedResource)<br/>At GroovyBeanDefinitionReader.java:[line 270]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e3055');">
            <td>
               <span class="priority-2">SECGROSH</span>
            </td>
            <td>Potential code injection when using GroovyShell</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e3055" style="display: none;">
                  <a href="#GROOVY_SHELL">Bug type GROOVY_SHELL (click for details)</a>
                  <br/>In class org.springframework.scripting.groovy.GroovyScriptEvaluator<br/>In method org.springframework.scripting.groovy.GroovyScriptEvaluator.evaluate(ScriptSource, Map)<br/>At GroovyScriptEvaluator.java:[line 115]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e3067');">
            <td>
               <span class="priority-2">SECGROSH</span>
            </td>
            <td>Potential code injection when using GroovyShell</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e3067" style="display: none;">
                  <a href="#GROOVY_SHELL">Bug type GROOVY_SHELL (click for details)</a>
                  <br/>In class org.springframework.scripting.groovy.GroovyScriptEvaluator<br/>In method org.springframework.scripting.groovy.GroovyScriptEvaluator.evaluate(ScriptSource, Map)<br/>At GroovyScriptEvaluator.java:[line 118]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e3079');">
            <td>
               <span class="priority-2">SECGROSH</span>
            </td>
            <td>Potential code injection when using GroovyShell</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e3079" style="display: none;">
                  <a href="#GROOVY_SHELL">Bug type GROOVY_SHELL (click for details)</a>
                  <br/>In class org.springframework.scripting.groovy.GroovyScriptFactory<br/>In method org.springframework.scripting.groovy.GroovyScriptFactory.getScriptedObject(ScriptSource, Class[])<br/>At GroovyScriptFactory.java:[line 242]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e3091');">
            <td>
               <span class="priority-2">SECGROSH</span>
            </td>
            <td>Potential code injection when using GroovyShell</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e3091" style="display: none;">
                  <a href="#GROOVY_SHELL">Bug type GROOVY_SHELL (click for details)</a>
                  <br/>In class org.springframework.scripting.groovy.GroovyScriptFactory<br/>In method org.springframework.scripting.groovy.GroovyScriptFactory.getScriptedObjectType(ScriptSource)<br/>At GroovyScriptFactory.java:[line 278]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1784');">
            <td>
               <span class="priority-2">SECLDAPI</span>
            </td>
            <td>This use of javax/naming/ldap/LdapName.&lt;init&gt;(Ljava/lang/String;)V can be vulnerable to LDAP injection</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1784" style="display: none;">
                  <a href="#LDAP_INJECTION">Bug type LDAP_INJECTION (click for details)</a>
                  <br/>In class org.postgresql.ssl.PGjdbcHostnameVerifier<br/>In method org.postgresql.ssl.PGjdbcHostnameVerifier.verify(String, SSLSession)<br/>At PGjdbcHostnameVerifier.java:[line 183]<br/>Sink method javax/naming/ldap/LdapName.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source javax/security/auth/x500/X500Principal.getName(Ljava/lang/String;)Ljava/lang/String;</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2986');">
            <td>
               <span class="priority-2">SECLDAPI</span>
            </td>
            <td>This use of javax/naming/Context.lookup(Ljava/lang/String;)Ljava/lang/Object; can be vulnerable to LDAP injection</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2986" style="display: none;">
                  <a href="#LDAP_INJECTION">Bug type LDAP_INJECTION (click for details)</a>
                  <br/>In class org.springframework.jndi.JndiTemplate<br/>In method org.springframework.jndi.JndiTemplate.lambda$lookup$0(String, Context)<br/>At JndiTemplate.java:[line 157]<br/>Sink method javax/naming/Context.lookup(Ljava/lang/String;)Ljava/lang/Object;<br/>Sink parameter 0<br/>Unknown source org/springframework/jndi/JndiTemplate.lambda$lookup$0(Ljava/lang/String;Ljavax/naming/Context;)Ljava/lang/Object; parameter 1<br/>Method usage not detected</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1856');">
            <td>
               <span class="priority-1">SECMD5</span>
            </td>
            <td>This API MD5 (MDX) is not a recommended cryptographic hash function</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1856" style="display: none;">
                  <a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
                  <br/>In class org.postgresql.util.MD5Digest<br/>In method org.postgresql.util.MD5Digest.encode(byte[], byte[], byte[])<br/>At MD5Digest.java:[line 33]<br/>Value MD5</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e171');">
            <td>
               <span class="priority-1">SECOBDES</span>
            </td>
            <td>Object deserialization is used in org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e171" style="display: none;">
                  <a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
                  <br/>In class org.postgresql.ds.common.BaseDataSource<br/>In method org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)<br/>At BaseDataSource.java:[line 1460]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e183');">
            <td>
               <span class="priority-1">SECOBDES</span>
            </td>
            <td>Object deserialization is used in org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e183" style="display: none;">
                  <a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
                  <br/>In class org.postgresql.ds.common.BaseDataSource<br/>In method org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)<br/>At BaseDataSource.java:[line 1461]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e195');">
            <td>
               <span class="priority-1">SECOBDES</span>
            </td>
            <td>Object deserialization is used in org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e195" style="display: none;">
                  <a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
                  <br/>In class org.postgresql.ds.common.BaseDataSource<br/>In method org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)<br/>At BaseDataSource.java:[line 1462]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e207');">
            <td>
               <span class="priority-1">SECOBDES</span>
            </td>
            <td>Object deserialization is used in org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e207" style="display: none;">
                  <a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
                  <br/>In class org.postgresql.ds.common.BaseDataSource<br/>In method org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)<br/>At BaseDataSource.java:[line 1463]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e219');">
            <td>
               <span class="priority-1">SECOBDES</span>
            </td>
            <td>Object deserialization is used in org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e219" style="display: none;">
                  <a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
                  <br/>In class org.postgresql.ds.common.BaseDataSource<br/>In method org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)<br/>At BaseDataSource.java:[line 1464]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e232');">
            <td>
               <span class="priority-1">SECOBDES</span>
            </td>
            <td>Object deserialization is used in org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e232" style="display: none;">
                  <a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
                  <br/>In class org.postgresql.ds.common.BaseDataSource<br/>In method org.postgresql.ds.common.BaseDataSource.readBaseObject(ObjectInputStream)<br/>At BaseDataSource.java:[line 1466]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2954');">
            <td>
               <span class="priority-1">SECOBDES</span>
            </td>
            <td>Object deserialization is used in org.springframework.core.serializer.DefaultDeserializer.deserialize(InputStream)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2954" style="display: none;">
                  <a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
                  <br/>In class org.springframework.core.serializer.DefaultDeserializer<br/>In method org.springframework.core.serializer.DefaultDeserializer.deserialize(InputStream)<br/>At DefaultDeserializer.java:[line 71]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e3031');">
            <td>
               <span class="priority-1">SECOBDES</span>
            </td>
            <td>Object deserialization is used in org.springframework.objenesis.instantiator.basic.ObjectInputStreamInstantiator.newInstance()</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e3031" style="display: none;">
                  <a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
                  <br/>In class org.springframework.objenesis.instantiator.basic.ObjectInputStreamInstantiator<br/>In method org.springframework.objenesis.instantiator.basic.ObjectInputStreamInstantiator.newInstance()<br/>At ObjectInputStreamInstantiator.java:[line 176]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e3043');">
            <td>
               <span class="priority-1">SECOBDES</span>
            </td>
            <td>Object deserialization is used in org.springframework.remoting.rmi.RemoteInvocationSerializingExporter.doReadRemoteInvocation(ObjectInputStream)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e3043" style="display: none;">
                  <a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
                  <br/>In class org.springframework.remoting.rmi.RemoteInvocationSerializingExporter<br/>In method org.springframework.remoting.rmi.RemoteInvocationSerializingExporter.doReadRemoteInvocation(ObjectInputStream)<br/>At RemoteInvocationSerializingExporter.java:[line 146]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e3420');">
            <td>
               <span class="priority-1">SECOBDES</span>
            </td>
            <td>Object deserialization is used in org.springframework.util.SerializationUtils.deserialize(byte[])</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e3420" style="display: none;">
                  <a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
                  <br/>In class org.springframework.util.SerializationUtils<br/>In method org.springframework.util.SerializationUtils.deserialize(byte[])<br/>At SerializationUtils.java:[line 82]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e3188');">
            <td>
               <span class="priority-2">SECPR</span>
            </td>
            <td>This random generator (java.util.Random) is predictable</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e3188" style="display: none;">
                  <a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
                  <br/>In class org.springframework.util.AlternativeJdkIdGenerator<br/>In method new org.springframework.util.AlternativeJdkIdGenerator()<br/>At AlternativeJdkIdGenerator.java:[line 43]<br/>Value java.util.Random</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e3432');">
            <td>
               <span class="priority-2">SECPR</span>
            </td>
            <td>This random generator (java.util.Random) is predictable</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e3432" style="display: none;">
                  <a href="#PREDICTABLE_RANDOM">Bug type PREDICTABLE_RANDOM (click for details)</a>
                  <br/>In class org.springframework.util.SocketUtils<br/>In method org.springframework.util.SocketUtils.&lt;static initializer for SocketUtils&gt;()<br/>At SocketUtils.java:[line 69]<br/>Value java.util.Random</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e1657');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e1657" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.postgresql.ssl.LazyKeyManager<br/>In method org.postgresql.ssl.LazyKeyManager.getCertificateChain(String)<br/>At LazyKeyManager.java:[line 143]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/postgresql/ssl/LazyKeyManager.certfile<br/>At LazyKeyManager.java:[line 143]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1678');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/io/RandomAccessFile.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1678" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.postgresql.ssl.LazyKeyManager<br/>In method org.postgresql.ssl.LazyKeyManager.readFileFully(String)<br/>At LazyKeyManager.java:[line 182]<br/>Sink method java/io/RandomAccessFile.&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V<br/>Sink parameter 1<br/>Unknown source org/postgresql/ssl/LazyKeyManager.readFileFully(Ljava/lang/String;)[B parameter 0<br/>At LazyKeyManager.java:[line 205]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e1698');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e1698" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.postgresql.ssl.LibPQFactory<br/>In method new org.postgresql.ssl.LibPQFactory(Properties)<br/>At LibPQFactory.java:[line 147]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/postgresql/PGProperty.defaultValue<br/>Unknown source org/postgresql/PGProperty.get(Ljava/util/Properties;)Ljava/lang/String;<br/>Unknown source org/postgresql/PGProperty.get(Ljava/util/Properties;)Ljava/lang/String; parameter 0<br/>Unknown source java/util/Properties.getProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/postgresql/ssl/LibPQFactory.&lt;init&gt;(Ljava/util/Properties;)V parameter 0<br/>Method usage not detected<br/>At PGProperty.java:[line 830]<br/>At SocketFactoryFactory.java:[line 61]<br/>At ConnectionFactoryImpl.java:[line 151]<br/>At ConnectionFactoryImpl.java:[line 215]<br/>At ConnectionFactoryImpl.java:[line 224]<br/>At ConnectionFactoryImpl.java:[line 245]<br/>At ConnectionFactoryImpl.java:[line 546]<br/>At LibPQFactory.java:[line 141]<br/>At MakeSSL.java:[line 34]<br/>At LibPQFactory.java:[line 33]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1802');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1802" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.postgresql.ssl.PKCS12KeyManager<br/>In method org.postgresql.ssl.PKCS12KeyManager.loadKeyStore()<br/>At PKCS12KeyManager.java:[line 177]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/postgresql/ssl/PKCS12KeyManager.keyfile<br/>At PKCS12KeyManager.java:[line 177]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e1822');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e1822" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.postgresql.ssl.SingleCertValidatingFactory<br/>In method new org.postgresql.ssl.SingleCertValidatingFactory(String)<br/>At SingleCertValidatingFactory.java:[line 98]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/postgresql/ssl/SingleCertValidatingFactory.&lt;init&gt;(Ljava/lang/String;)V parameter 0<br/>Method usage not detected<br/>At SingleCertValidatingFactory.java:[line 97]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e2365');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e2365" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.springframework.beans.propertyeditors.FileEditor<br/>In method org.springframework.beans.propertyeditors.FileEditor.setAsText(String)<br/>At FileEditor.java:[line 89]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/beans/propertyeditors/FileEditor.setAsText(Ljava/lang/String;)V parameter 0<br/>Method usage not detected</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2385');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/nio/file/Paths.get(Ljava/net/URI;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2385" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.springframework.beans.propertyeditors.PathEditor<br/>In method org.springframework.beans.propertyeditors.PathEditor.setAsText(String)<br/>At PathEditor.java:[line 84]<br/>Sink method java/nio/file/Paths.get(Ljava/net/URI;)Ljava/nio/file/Path;<br/>Sink parameter 0<br/>Unknown source org/springframework/beans/propertyeditors/PathEditor.setAsText(Ljava/lang/String;)V parameter 0<br/>Unknown source java/net/URI.&lt;init&gt;(Ljava/lang/String;)V<br/>Method usage not detected<br/>At PathEditor.java:[line 80]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e2409');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e2409" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.springframework.beans.propertyeditors.PathEditor<br/>In method org.springframework.beans.propertyeditors.PathEditor.setAsText(String)<br/>At PathEditor.java:[line 105]<br/>Sink method java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;<br/>Sink parameter 1<br/>Unknown source org/springframework/beans/propertyeditors/PathEditor.setAsText(Ljava/lang/String;)V parameter 0<br/>Method usage not detected</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2429');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2429" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.springframework.cglib.core.DebuggingClassWriter$1<br/>In method org.springframework.cglib.core.DebuggingClassWriter$1.run()<br/>At DebuggingClassWriter.java:[line 82]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/cglib/core/DebuggingClassWriter.access$100()Ljava/lang/String;<br/>Unknown source org/springframework/cglib/core/DebuggingClassWriter.debugLocation<br/>Unknown source org/springframework/cglib/core/DebuggingClassWriter.className<br/>At DebuggingClassWriter.java:[line 26]<br/>At DebuggingClassWriter.java:[line 80]<br/>At DebuggingClassWriter.java:[line 82]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e2458');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e2458" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.springframework.cglib.core.DebuggingClassWriter$1<br/>In method org.springframework.cglib.core.DebuggingClassWriter$1.run()<br/>At DebuggingClassWriter.java:[line 84]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/cglib/core/DebuggingClassWriter.className<br/>At DebuggingClassWriter.java:[line 80]<br/>At DebuggingClassWriter.java:[line 84]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2480');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2480" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.springframework.cglib.core.DebuggingClassWriter$1<br/>In method org.springframework.cglib.core.DebuggingClassWriter$1.run()<br/>At DebuggingClassWriter.java:[line 84]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/cglib/core/DebuggingClassWriter.access$100()Ljava/lang/String;<br/>Unknown source org/springframework/cglib/core/DebuggingClassWriter.debugLocation<br/>At DebuggingClassWriter.java:[line 26]<br/>At DebuggingClassWriter.java:[line 84]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e2504');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e2504" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.springframework.cglib.core.DebuggingClassWriter$1<br/>In method org.springframework.cglib.core.DebuggingClassWriter$1.run()<br/>At DebuggingClassWriter.java:[line 93]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/cglib/core/DebuggingClassWriter.className<br/>At DebuggingClassWriter.java:[line 80]<br/>At DebuggingClassWriter.java:[line 84]<br/>At DebuggingClassWriter.java:[line 93]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2528');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2528" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.springframework.cglib.core.DebuggingClassWriter$1<br/>In method org.springframework.cglib.core.DebuggingClassWriter$1.run()<br/>At DebuggingClassWriter.java:[line 93]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/cglib/core/DebuggingClassWriter.access$100()Ljava/lang/String;<br/>Unknown source org/springframework/cglib/core/DebuggingClassWriter.debugLocation<br/>At DebuggingClassWriter.java:[line 26]<br/>At DebuggingClassWriter.java:[line 93]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e2552');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e2552" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.springframework.cglib.transform.AbstractProcessTask<br/>In method org.springframework.cglib.transform.AbstractProcessTask.getFiles()<br/>At AbstractProcessTask.java:[line 42]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/tools/ant/DirectoryScanner.getIncludedFiles()[Ljava/lang/String;</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2571');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/io/File.createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2571" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.springframework.cglib.transform.AbstractTransformTask<br/>In method org.springframework.cglib.transform.AbstractTransformTask.processJarFile(File)<br/>At AbstractTransformTask.java:[line 135]<br/>Sink method java/io/File.createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;<br/>Sink parameter 0<br/>Unknown source java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>At AbstractTransformTask.java:[line 136]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e2591');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e2591" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.springframework.cglib.transform.AbstractTransformTask<br/>In method org.springframework.cglib.transform.AbstractTransformTask.processJarFile(File)<br/>At AbstractTransformTask.java:[line 136]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/io/File.getParent()Ljava/lang/String;</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2609');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2609" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.springframework.cglib.transform.AbstractTransformTask<br/>In method org.springframework.cglib.transform.AbstractTransformTask.processJarFile(File)<br/>At AbstractTransformTask.java:[line 197]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/io/File.getAbsolutePath()Ljava/lang/String;</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e2771');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e2771" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.springframework.core.io.FileSystemResource<br/>In method new org.springframework.core.io.FileSystemResource(String)<br/>At FileSystemResource.java:[line 82]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/core/io/FileSystemResource.&lt;init&gt;(Ljava/lang/String;)V parameter 0<br/>Method usage not detected<br/>At FileSystemXmlApplicationContext.java:[line 159]<br/>At FileSystemXmlApplicationContext.java:[line 161]<br/>At FileSystemResource.java:[line 319]<br/>At FileSystemResource.java:[line 320]<br/>At FileSystemResourceLoader.java:[line 52]<br/>At FileSystemResourceLoader.java:[line 54]<br/>At FileSystemResourceLoader.java:[line 65]<br/>At StringUtils.java:[line 663]<br/>At StringUtils.java:[line 665]<br/>At StringUtils.java:[line 667]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2812');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2812" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.springframework.core.io.PathResource<br/>In method new org.springframework.core.io.PathResource(String)<br/>At PathResource.java:[line 85]<br/>Sink method java/nio/file/Paths.get(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;<br/>Sink parameter 1<br/>Unknown source org/springframework/core/io/PathResource.&lt;init&gt;(Ljava/lang/String;)V parameter 0<br/>Method usage not detected</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e2832');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/nio/file/Paths.get(Ljava/net/URI;)Ljava/nio/file/Path;) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e2832" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.springframework.core.io.PathResource<br/>In method new org.springframework.core.io.PathResource(URI)<br/>At PathResource.java:[line 98]<br/>Sink method java/nio/file/Paths.get(Ljava/net/URI;)Ljava/nio/file/Path;<br/>Sink parameter 0<br/>Unknown source org/springframework/core/io/PathResource.&lt;init&gt;(Ljava/net/URI;)V parameter 0<br/>Method usage not detected</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2872');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2872" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.springframework.core.io.support.PathMatchingResourcePatternResolver<br/>In method org.springframework.core.io.support.PathMatchingResourcePatternResolver.addClassPathManifestEntries(Set)<br/>At PathMatchingResourcePatternResolver.java:[line 429]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/util/StringUtils.deleteAny(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/springframework/util/StringUtils.toStringArray(Ljava/util/Collection;)[Ljava/lang/String;<br/>Unknown source org/springframework/util/StringUtils.delimitedListToStringArray(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String; parameter 2<br/>Unknown source org/springframework/util/StringUtils.delimitedListToStringArray(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;<br/>Unknown source java/util/Collection.toArray([Ljava/lang/Object;)[Ljava/lang/Object;<br/>Unknown source org/springframework/util/StringUtils.EMPTY_STRING_ARRAY<br/>Unknown source org/springframework/util/StringUtils.delimitedListToStringArray(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;<br/>Unknown source org/springframework/util/StringUtils.delimitedListToStringArray(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String; parameter 1<br/>Unknown source org/springframework/util/StringUtils.deleteAny(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 1<br/>Unknown source org/springframework/util/StringUtils.toStringArray(Ljava/util/Collection;)[Ljava/lang/String; parameter 0<br/>At PathMatchingResourcePatternResolver.java:[line 426]<br/>At StringUtils.java:[line 498]<br/>At StringUtils.java:[line 949]<br/>At StringUtils.java:[line 960]<br/>At StringUtils.java:[line 1202]<br/>At StringUtils.java:[line 1233]<br/>At StringUtils.java:[line 1255]<br/>At StringUtils.java:[line 1264]<br/>At StringUtils.java:[line 1271]<br/>At StringUtils.java:[line 1276]<br/>At StringUtils.java:[line 1279]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e3216');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e3216" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.springframework.util.ResourceUtils<br/>In method org.springframework.util.ResourceUtils.getFile(String)<br/>At ResourceUtils.java:[line 188]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/util/ResourceUtils.getFile(Ljava/lang/String;)Ljava/io/File; parameter 0<br/>Method usage not detected</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e3236');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e3236" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.springframework.util.ResourceUtils<br/>In method org.springframework.util.ResourceUtils.getFile(URI, String)<br/>At ResourceUtils.java:[line 261]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source java/net/URI.getSchemeSpecificPart()Ljava/lang/String;<br/>Unknown source org/springframework/util/ResourceUtils.getFile(Ljava/net/URI;Ljava/lang/String;)Ljava/io/File; parameter 1<br/>At AbstractFileResolvingResource.java:[line 212]<br/>At UrlResource.java:[line 238]<br/>At ResourceUtils.java:[line 240]<br/>At ResourceUtils.java:[line 261]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e3265');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e3265" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.springframework.util.ResourceUtils<br/>In method org.springframework.util.ResourceUtils.getFile(URL, String)<br/>At ResourceUtils.java:[line 222]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/util/StringUtils.replace(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 2<br/>Unknown source java/net/URL.toString()Ljava/lang/String;<br/>Unknown source org/springframework/util/ResourceUtils.getFile(Ljava/net/URL;Ljava/lang/String;)Ljava/io/File; parameter 1<br/>Unknown source org/springframework/util/ResourceUtils.toURI(Ljava/net/URL;)Ljava/net/URI;<br/>Unknown source org/springframework/util/ResourceUtils.toURI(Ljava/lang/String;)Ljava/net/URI; parameter 0<br/>Unknown source java/net/URI.&lt;init&gt;(Ljava/lang/String;)V<br/>Unknown source org/springframework/util/StringUtils.replace(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source java/net/URI.getSchemeSpecificPart()Ljava/lang/String;<br/>Unknown source org/springframework/util/ResourceUtils.toURI(Ljava/lang/String;)Ljava/net/URI;<br/>Unknown source org/springframework/util/ResourceUtils.toURI(Ljava/net/URL;)Ljava/net/URI; parameter 0<br/>Unknown source org/springframework/util/StringUtils.replace(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>At AbstractFileResolvingResource.java:[line 164]<br/>At AbstractFileResolvingResource.java:[line 175]<br/>At AbstractFileResolvingResource.java:[line 179]<br/>At ResourceUtils.java:[line 201]<br/>At ResourceUtils.java:[line 222]<br/>At ResourceUtils.java:[line 309]<br/>At ResourceUtils.java:[line 312]<br/>At ResourceUtils.java:[line 314]<br/>At ResourceUtils.java:[line 320]<br/>At ResourceUtils.java:[line 322]<br/>At ResourceUtils.java:[line 342]<br/>At ResourceUtils.java:[line 347]<br/>At ResourceUtils.java:[line 349]<br/>At ResourceUtils.java:[line 353]<br/>At ResourceUtils.java:[line 358]<br/>At ResourceUtils.java:[line 370]<br/>At ResourceUtils.java:[line 381]<br/>At StringUtils.java:[line 454]<br/>At StringUtils.java:[line 455]<br/>At StringUtils.java:[line 461]<br/>At StringUtils.java:[line 462]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e3348');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e3348" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.springframework.util.ResourceUtils<br/>In method org.springframework.util.ResourceUtils.getFile(URL, String)<br/>At ResourceUtils.java:[line 226]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/util/ResourceUtils.getFile(Ljava/net/URL;Ljava/lang/String;)Ljava/io/File; parameter 1<br/>Unknown source java/net/URL.getFile()Ljava/lang/String;<br/>At AbstractFileResolvingResource.java:[line 164]<br/>At AbstractFileResolvingResource.java:[line 175]<br/>At AbstractFileResolvingResource.java:[line 179]<br/>At ResourceUtils.java:[line 201]<br/>At ResourceUtils.java:[line 226]<br/>At ResourceUtils.java:[line 309]<br/>At ResourceUtils.java:[line 312]<br/>At ResourceUtils.java:[line 314]<br/>At ResourceUtils.java:[line 320]<br/>At ResourceUtils.java:[line 322]<br/>At ResourceUtils.java:[line 342]<br/>At ResourceUtils.java:[line 347]<br/>At ResourceUtils.java:[line 349]<br/>At ResourceUtils.java:[line 353]<br/>At ResourceUtils.java:[line 358]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e3400');">
            <td>
               <span class="priority-2">SECPTI</span>
            </td>
            <td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e3400" style="display: none;">
                  <a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
                  <br/>In class org.springframework.util.ResourceUtils<br/>In method org.springframework.util.ResourceUtils.getURL(String)<br/>At ResourceUtils.java:[line 149]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/springframework/util/ResourceUtils.getURL(Ljava/lang/String;)Ljava/net/URL; parameter 0<br/>Method usage not detected</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e5');">
            <td>
               <span class="priority-2">SECRD</span>
            </td>
            <td>The regular expression "%(\\d+\\$)?([-#+ 0,(\\&lt;]*)?(\\d+)?(\\.\\d+)?([tT])?([a-zA-Z%])" is vulnerable to a denial of service attack (ReDOS)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e5" style="display: none;">
                  <a href="#REDOS">Bug type REDOS (click for details)</a>
                  <br/>Value %(\\d+\\$)?([-#+ 0,(\\&lt;]*)?(\\d+)?(\\.\\d+)?([tT])?([a-zA-Z%])<br/>In class org.checkerframework.checker.formatter.FormatUtil<br/>In method org.checkerframework.checker.formatter.FormatUtil.&lt;static initializer for FormatUtil&gt;()<br/>At FormatUtil.java:[line 111]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e3202');">
            <td>
               <span class="priority-2">SECRD</span>
            </td>
            <td>The regular expression "\\?|\\*|\\{((?:\\{[^/]+?\\}|[^/{}]|\\\\[{}])+?)\\}" is vulnerable to a denial of service attack (ReDOS)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e3202" style="display: none;">
                  <a href="#REDOS">Bug type REDOS (click for details)</a>
                  <br/>Value \\?|\\*|\\{((?:\\{[^/]+?\\}|[^/{}]|\\\\[{}])+?)\\}<br/>In class org.springframework.util.AntPathMatcher$AntPathStringMatcher<br/>In method org.springframework.util.AntPathMatcher$AntPathStringMatcher.&lt;static initializer for AntPathStringMatcher&gt;()<br/>At AntPathMatcher.java:[line 645]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e244');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of org/postgresql/jdbc/PgConnection.prepareCall(Ljava/lang/String;II)Ljava/sql/CallableStatement; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e244" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgConnection<br/>In method org.postgresql.jdbc.PgConnection.prepareCall(String)<br/>At PgConnection.java:[line 437]<br/>Sink method org/postgresql/jdbc/PgConnection.prepareCall(Ljava/lang/String;II)Ljava/sql/CallableStatement;<br/>Sink parameter 2<br/>Unknown source org/postgresql/jdbc/PgConnection.prepareCall(Ljava/lang/String;)Ljava/sql/CallableStatement; parameter 0<br/>Method usage not detected</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e264');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of org/postgresql/jdbc/PgConnection.prepareCall(Ljava/lang/String;III)Ljava/sql/CallableStatement; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e264" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgConnection<br/>In method org.postgresql.jdbc.PgConnection.prepareCall(String, int, int)<br/>At PgConnection.java:[line 1750]<br/>Sink method org/postgresql/jdbc/PgConnection.prepareCall(Ljava/lang/String;III)Ljava/sql/CallableStatement;<br/>Sink parameter 3<br/>Unknown source org/postgresql/jdbc/PgConnection.prepareCall(Ljava/lang/String;II)Ljava/sql/CallableStatement; parameter 2<br/>Method usage not detected<br/>At PgConnection.java:[line 437]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e286');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of org/postgresql/jdbc/PgConnection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e286" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgConnection<br/>In method org.postgresql.jdbc.PgConnection.prepareStatement(String, int)<br/>At PgConnection.java:[line 1756]<br/>Sink method org/postgresql/jdbc/PgConnection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgConnection.prepareStatement(Ljava/lang/String;I)Ljava/sql/PreparedStatement; parameter 1<br/>Method usage not detected</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e306');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of org/postgresql/jdbc/PgConnection.prepareStatement(Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e306" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgConnection<br/>In method org.postgresql.jdbc.PgConnection.prepareStatement(String, int)<br/>At PgConnection.java:[line 1759]<br/>Sink method org/postgresql/jdbc/PgConnection.prepareStatement(Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 1<br/>Unknown source org/postgresql/jdbc/PgConnection.prepareStatement(Ljava/lang/String;I)Ljava/sql/PreparedStatement; parameter 1<br/>Method usage not detected</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e326');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of org/postgresql/jdbc/PgConnection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e326" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgConnection<br/>In method org.postgresql.jdbc.PgConnection.prepareStatement(String, int[])<br/>At PgConnection.java:[line 1765]<br/>Sink method org/postgresql/jdbc/PgConnection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgConnection.prepareStatement(Ljava/lang/String;[I)Ljava/sql/PreparedStatement; parameter 1<br/>Method usage not detected</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e346');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of org/postgresql/jdbc/PgConnection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e346" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgConnection<br/>In method org.postgresql.jdbc.PgConnection.prepareStatement(String, String[])<br/>At PgConnection.java:[line 1776]<br/>Sink method org/postgresql/jdbc/PgConnection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgConnection.prepareStatement(Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement; parameter 1<br/>Method usage not detected<br/>At PgConnection.java:[line 1759]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e368');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e368" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgConnection<br/>In method org.postgresql.jdbc.PgConnection.setSavepoint()<br/>At PgConnection.java:[line 1689]<br/>Sink method java/sql/Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PSQLSavepoint.getPGName()Ljava/lang/String;<br/>Unknown source org/postgresql/core/Utils.doAppendEscapedIdentifier(Ljava/lang/Appendable;Ljava/lang/String;)V parameter 1<br/>Unknown source java/lang/Appendable.append(C)Ljava/lang/Appendable;<br/>Unknown source org/postgresql/core/Utils.escapeIdentifier(Ljava/lang/StringBuilder;Ljava/lang/String;)Ljava/lang/StringBuilder;<br/>Unknown source org/postgresql/core/Utils.escapeIdentifier(Ljava/lang/StringBuilder;Ljava/lang/String;)Ljava/lang/StringBuilder; parameter 1<br/>At Utils.java:[line 135]<br/>At Utils.java:[line 144]<br/>At Utils.java:[line 146]<br/>At Utils.java:[line 149]<br/>At PSQLSavepoint.java:[line 81]<br/>At PgConnection.java:[line 1684]<br/>At PgConnection.java:[line 1689]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e409');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e409" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgConnection<br/>In method org.postgresql.jdbc.PgConnection.setSavepoint(String)<br/>At PgConnection.java:[line 1709]<br/>Sink method java/sql/Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PSQLSavepoint.getPGName()Ljava/lang/String;<br/>Unknown source org/postgresql/core/Utils.doAppendEscapedIdentifier(Ljava/lang/Appendable;Ljava/lang/String;)V parameter 1<br/>Unknown source java/lang/Appendable.append(C)Ljava/lang/Appendable;<br/>Unknown source org/postgresql/core/Utils.escapeIdentifier(Ljava/lang/StringBuilder;Ljava/lang/String;)Ljava/lang/StringBuilder;<br/>Unknown source org/postgresql/core/Utils.escapeIdentifier(Ljava/lang/StringBuilder;Ljava/lang/String;)Ljava/lang/StringBuilder; parameter 1<br/>At Utils.java:[line 135]<br/>At Utils.java:[line 144]<br/>At Utils.java:[line 146]<br/>At Utils.java:[line 149]<br/>At PSQLSavepoint.java:[line 81]<br/>At PgConnection.java:[line 1709]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e448');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e448" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgConnection<br/>In method org.postgresql.jdbc.PgConnection.setSchema(String)<br/>At PgConnection.java:[line 1588]<br/>Sink method java/sql/Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/postgresql/core/Utils.doAppendEscapedLiteral(Ljava/lang/Appendable;Ljava/lang/String;Z)V parameter 2<br/>Unknown source java/lang/Appendable.append(C)Ljava/lang/Appendable;<br/>Unknown source org/postgresql/core/Utils.escapeLiteral(Ljava/lang/StringBuilder;Ljava/lang/String;Z)Ljava/lang/StringBuilder; parameter 2<br/>At Utils.java:[line 78]<br/>At Utils.java:[line 80]<br/>At Utils.java:[line 95]<br/>At Utils.java:[line 97]<br/>At PgConnection.java:[line 1587]<br/>At PgConnection.java:[line 1588]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e483');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e483" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgDatabaseMetaData<br/>In method org.postgresql.jdbc.PgDatabaseMetaData.getBestRowIdentifier(String, String, String, int, boolean)<br/>At PgDatabaseMetaData.java:[line 2062]<br/>Sink method java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgDatabaseMetaData.escapeQuotes(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc/PgConnection.escapeString(Ljava/lang/String;)Ljava/lang/String;<br/>At PgDatabaseMetaData.java:[line 1030]<br/>At PgDatabaseMetaData.java:[line 1031]<br/>At PgDatabaseMetaData.java:[line 1032]<br/>At PgDatabaseMetaData.java:[line 2054]<br/>At PgDatabaseMetaData.java:[line 2057]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e515');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e515" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgDatabaseMetaData<br/>In method org.postgresql.jdbc.PgDatabaseMetaData.getColumnPrivileges(String, String, String, String)<br/>At PgDatabaseMetaData.java:[line 1741]<br/>Sink method java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgDatabaseMetaData.escapeQuotes(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc/PgConnection.escapeString(Ljava/lang/String;)Ljava/lang/String;<br/>At PgDatabaseMetaData.java:[line 1030]<br/>At PgDatabaseMetaData.java:[line 1031]<br/>At PgDatabaseMetaData.java:[line 1032]<br/>At PgDatabaseMetaData.java:[line 1730]<br/>At PgDatabaseMetaData.java:[line 1733]<br/>At PgDatabaseMetaData.java:[line 1736]<br/>At PgDatabaseMetaData.java:[line 1738]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e550');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e550" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgDatabaseMetaData<br/>In method org.postgresql.jdbc.PgDatabaseMetaData.getColumns(String, String, String, String)<br/>At PgDatabaseMetaData.java:[line 1577]<br/>Sink method java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgDatabaseMetaData.escapeQuotes(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc/PgConnection.escapeString(Ljava/lang/String;)Ljava/lang/String;<br/>At PgDatabaseMetaData.java:[line 1030]<br/>At PgDatabaseMetaData.java:[line 1031]<br/>At PgDatabaseMetaData.java:[line 1032]<br/>At PgDatabaseMetaData.java:[line 1563]<br/>At PgDatabaseMetaData.java:[line 1566]<br/>At PgDatabaseMetaData.java:[line 1569]<br/>At PgDatabaseMetaData.java:[line 1572]<br/>At PgDatabaseMetaData.java:[line 1574]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e587');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e587" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgDatabaseMetaData<br/>In method org.postgresql.jdbc.PgDatabaseMetaData.getFunctionColumns(String, String, String, String)<br/>At PgDatabaseMetaData.java:[line 2909]<br/>Sink method java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgDatabaseMetaData.escapeQuotes(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc/PgConnection.escapeString(Ljava/lang/String;)Ljava/lang/String;<br/>At PgDatabaseMetaData.java:[line 1030]<br/>At PgDatabaseMetaData.java:[line 1031]<br/>At PgDatabaseMetaData.java:[line 1032]<br/>At PgDatabaseMetaData.java:[line 2899]<br/>At PgDatabaseMetaData.java:[line 2902]<br/>At PgDatabaseMetaData.java:[line 2904]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e620');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e620" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgDatabaseMetaData<br/>In method org.postgresql.jdbc.PgDatabaseMetaData.getFunctions(String, String, String)<br/>At PgDatabaseMetaData.java:[line 2864]<br/>Sink method java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgDatabaseMetaData.escapeQuotes(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc/PgConnection.escapeString(Ljava/lang/String;)Ljava/lang/String;<br/>At PgDatabaseMetaData.java:[line 1030]<br/>At PgDatabaseMetaData.java:[line 1031]<br/>At PgDatabaseMetaData.java:[line 1032]<br/>At PgDatabaseMetaData.java:[line 2854]<br/>At PgDatabaseMetaData.java:[line 2857]<br/>At PgDatabaseMetaData.java:[line 2860]<br/>At PgDatabaseMetaData.java:[line 2862]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e655');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e655" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgDatabaseMetaData<br/>In method org.postgresql.jdbc.PgDatabaseMetaData.getImportedExportedKeys(String, String, String, String, String, String)<br/>At PgDatabaseMetaData.java:[line 2328]<br/>Sink method java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgDatabaseMetaData.escapeQuotes(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc/PgConnection.escapeString(Ljava/lang/String;)Ljava/lang/String;<br/>At PgDatabaseMetaData.java:[line 1030]<br/>At PgDatabaseMetaData.java:[line 1031]<br/>At PgDatabaseMetaData.java:[line 1032]<br/>At PgDatabaseMetaData.java:[line 2310]<br/>At PgDatabaseMetaData.java:[line 2313]<br/>At PgDatabaseMetaData.java:[line 2316]<br/>At PgDatabaseMetaData.java:[line 2319]<br/>At PgDatabaseMetaData.java:[line 2323]<br/>At PgDatabaseMetaData.java:[line 2325]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e694');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e694" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgDatabaseMetaData<br/>In method org.postgresql.jdbc.PgDatabaseMetaData.getIndexInfo(String, String, String, boolean, boolean)<br/>At PgDatabaseMetaData.java:[line 2601]<br/>Sink method java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgDatabaseMetaData.escapeQuotes(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc/PgConnection.escapeString(Ljava/lang/String;)Ljava/lang/String;<br/>At PgDatabaseMetaData.java:[line 1030]<br/>At PgDatabaseMetaData.java:[line 1031]<br/>At PgDatabaseMetaData.java:[line 1032]<br/>At PgDatabaseMetaData.java:[line 2517]<br/>At PgDatabaseMetaData.java:[line 2520]<br/>At PgDatabaseMetaData.java:[line 2523]<br/>At PgDatabaseMetaData.java:[line 2536]<br/>At PgDatabaseMetaData.java:[line 2569]<br/>At PgDatabaseMetaData.java:[line 2572]<br/>At PgDatabaseMetaData.java:[line 2592]<br/>At PgDatabaseMetaData.java:[line 2595]<br/>At PgDatabaseMetaData.java:[line 2599]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e739');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e739" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgDatabaseMetaData<br/>In method org.postgresql.jdbc.PgDatabaseMetaData.getPrimaryKeys(String, String, String)<br/>At PgDatabaseMetaData.java:[line 2170]<br/>Sink method java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgDatabaseMetaData.escapeQuotes(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc/PgConnection.escapeString(Ljava/lang/String;)Ljava/lang/String;<br/>At PgDatabaseMetaData.java:[line 1030]<br/>At PgDatabaseMetaData.java:[line 1031]<br/>At PgDatabaseMetaData.java:[line 1032]<br/>At PgDatabaseMetaData.java:[line 2149]<br/>At PgDatabaseMetaData.java:[line 2153]<br/>At PgDatabaseMetaData.java:[line 2156]<br/>At PgDatabaseMetaData.java:[line 2157]<br/>At PgDatabaseMetaData.java:[line 2168]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e776');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e776" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgDatabaseMetaData<br/>In method org.postgresql.jdbc.PgDatabaseMetaData.getPrimaryUniqueKeys(String, String, String)<br/>At PgDatabaseMetaData.java:[line 2222]<br/>Sink method java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgDatabaseMetaData.escapeQuotes(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc/PgConnection.escapeString(Ljava/lang/String;)Ljava/lang/String;<br/>At PgDatabaseMetaData.java:[line 1030]<br/>At PgDatabaseMetaData.java:[line 1031]<br/>At PgDatabaseMetaData.java:[line 1032]<br/>At PgDatabaseMetaData.java:[line 2201]<br/>At PgDatabaseMetaData.java:[line 2205]<br/>At PgDatabaseMetaData.java:[line 2208]<br/>At PgDatabaseMetaData.java:[line 2220]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e811');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e811" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgDatabaseMetaData<br/>In method org.postgresql.jdbc.PgDatabaseMetaData.getProcedureColumns(String, String, String, String)<br/>At PgDatabaseMetaData.java:[line 1111]<br/>Sink method java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgDatabaseMetaData.escapeQuotes(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc/PgConnection.escapeString(Ljava/lang/String;)Ljava/lang/String;<br/>At PgDatabaseMetaData.java:[line 1030]<br/>At PgDatabaseMetaData.java:[line 1031]<br/>At PgDatabaseMetaData.java:[line 1032]<br/>At PgDatabaseMetaData.java:[line 1101]<br/>At PgDatabaseMetaData.java:[line 1104]<br/>At PgDatabaseMetaData.java:[line 1106]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e844');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e844" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgDatabaseMetaData<br/>In method org.postgresql.jdbc.PgDatabaseMetaData.getProcedures(String, String, String)<br/>At PgDatabaseMetaData.java:[line 1063]<br/>Sink method java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgDatabaseMetaData.escapeQuotes(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc/PgConnection.escapeString(Ljava/lang/String;)Ljava/lang/String;<br/>At PgDatabaseMetaData.java:[line 1030]<br/>At PgDatabaseMetaData.java:[line 1031]<br/>At PgDatabaseMetaData.java:[line 1032]<br/>At PgDatabaseMetaData.java:[line 1053]<br/>At PgDatabaseMetaData.java:[line 1056]<br/>At PgDatabaseMetaData.java:[line 1059]<br/>At PgDatabaseMetaData.java:[line 1061]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e879');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e879" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgDatabaseMetaData<br/>In method org.postgresql.jdbc.PgDatabaseMetaData.getSchemas(String, String)<br/>At PgDatabaseMetaData.java:[line 1453]<br/>Sink method java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgDatabaseMetaData.escapeQuotes(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc/PgConnection.escapeString(Ljava/lang/String;)Ljava/lang/String;<br/>At PgDatabaseMetaData.java:[line 1030]<br/>At PgDatabaseMetaData.java:[line 1031]<br/>At PgDatabaseMetaData.java:[line 1032]<br/>At PgDatabaseMetaData.java:[line 1446]<br/>At PgDatabaseMetaData.java:[line 1449]<br/>At PgDatabaseMetaData.java:[line 1451]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e913');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e913" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgDatabaseMetaData<br/>In method org.postgresql.jdbc.PgDatabaseMetaData.getTablePrivileges(String, String, String)<br/>At PgDatabaseMetaData.java:[line 1819]<br/>Sink method java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgDatabaseMetaData.escapeQuotes(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc/PgConnection.escapeString(Ljava/lang/String;)Ljava/lang/String;<br/>At PgDatabaseMetaData.java:[line 1030]<br/>At PgDatabaseMetaData.java:[line 1031]<br/>At PgDatabaseMetaData.java:[line 1032]<br/>At PgDatabaseMetaData.java:[line 1810]<br/>At PgDatabaseMetaData.java:[line 1814]<br/>At PgDatabaseMetaData.java:[line 1816]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e946');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e946" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgDatabaseMetaData<br/>In method org.postgresql.jdbc.PgDatabaseMetaData.getTables(String, String, String, String[])<br/>At PgDatabaseMetaData.java:[line 1343]<br/>Sink method java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgDatabaseMetaData.escapeQuotes(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc/PgConnection.escapeString(Ljava/lang/String;)Ljava/lang/String;<br/>At PgDatabaseMetaData.java:[line 1030]<br/>At PgDatabaseMetaData.java:[line 1031]<br/>At PgDatabaseMetaData.java:[line 1032]<br/>At PgDatabaseMetaData.java:[line 1318]<br/>At PgDatabaseMetaData.java:[line 1321]<br/>At PgDatabaseMetaData.java:[line 1327]<br/>At PgDatabaseMetaData.java:[line 1330]<br/>At PgDatabaseMetaData.java:[line 1339]<br/>At PgDatabaseMetaData.java:[line 1341]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e985');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e985" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgDatabaseMetaData<br/>In method org.postgresql.jdbc.PgDatabaseMetaData.getUDTs(String, String, String, int[])<br/>At PgDatabaseMetaData.java:[line 2747]<br/>Sink method java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgDatabaseMetaData.escapeQuotes(Ljava/lang/String;)Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc/PgConnection.escapeString(Ljava/lang/String;)Ljava/lang/String;<br/>At PgDatabaseMetaData.java:[line 1030]<br/>At PgDatabaseMetaData.java:[line 1031]<br/>At PgDatabaseMetaData.java:[line 1032]<br/>At PgDatabaseMetaData.java:[line 2732]<br/>At PgDatabaseMetaData.java:[line 2737]<br/>At PgDatabaseMetaData.java:[line 2739]<br/>At PgDatabaseMetaData.java:[line 2743]<br/>At PgDatabaseMetaData.java:[line 2746]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e1130');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of org/postgresql/core/BaseConnection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e1130" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgResultSet<br/>In method org.postgresql.jdbc.PgResultSet.deleteRow()<br/>At PgResultSet.java:[line 1034]<br/>Sink method org/postgresql/core/BaseConnection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/postgresql/core/Utils.doAppendEscapedIdentifier(Ljava/lang/Appendable;Ljava/lang/String;)V parameter 1<br/>Unknown source org/postgresql/jdbc/PgResultSet.onlyTable<br/>Unknown source java/lang/Appendable.append(C)Ljava/lang/Appendable;<br/>Unknown source org/postgresql/core/Utils.escapeIdentifier(Ljava/lang/StringBuilder;Ljava/lang/String;)Ljava/lang/StringBuilder; parameter 1<br/>Unknown source org/postgresql/jdbc/PgResultSet.tableName<br/>At Utils.java:[line 135]<br/>At Utils.java:[line 144]<br/>At Utils.java:[line 146]<br/>At Utils.java:[line 149]<br/>At PgResultSet.java:[line 1023]<br/>At PgResultSet.java:[line 1024]<br/>At PgResultSet.java:[line 1028]<br/>At PgResultSet.java:[line 1030]<br/>At PgResultSet.java:[line 1034]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1176');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of org/postgresql/core/BaseConnection.prepareStatement(Ljava/lang/String;I)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1176" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgResultSet<br/>In method org.postgresql.jdbc.PgResultSet.insertRow()<br/>At PgResultSet.java:[line 1090]<br/>Sink method org/postgresql/core/BaseConnection.prepareStatement(Ljava/lang/String;I)Ljava/sql/PreparedStatement;<br/>Sink parameter 1<br/>Unknown source org/postgresql/core/Utils.doAppendEscapedIdentifier(Ljava/lang/Appendable;Ljava/lang/String;)V parameter 1<br/>Unknown source java/lang/Appendable.append(C)Ljava/lang/Appendable;<br/>Unknown source org/postgresql/core/Utils.escapeIdentifier(Ljava/lang/StringBuilder;Ljava/lang/String;)Ljava/lang/StringBuilder; parameter 1<br/>Unknown source org/postgresql/jdbc/PgResultSet.tableName<br/>At Utils.java:[line 135]<br/>At Utils.java:[line 144]<br/>At Utils.java:[line 146]<br/>At Utils.java:[line 149]<br/>At PgResultSet.java:[line 1066]<br/>At PgResultSet.java:[line 1077]<br/>At PgResultSet.java:[line 1085]<br/>At PgResultSet.java:[line 1090]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e1217');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of org/postgresql/core/BaseConnection.prepareStatement(Ljava/lang/String;II)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e1217" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgResultSet<br/>In method org.postgresql.jdbc.PgResultSet.refreshRow()<br/>At PgResultSet.java:[line 1378]<br/>Sink method org/postgresql/core/BaseConnection.prepareStatement(Ljava/lang/String;II)Ljava/sql/PreparedStatement;<br/>Sink parameter 2<br/>Unknown source org/postgresql/jdbc/PgResultSet.onlyTable<br/>Unknown source org/postgresql/jdbc/PgResultSet.tableName<br/>Unknown source org/postgresql/PGResultSetMetaData.getBaseColumnName(I)Ljava/lang/String;<br/>Unknown source org/postgresql/jdbc/PgResultSet$PrimaryKey.name<br/>At PgResultSet.java:[line 1352]<br/>At PgResultSet.java:[line 1354]<br/>At PgResultSet.java:[line 1356]<br/>At PgResultSet.java:[line 1364]<br/>At PgResultSet.java:[line 1367]<br/>At PgResultSet.java:[line 1370]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1254');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of org/postgresql/core/BaseConnection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement; can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1254" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgResultSet<br/>In method org.postgresql.jdbc.PgResultSet.updateRow()<br/>At PgResultSet.java:[line 1465]<br/>Sink method org/postgresql/core/BaseConnection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;<br/>Sink parameter 0<br/>Unknown source org/postgresql/core/Utils.doAppendEscapedIdentifier(Ljava/lang/Appendable;Ljava/lang/String;)V parameter 1<br/>Unknown source org/postgresql/core/Utils.escapeIdentifier(Ljava/lang/StringBuilder;Ljava/lang/String;)Ljava/lang/StringBuilder; parameter 1<br/>Unknown source org/postgresql/jdbc/PgResultSet.tableName<br/>Unknown source org/postgresql/jdbc/PgResultSet.onlyTable<br/>Unknown source java/lang/Appendable.append(C)Ljava/lang/Appendable;<br/>At Utils.java:[line 135]<br/>At Utils.java:[line 144]<br/>At Utils.java:[line 146]<br/>At Utils.java:[line 149]<br/>At PgResultSet.java:[line 1428]<br/>At PgResultSet.java:[line 1436]<br/>At PgResultSet.java:[line 1437]<br/>At PgResultSet.java:[line 1440]<br/>At PgResultSet.java:[line 1444]<br/>At PgResultSet.java:[line 1452]<br/>At PgResultSet.java:[line 1455]<br/>At PgResultSet.java:[line 1459]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e1332');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of org/postgresql/jdbc/PgStatement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e1332" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgStatement<br/>In method org.postgresql.jdbc.PgStatement.execute(String, int)<br/>At PgStatement.java:[line 1250]<br/>Sink method org/postgresql/jdbc/PgStatement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgStatement.execute(Ljava/lang/String;I)Z parameter 1<br/>Method usage not detected</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1352');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of org/postgresql/jdbc/PgStatement.execute(Ljava/lang/String;[Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1352" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgStatement<br/>In method org.postgresql.jdbc.PgStatement.execute(String, int)<br/>At PgStatement.java:[line 1252]<br/>Sink method org/postgresql/jdbc/PgStatement.execute(Ljava/lang/String;[Ljava/lang/String;)Z<br/>Sink parameter 1<br/>Unknown source org/postgresql/jdbc/PgStatement.execute(Ljava/lang/String;I)Z parameter 1<br/>Method usage not detected</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e1372');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of org/postgresql/jdbc/PgStatement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e1372" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgStatement<br/>In method org.postgresql.jdbc.PgStatement.execute(String, int[])<br/>At PgStatement.java:[line 1257]<br/>Sink method org/postgresql/jdbc/PgStatement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgStatement.execute(Ljava/lang/String;[I)Z parameter 1<br/>Method usage not detected</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1392');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of org/postgresql/jdbc/PgStatement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1392" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgStatement<br/>In method org.postgresql.jdbc.PgStatement.execute(String, String[])<br/>At PgStatement.java:[line 1266]<br/>Sink method org/postgresql/jdbc/PgStatement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgStatement.execute(Ljava/lang/String;[Ljava/lang/String;)Z parameter 1<br/>Method usage not detected<br/>At PgStatement.java:[line 1252]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e1414');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of org/postgresql/jdbc/PgStatement.executeLargeUpdate(Ljava/lang/String;)J can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e1414" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgStatement<br/>In method org.postgresql.jdbc.PgStatement.executeLargeUpdate(String, int)<br/>At PgStatement.java:[line 1095]<br/>Sink method org/postgresql/jdbc/PgStatement.executeLargeUpdate(Ljava/lang/String;)J<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgStatement.executeLargeUpdate(Ljava/lang/String;I)J parameter 1<br/>Method usage not detected</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1434');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of org/postgresql/jdbc/PgStatement.executeLargeUpdate(Ljava/lang/String;[Ljava/lang/String;)J can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1434" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgStatement<br/>In method org.postgresql.jdbc.PgStatement.executeLargeUpdate(String, int)<br/>At PgStatement.java:[line 1098]<br/>Sink method org/postgresql/jdbc/PgStatement.executeLargeUpdate(Ljava/lang/String;[Ljava/lang/String;)J<br/>Sink parameter 1<br/>Unknown source org/postgresql/jdbc/PgStatement.executeLargeUpdate(Ljava/lang/String;I)J parameter 1<br/>Method usage not detected</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e1455');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of org/postgresql/jdbc/PgStatement.executeLargeUpdate(Ljava/lang/String;)J can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e1455" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgStatement<br/>In method org.postgresql.jdbc.PgStatement.executeLargeUpdate(String, int[])<br/>At PgStatement.java:[line 1104]<br/>Sink method org/postgresql/jdbc/PgStatement.executeLargeUpdate(Ljava/lang/String;)J<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgStatement.executeLargeUpdate(Ljava/lang/String;[I)J parameter 1<br/>Method usage not detected</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1475');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of org/postgresql/jdbc/PgStatement.executeLargeUpdate(Ljava/lang/String;)J can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1475" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgStatement<br/>In method org.postgresql.jdbc.PgStatement.executeLargeUpdate(String, String[])<br/>At PgStatement.java:[line 1114]<br/>Sink method org/postgresql/jdbc/PgStatement.executeLargeUpdate(Ljava/lang/String;)J<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgStatement.executeLargeUpdate(Ljava/lang/String;[Ljava/lang/String;)J parameter 1<br/>Method usage not detected<br/>At PgStatement.java:[line 1098]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e1497');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of org/postgresql/jdbc/PgStatement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e1497" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgStatement<br/>In method org.postgresql.jdbc.PgStatement.executeUpdate(String, int)<br/>At PgStatement.java:[line 1221]<br/>Sink method org/postgresql/jdbc/PgStatement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgStatement.executeUpdate(Ljava/lang/String;I)I parameter 1<br/>Method usage not detected</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1517');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of org/postgresql/jdbc/PgStatement.executeUpdate(Ljava/lang/String;[Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1517" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgStatement<br/>In method org.postgresql.jdbc.PgStatement.executeUpdate(String, int)<br/>At PgStatement.java:[line 1224]<br/>Sink method org/postgresql/jdbc/PgStatement.executeUpdate(Ljava/lang/String;[Ljava/lang/String;)I<br/>Sink parameter 1<br/>Unknown source org/postgresql/jdbc/PgStatement.executeUpdate(Ljava/lang/String;I)I parameter 1<br/>Method usage not detected</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e1537');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of org/postgresql/jdbc/PgStatement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e1537" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgStatement<br/>In method org.postgresql.jdbc.PgStatement.executeUpdate(String, int[])<br/>At PgStatement.java:[line 1229]<br/>Sink method org/postgresql/jdbc/PgStatement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgStatement.executeUpdate(Ljava/lang/String;[I)I parameter 1<br/>Method usage not detected</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1557');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of org/postgresql/jdbc/PgStatement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1557" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgStatement<br/>In method org.postgresql.jdbc.PgStatement.executeUpdate(String, String[])<br/>At PgStatement.java:[line 1238]<br/>Sink method org/postgresql/jdbc/PgStatement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source org/postgresql/jdbc/PgStatement.executeUpdate(Ljava/lang/String;[Ljava/lang/String;)I parameter 1<br/>Method usage not detected<br/>At PgStatement.java:[line 1224]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e1579');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e1579" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.replication.PGReplicationConnectionImpl<br/>In method org.postgresql.replication.PGReplicationConnectionImpl.dropReplicationSlot(String)<br/>At PGReplicationConnectionImpl.java:[line 42]<br/>Sink method java/sql/Statement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/postgresql/replication/PGReplicationConnectionImpl.dropReplicationSlot(Ljava/lang/String;)V parameter 0<br/>Method usage not detected<br/>At PGReplicationConnectionImpl.java:[line 42]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1601');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1601" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.replication.fluent.logical.LogicalCreateSlotBuilder<br/>In method org.postgresql.replication.fluent.logical.LogicalCreateSlotBuilder.make()<br/>At LogicalCreateSlotBuilder.java:[line 68]<br/>Sink method java/sql/Statement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/postgresql/replication/fluent/logical/LogicalCreateSlotBuilder.outputPlugin<br/>Unknown source org/postgresql/replication/fluent/logical/LogicalCreateSlotBuilder.slotName<br/>At LogicalCreateSlotBuilder.java:[line 48]<br/>At LogicalCreateSlotBuilder.java:[line 62]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e1625');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.execute(Ljava/lang/String;)Z can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e1625" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.replication.fluent.physical.PhysicalCreateSlotBuilder<br/>In method org.postgresql.replication.fluent.physical.PhysicalCreateSlotBuilder.make()<br/>At PhysicalCreateSlotBuilder.java:[line 51]<br/>Sink method java/sql/Statement.execute(Ljava/lang/String;)Z<br/>Sink parameter 0<br/>Unknown source org/postgresql/replication/fluent/physical/PhysicalCreateSlotBuilder.slotName<br/>At PhysicalCreateSlotBuilder.java:[line 46]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1870');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1870" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.xa.PGXAConnection<br/>In method org.postgresql.xa.PGXAConnection.commitPrepared(Xid)<br/>At PGXAConnection.java:[line 591]<br/>Sink method java/sql/Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source java/util/Base64$Encoder.encodeToString([B)Ljava/lang/String;<br/>Unknown source org/postgresql/xa/RecoveredXid.xidToString(Ljavax/transaction/xa/Xid;)Ljava/lang/String;<br/>At PGXAConnection.java:[line 585]<br/>At PGXAConnection.java:[line 591]<br/>At RecoveredXid.java:[line 82]<br/>At RecoveredXid.java:[line 83]<br/>At RecoveredXid.java:[line 84]<br/>At RecoveredXid.java:[line 85]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e1904');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e1904" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.xa.PGXAConnection<br/>In method org.postgresql.xa.PGXAConnection.prepare(Xid)<br/>At PGXAConnection.java:[line 357]<br/>Sink method java/sql/Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source java/util/Base64$Encoder.encodeToString([B)Ljava/lang/String;<br/>Unknown source org/postgresql/xa/RecoveredXid.xidToString(Ljavax/transaction/xa/Xid;)Ljava/lang/String;<br/>At PGXAConnection.java:[line 353]<br/>At PGXAConnection.java:[line 357]<br/>At RecoveredXid.java:[line 82]<br/>At RecoveredXid.java:[line 83]<br/>At RecoveredXid.java:[line 84]<br/>At RecoveredXid.java:[line 85]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1937');">
            <td>
               <span class="priority-2">SECSQLIJDBC</span>
            </td>
            <td>This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection (with JDBC)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1937" style="display: none;">
                  <a href="#SQL_INJECTION_JDBC">Bug type SQL_INJECTION_JDBC (click for details)</a>
                  <br/>In class org.postgresql.xa.PGXAConnection<br/>In method org.postgresql.xa.PGXAConnection.rollback(Xid)<br/>At PGXAConnection.java:[line 462]<br/>Sink method java/sql/Statement.executeUpdate(Ljava/lang/String;)I<br/>Sink parameter 0<br/>Unknown source java/util/Base64$Encoder.encodeToString([B)Ljava/lang/String;<br/>Unknown source org/postgresql/xa/RecoveredXid.xidToString(Ljavax/transaction/xa/Xid;)Ljava/lang/String;<br/>At PGXAConnection.java:[line 457]<br/>At PGXAConnection.java:[line 462]<br/>At RecoveredXid.java:[line 82]<br/>At RecoveredXid.java:[line 83]<br/>At RecoveredXid.java:[line 84]<br/>At RecoveredXid.java:[line 85]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e1645');">
            <td>
               <span class="priority-2">SECSSL</span>
            </td>
            <td>SSLContext needs to be compatible with TLS 1.2</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e1645" style="display: none;">
                  <a href="#SSL_CONTEXT">Bug type SSL_CONTEXT (click for details)</a>
                  <br/>In class org.postgresql.ssl.DbKeyStoreSocketFactory<br/>In method new org.postgresql.ssl.DbKeyStoreSocketFactory()<br/>At DbKeyStoreSocketFactory.java:[line 49]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e2336');">
            <td>
               <span class="priority-2">SECSSSRFUC</span>
            </td>
            <td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e2336" style="display: none;">
                  <a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
                  <br/>In class org.springframework.beans.factory.xml.ResourceEntityResolver<br/>In method org.springframework.beans.factory.xml.ResourceEntityResolver.resolveEntity(String, String)<br/>At ResourceEntityResolver.java:[line 118]<br/>Sink method java/net/URL.openStream()Ljava/io/InputStream;<br/>Sink parameter 0<br/>Unknown source org/springframework/beans/factory/xml/ResourceEntityResolver.resolveEntity(Ljava/lang/String;Ljava/lang/String;)Lorg/xml/sax/InputSource; parameter 0<br/>Unknown source java/net/URL.&lt;init&gt;(Ljava/lang/String;)V<br/>Method usage not detected<br/>At ResourceEntityResolver.java:[line 94]<br/>At ResourceEntityResolver.java:[line 115]<br/>At ResourceEntityResolver.java:[line 118]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2696');">
            <td>
               <span class="priority-2">SECSSSRFUC</span>
            </td>
            <td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2696" style="display: none;">
                  <a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
                  <br/>In class org.springframework.core.io.AbstractFileResolvingResource<br/>In method org.springframework.core.io.AbstractFileResolvingResource.checkReadable(URL)<br/>At AbstractFileResolvingResource.java:[line 108]<br/>Sink method java/net/URL.openConnection()Ljava/net/URLConnection;<br/>Sink parameter 0<br/>Unknown source org/springframework/core/io/AbstractFileResolvingResource.checkReadable(Ljava/net/URL;)Z parameter 0<br/>At AbstractFileResolvingResource.java:[line 92]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e2716');">
            <td>
               <span class="priority-2">SECSSSRFUC</span>
            </td>
            <td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e2716" style="display: none;">
                  <a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
                  <br/>In class org.springframework.core.io.AbstractFileResolvingResource<br/>In method org.springframework.core.io.AbstractFileResolvingResource.contentLength()<br/>At AbstractFileResolvingResource.java:[line 248]<br/>Sink method java/net/URL.openConnection()Ljava/net/URLConnection;<br/>Sink parameter 0<br/>Unknown source org/springframework/core/io/AbstractFileResolvingResource.getURL()Ljava/net/URL;</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2734');">
            <td>
               <span class="priority-2">SECSSSRFUC</span>
            </td>
            <td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2734" style="display: none;">
                  <a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
                  <br/>In class org.springframework.core.io.AbstractFileResolvingResource<br/>In method org.springframework.core.io.AbstractFileResolvingResource.exists()<br/>At AbstractFileResolvingResource.java:[line 55]<br/>Sink method java/net/URL.openConnection()Ljava/net/URLConnection;<br/>Sink parameter 0<br/>Unknown source org/springframework/core/io/AbstractFileResolvingResource.getURL()Ljava/net/URL;</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e2753');">
            <td>
               <span class="priority-2">SECSSSRFUC</span>
            </td>
            <td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e2753" style="display: none;">
                  <a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
                  <br/>In class org.springframework.core.io.AbstractFileResolvingResource<br/>In method org.springframework.core.io.AbstractFileResolvingResource.lastModified()<br/>At AbstractFileResolvingResource.java:[line 277]<br/>Sink method java/net/URL.openConnection()Ljava/net/URLConnection;<br/>Sink parameter 0<br/>Unknown source org/springframework/core/io/AbstractFileResolvingResource.getURL()Ljava/net/URL;</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2852');">
            <td>
               <span class="priority-2">SECSSSRFUC</span>
            </td>
            <td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2852" style="display: none;">
                  <a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
                  <br/>In class org.springframework.core.io.UrlResource<br/>In method org.springframework.core.io.UrlResource.getInputStream()<br/>At UrlResource.java:[line 184]<br/>Sink method java/net/URL.openConnection()Ljava/net/URLConnection;<br/>Sink parameter 0<br/>Unknown source org/springframework/core/io/UrlResource.url<br/>At UrlResource.java:[line 184]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e2932');">
            <td>
               <span class="priority-2">SECSSSRFUC</span>
            </td>
            <td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e2932" style="display: none;">
                  <a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
                  <br/>In class org.springframework.core.io.support.PathMatchingResourcePatternResolver<br/>In method org.springframework.core.io.support.PathMatchingResourcePatternResolver.doFindPathMatchingJarResources(Resource, URL, String)<br/>At PathMatchingResourcePatternResolver.java:[line 594]<br/>Sink method java/net/URL.openConnection()Ljava/net/URLConnection;<br/>Sink parameter 0<br/>Unknown source org/springframework/core/io/support/PathMatchingResourcePatternResolver.doFindPathMatchingJarResources(Lorg/springframework/core/io/Resource;Ljava/net/URL;Ljava/lang/String;)Ljava/util/Set; parameter 1<br/>At PathMatchingResourcePatternResolver.java:[line 503]<br/>At PathMatchingResourcePatternResolver.java:[line 513]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e48');">
            <td>
               <span class="priority-2">SECUHE</span>
            </td>
            <td>Unsafe comparison of hash that are susceptible to timing attack</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e48" style="display: none;">
                  <a href="#UNSAFE_HASH_EQUALS">Bug type UNSAFE_HASH_EQUALS (click for details)</a>
                  <br/>In class org.postgresql.core.v3.ConnectionFactoryImpl<br/>In method org.postgresql.core.v3.ConnectionFactoryImpl.doAuthentication(PGStream, String, String, Properties)<br/>At ConnectionFactoryImpl.java:[line 715]<br/>Sink method java/lang/String.equals(Ljava/lang/Object;)Z<br/>Sink parameter 0<br/>Unknown source org/postgresql/PGProperty.defaultValue<br/>Unknown source org/postgresql/PGProperty.get(Ljava/util/Properties;)Ljava/lang/String;<br/>Unknown source org/postgresql/PGProperty.get(Ljava/util/Properties;)Ljava/lang/String; parameter 0<br/>Unknown source org/postgresql/core/v3/ConnectionFactoryImpl.doAuthentication(Lorg/postgresql/core/PGStream;Ljava/lang/String;Ljava/lang/String;Ljava/util/Properties;)V parameter 0<br/>Unknown source java/util/Properties.getProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Method usage not detected<br/>At PGProperty.java:[line 830]<br/>At ConnectionFactoryImpl.java:[line 163]<br/>At ConnectionFactoryImpl.java:[line 215]<br/>At ConnectionFactoryImpl.java:[line 224]<br/>At ConnectionFactoryImpl.java:[line 245]<br/>At ConnectionFactoryImpl.java:[line 705]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e89');">
            <td>
               <span class="priority-2">SECUHE</span>
            </td>
            <td>Unsafe comparison of hash that are susceptible to timing attack</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e89" style="display: none;">
                  <a href="#UNSAFE_HASH_EQUALS">Bug type UNSAFE_HASH_EQUALS (click for details)</a>
                  <br/>In class org.postgresql.core.v3.ConnectionFactoryImpl<br/>In method org.postgresql.core.v3.ConnectionFactoryImpl.doAuthentication(PGStream, String, String, Properties)<br/>At ConnectionFactoryImpl.java:[line 717]<br/>Sink method java/lang/String.equals(Ljava/lang/Object;)Z<br/>Sink parameter 0<br/>Unknown source org/postgresql/PGProperty.defaultValue<br/>Unknown source org/postgresql/PGProperty.get(Ljava/util/Properties;)Ljava/lang/String;<br/>Unknown source org/postgresql/PGProperty.get(Ljava/util/Properties;)Ljava/lang/String; parameter 0<br/>Unknown source org/postgresql/core/v3/ConnectionFactoryImpl.doAuthentication(Lorg/postgresql/core/PGStream;Ljava/lang/String;Ljava/lang/String;Ljava/util/Properties;)V parameter 0<br/>Unknown source java/util/Properties.getProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Method usage not detected<br/>At PGProperty.java:[line 830]<br/>At ConnectionFactoryImpl.java:[line 163]<br/>At ConnectionFactoryImpl.java:[line 215]<br/>At ConnectionFactoryImpl.java:[line 224]<br/>At ConnectionFactoryImpl.java:[line 245]<br/>At ConnectionFactoryImpl.java:[line 705]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e130');">
            <td>
               <span class="priority-2">SECUHE</span>
            </td>
            <td>Unsafe comparison of hash that are susceptible to timing attack</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e130" style="display: none;">
                  <a href="#UNSAFE_HASH_EQUALS">Bug type UNSAFE_HASH_EQUALS (click for details)</a>
                  <br/>In class org.postgresql.core.v3.ConnectionFactoryImpl<br/>In method org.postgresql.core.v3.ConnectionFactoryImpl.doAuthentication(PGStream, String, String, Properties)<br/>At ConnectionFactoryImpl.java:[line 733]<br/>Sink method java/lang/String.equals(Ljava/lang/Object;)Z<br/>Sink parameter 0<br/>Unknown source org/postgresql/PGProperty.defaultValue<br/>Unknown source org/postgresql/PGProperty.get(Ljava/util/Properties;)Ljava/lang/String;<br/>Unknown source org/postgresql/PGProperty.get(Ljava/util/Properties;)Ljava/lang/String; parameter 0<br/>Unknown source org/postgresql/core/v3/ConnectionFactoryImpl.doAuthentication(Lorg/postgresql/core/PGStream;Ljava/lang/String;Ljava/lang/String;Ljava/util/Properties;)V parameter 0<br/>Unknown source java/util/Properties.getProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;<br/>Method usage not detected<br/>At PGProperty.java:[line 830]<br/>At ConnectionFactoryImpl.java:[line 163]<br/>At ConnectionFactoryImpl.java:[line 215]<br/>At ConnectionFactoryImpl.java:[line 224]<br/>At ConnectionFactoryImpl.java:[line 245]<br/>At ConnectionFactoryImpl.java:[line 705]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1748');">
            <td>
               <span class="priority-2">SECWTM</span>
            </td>
            <td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1748" style="display: none;">
                  <a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
                  <br/>In class org.postgresql.ssl.NonValidatingFactory$NonValidatingTM<br/>In method org.postgresql.ssl.NonValidatingFactory$NonValidatingTM.checkClientTrusted(X509Certificate[], String)<br/>At NonValidatingFactory.java:[line 45]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e1760');">
            <td>
               <span class="priority-2">SECWTM</span>
            </td>
            <td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e1760" style="display: none;">
                  <a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
                  <br/>In class org.postgresql.ssl.NonValidatingFactory$NonValidatingTM<br/>In method org.postgresql.ssl.NonValidatingFactory$NonValidatingTM.checkServerTrusted(X509Certificate[], String)<br/>At NonValidatingFactory.java:[line 48]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1772');">
            <td>
               <span class="priority-2">SECWTM</span>
            </td>
            <td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1772" style="display: none;">
                  <a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
                  <br/>In class org.postgresql.ssl.NonValidatingFactory$NonValidatingTM<br/>In method org.postgresql.ssl.NonValidatingFactory$NonValidatingTM.getAcceptedIssuers()<br/>At NonValidatingFactory.java:[line 41]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e1844');">
            <td>
               <span class="priority-2">SECWTM</span>
            </td>
            <td>TrustManager that accept any certificates makes communication vulnerable to a MITM attack</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e1844" style="display: none;">
                  <a href="#WEAK_TRUST_MANAGER">Bug type WEAK_TRUST_MANAGER (click for details)</a>
                  <br/>In class org.postgresql.ssl.SingleCertValidatingFactory$SingleCertTrustManager<br/>In method org.postgresql.ssl.SingleCertValidatingFactory$SingleCertTrustManager.checkClientTrusted(X509Certificate[], String)<br/>At SingleCertValidatingFactory.java:[line 192]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1306');">
            <td>
               <span class="priority-2">SECXXEDOC</span>
            </td>
            <td>The use of DocumentBuilder.parse(...) (DocumentBuilder) is vulnerable to XML External Entity attacks</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1306" style="display: none;">
                  <a href="#XXE_DOCUMENT">Bug type XXE_DOCUMENT (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgSQLXML<br/>In method org.postgresql.jdbc.PgSQLXML.getSource(Class)<br/>At PgSQLXML.java:[line 147]<br/>Value DocumentBuilder.parse(...)</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2182');">
            <td>
               <span class="priority-2">SECXXEDOC</span>
            </td>
            <td>The use of DocumentBuilder.parse(...) (DocumentBuilder) is vulnerable to XML External Entity attacks</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2182" style="display: none;">
                  <a href="#XXE_DOCUMENT">Bug type XXE_DOCUMENT (click for details)</a>
                  <br/>In class org.springframework.beans.factory.xml.DefaultDocumentLoader<br/>In method org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(InputSource, EntityResolver, ErrorHandler, int, boolean)<br/>At DefaultDocumentLoader.java:[line 77]<br/>Value DocumentBuilder.parse(...)</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1320');">
            <td>
               <span class="priority-2">SECXXESTR</span>
            </td>
            <td>The XML parsing is vulnerable to XML External Entity attacks</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1320" style="display: none;">
                  <a href="#XXE_XMLSTREAMREADER">Bug type XXE_XMLSTREAMREADER (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgSQLXML<br/>In method org.postgresql.jdbc.PgSQLXML.getSource(Class)<br/>At PgSQLXML.java:[line 158]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2006');">
            <td>
               <span class="priority-2">SECXXETFDTD</span>
            </td>
            <td>The use of SAXTransformerFactory.newInstance(...) (TransformerFactory) is vulnerable to XML External Entity attacks</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2006" style="display: none;">
                  <a href="#XXE_DTD_TRANSFORM_FACTORY">Bug type XXE_DTD_TRANSFORM_FACTORY (click for details)</a>
                  <br/>In class org.postgresql.xml.DefaultPGXmlFactoryFactory<br/>In method org.postgresql.xml.DefaultPGXmlFactoryFactory.newSAXTransformerFactory()<br/>At DefaultPGXmlFactoryFactory.java:[line 57]<br/>Value SAXTransformerFactory.newInstance(...)</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e2020');">
            <td>
               <span class="priority-2">SECXXETFDTD</span>
            </td>
            <td>The use of TransformerFactory.newInstance(...) (TransformerFactory) is vulnerable to XML External Entity attacks</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e2020" style="display: none;">
                  <a href="#XXE_DTD_TRANSFORM_FACTORY">Bug type XXE_DTD_TRANSFORM_FACTORY (click for details)</a>
                  <br/>In class org.postgresql.xml.DefaultPGXmlFactoryFactory<br/>In method org.postgresql.xml.DefaultPGXmlFactoryFactory.newTransformerFactory()<br/>At DefaultPGXmlFactoryFactory.java:[line 50]<br/>Value TransformerFactory.newInstance(...)</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2062');">
            <td>
               <span class="priority-2">SECXXETFDTD</span>
            </td>
            <td>The use of SAXTransformerFactory.newInstance(...) (TransformerFactory) is vulnerable to XML External Entity attacks</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2062" style="display: none;">
                  <a href="#XXE_DTD_TRANSFORM_FACTORY">Bug type XXE_DTD_TRANSFORM_FACTORY (click for details)</a>
                  <br/>In class org.postgresql.xml.LegacyInsecurePGXmlFactoryFactory<br/>In method org.postgresql.xml.LegacyInsecurePGXmlFactoryFactory.newSAXTransformerFactory()<br/>At LegacyInsecurePGXmlFactoryFactory.java:[line 40]<br/>Value SAXTransformerFactory.newInstance(...)</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e2076');">
            <td>
               <span class="priority-2">SECXXETFDTD</span>
            </td>
            <td>The use of TransformerFactory.newInstance(...) (TransformerFactory) is vulnerable to XML External Entity attacks</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e2076" style="display: none;">
                  <a href="#XXE_DTD_TRANSFORM_FACTORY">Bug type XXE_DTD_TRANSFORM_FACTORY (click for details)</a>
                  <br/>In class org.postgresql.xml.LegacyInsecurePGXmlFactoryFactory<br/>In method org.postgresql.xml.LegacyInsecurePGXmlFactoryFactory.newTransformerFactory()<br/>At LegacyInsecurePGXmlFactoryFactory.java:[line 35]<br/>Value TransformerFactory.newInstance(...)</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2034');">
            <td>
               <span class="priority-2">SECXXETFXSLT</span>
            </td>
            <td>The use of SAXTransformerFactory.newInstance(...) is vulnerable to XSLT External Entity attacks</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2034" style="display: none;">
                  <a href="#XXE_XSLT_TRANSFORM_FACTORY">Bug type XXE_XSLT_TRANSFORM_FACTORY (click for details)</a>
                  <br/>In class org.postgresql.xml.DefaultPGXmlFactoryFactory<br/>In method org.postgresql.xml.DefaultPGXmlFactoryFactory.newSAXTransformerFactory()<br/>At DefaultPGXmlFactoryFactory.java:[line 57]<br/>Value SAXTransformerFactory.newInstance(...)</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e2048');">
            <td>
               <span class="priority-2">SECXXETFXSLT</span>
            </td>
            <td>The use of TransformerFactory.newInstance(...) is vulnerable to XSLT External Entity attacks</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e2048" style="display: none;">
                  <a href="#XXE_XSLT_TRANSFORM_FACTORY">Bug type XXE_XSLT_TRANSFORM_FACTORY (click for details)</a>
                  <br/>In class org.postgresql.xml.DefaultPGXmlFactoryFactory<br/>In method org.postgresql.xml.DefaultPGXmlFactoryFactory.newTransformerFactory()<br/>At DefaultPGXmlFactoryFactory.java:[line 50]<br/>Value TransformerFactory.newInstance(...)</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2091');">
            <td>
               <span class="priority-2">SECXXETFXSLT</span>
            </td>
            <td>The use of SAXTransformerFactory.newInstance(...) is vulnerable to XSLT External Entity attacks</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2091" style="display: none;">
                  <a href="#XXE_XSLT_TRANSFORM_FACTORY">Bug type XXE_XSLT_TRANSFORM_FACTORY (click for details)</a>
                  <br/>In class org.postgresql.xml.LegacyInsecurePGXmlFactoryFactory<br/>In method org.postgresql.xml.LegacyInsecurePGXmlFactoryFactory.newSAXTransformerFactory()<br/>At LegacyInsecurePGXmlFactoryFactory.java:[line 40]<br/>Value SAXTransformerFactory.newInstance(...)</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e2105');">
            <td>
               <span class="priority-2">SECXXETFXSLT</span>
            </td>
            <td>The use of TransformerFactory.newInstance(...) is vulnerable to XSLT External Entity attacks</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e2105" style="display: none;">
                  <a href="#XXE_XSLT_TRANSFORM_FACTORY">Bug type XXE_XSLT_TRANSFORM_FACTORY (click for details)</a>
                  <br/>In class org.postgresql.xml.LegacyInsecurePGXmlFactoryFactory<br/>In method org.postgresql.xml.LegacyInsecurePGXmlFactoryFactory.newTransformerFactory()<br/>At LegacyInsecurePGXmlFactoryFactory.java:[line 35]<br/>Value TransformerFactory.newInstance(...)</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2627');">
            <td>
               <span class="priority-2">SPELI</span>
            </td>
            <td>This use of org/springframework/expression/spel/standard/SpelExpressionParser.parseExpression(Ljava/lang/String;)Lorg/springframework/expression/Expression; could be vulnerable to code injection (Spring Expression)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2627" style="display: none;">
                  <a href="#SPEL_INJECTION">Bug type SPEL_INJECTION (click for details)</a>
                  <br/>In class org.springframework.context.expression.CachedExpressionEvaluator<br/>In method org.springframework.context.expression.CachedExpressionEvaluator.parseExpression(String)<br/>At CachedExpressionEvaluator.java:[line 101]<br/>Sink method org/springframework/expression/spel/standard/SpelExpressionParser.parseExpression(Ljava/lang/String;)Lorg/springframework/expression/Expression;<br/>Sink parameter 0<br/>Unknown source org/springframework/context/expression/CachedExpressionEvaluator.parseExpression(Ljava/lang/String;)Lorg/springframework/expression/Expression; parameter 0<br/>Method usage not detected<br/>At CachedExpressionEvaluator.java:[line 89]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e2649');">
            <td>
               <span class="priority-2">SPELI</span>
            </td>
            <td>This use of org/springframework/expression/ExpressionParser.parseExpression(Ljava/lang/String;Lorg/springframework/expression/ParserContext;)Lorg/springframework/expression/Expression; could be vulnerable to code injection (Spring Expression)</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e2649" style="display: none;">
                  <a href="#SPEL_INJECTION">Bug type SPEL_INJECTION (click for details)</a>
                  <br/>In class org.springframework.context.expression.StandardBeanExpressionResolver<br/>In method org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(String, BeanExpressionContext)<br/>At StandardBeanExpressionResolver.java:[line 148]<br/>Sink method org/springframework/expression/ExpressionParser.parseExpression(Ljava/lang/String;Lorg/springframework/expression/ParserContext;)Lorg/springframework/expression/Expression;<br/>Sink parameter 1<br/>Unknown source org/springframework/context/expression/StandardBeanExpressionResolver.evaluate(Ljava/lang/String;Lorg/springframework/beans/factory/config/BeanExpressionContext;)Ljava/lang/Object; parameter 1<br/>Method usage not detected</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e2966');">
            <td>
               <span class="priority-2">SPELI</span>
            </td>
            <td>This use of org/springframework/expression/common/TemplateAwareExpressionParser.parseExpression(Ljava/lang/String;Lorg/springframework/expression/ParserContext;)Lorg/springframework/expression/Expression; could be vulnerable to code injection (Spring Expression)</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e2966" style="display: none;">
                  <a href="#SPEL_INJECTION">Bug type SPEL_INJECTION (click for details)</a>
                  <br/>In class org.springframework.expression.common.TemplateAwareExpressionParser<br/>In method org.springframework.expression.common.TemplateAwareExpressionParser.parseExpression(String)<br/>At TemplateAwareExpressionParser.java:[line 43]<br/>Sink method org/springframework/expression/common/TemplateAwareExpressionParser.parseExpression(Ljava/lang/String;Lorg/springframework/expression/ParserContext;)Lorg/springframework/expression/Expression;<br/>Sink parameter 1<br/>Unknown source org/springframework/expression/common/TemplateAwareExpressionParser.parseExpression(Ljava/lang/String;)Lorg/springframework/expression/Expression; parameter 0<br/>Method usage not detected</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1022');">
            <td>
               <span class="priority-2">SQL</span>
            </td>
            <td>org.postgresql.jdbc.PgDatabaseMetaData.getColumnPrivileges(String, String, String, String) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1022" style="display: none;">
                  <a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgDatabaseMetaData<br/>In method org.postgresql.jdbc.PgDatabaseMetaData.getColumnPrivileges(String, String, String, String)<br/>At PgDatabaseMetaData.java:[line 1741]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e1034');">
            <td>
               <span class="priority-2">SQL</span>
            </td>
            <td>org.postgresql.jdbc.PgDatabaseMetaData.getColumns(String, String, String, String) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e1034" style="display: none;">
                  <a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgDatabaseMetaData<br/>In method org.postgresql.jdbc.PgDatabaseMetaData.getColumns(String, String, String, String)<br/>At PgDatabaseMetaData.java:[line 1577]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1046');">
            <td>
               <span class="priority-2">SQL</span>
            </td>
            <td>org.postgresql.jdbc.PgDatabaseMetaData.getFunctions(String, String, String) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1046" style="display: none;">
                  <a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgDatabaseMetaData<br/>In method org.postgresql.jdbc.PgDatabaseMetaData.getFunctions(String, String, String)<br/>At PgDatabaseMetaData.java:[line 2864]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e1058');">
            <td>
               <span class="priority-2">SQL</span>
            </td>
            <td>org.postgresql.jdbc.PgDatabaseMetaData.getImportedExportedKeys(String, String, String, String, String, String) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e1058" style="display: none;">
                  <a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgDatabaseMetaData<br/>In method org.postgresql.jdbc.PgDatabaseMetaData.getImportedExportedKeys(String, String, String, String, String, String)<br/>At PgDatabaseMetaData.java:[line 2328]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1070');">
            <td>
               <span class="priority-2">SQL</span>
            </td>
            <td>org.postgresql.jdbc.PgDatabaseMetaData.getIndexInfo(String, String, String, boolean, boolean) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1070" style="display: none;">
                  <a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
                  <br/>In class org.postgresql.jdbc.PgDatabaseMetaData<br/>In method org.postgresql.jdbc.PgDatabaseMetaData.getIndexInfo(String, String, String, boolean, boolean)<br/>At PgDatabaseMetaData.java:[line 2601]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e1970');">
            <td>
               <span class="priority-1">SQL</span>
            </td>
            <td>org.postgresql.xa.PGXAConnection.commitPrepared(Xid) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e1970" style="display: none;">
                  <a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
                  <br/>In class org.postgresql.xa.PGXAConnection<br/>In method org.postgresql.xa.PGXAConnection.commitPrepared(Xid)<br/>At PGXAConnection.java:[line 591]</p>
            </td>
         </tr>
         <tr class="tablerow1" onclick="toggleRow('d1e1982');">
            <td>
               <span class="priority-1">SQL</span>
            </td>
            <td>org.postgresql.xa.PGXAConnection.prepare(Xid) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
         </tr>
         <tr class="detailrow1">
            <td/>
            <td>
               <p id="d1e1982" style="display: none;">
                  <a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
                  <br/>In class org.postgresql.xa.PGXAConnection<br/>In method org.postgresql.xa.PGXAConnection.prepare(Xid)<br/>At PGXAConnection.java:[line 357]</p>
            </td>
         </tr>
         <tr class="tablerow0" onclick="toggleRow('d1e1994');">
            <td>
               <span class="priority-1">SQL</span>
            </td>
            <td>org.postgresql.xa.PGXAConnection.rollback(Xid) passes a nonconstant String to an execute or addBatch method on an SQL statement</td>
         </tr>
         <tr class="detailrow0">
            <td/>
            <td>
               <p id="d1e1994" style="display: none;">
                  <a href="#SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">Bug type SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE (click for details)</a>
                  <br/>In class org.postgresql.xa.PGXAConnection<br/>In method org.postgresql.xa.PGXAConnection.rollback(Xid)<br/>At PGXAConnection.java:[line 462]</p>
            </td>
         </tr>
      </table>
      <h1>
         <a name="Details">Details</a>
      </h1>
      <h2>
         <a name="INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE">INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE: Information Exposure Through An Error Message</a>
      </h2>
            
<p>
The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>try {
  out = httpResponse.getOutputStream()
} catch (Exception e) {
  e.printStackTrace(out);
}</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/209.html">CWE-209: Information Exposure Through an Error Message</a><br/>
<a href="https://cwe.mitre.org/data/definitions/211.html">CWE-211: Information Exposure Through Externally-Generated Error Message</a><br/>
</p>
            
        <h2>
         <a name="SCRIPT_ENGINE_INJECTION">SCRIPT_ENGINE_INJECTION: Potential code injection when using Script Engine</a>
      </h2>
            
<p>
    Dynamic code is being evaluated. A careful analysis of the code construction should be made. Malicious code execution
    could lead to data leakage or operating system compromised.
</p>
<p>
    If the evaluation of user code is intended, a proper sandboxing should be applied (see references).
</p>

<p><b>Code at risk:</b></p>
<p>
<pre>
public void runCustomTrigger(String script) {
    ScriptEngineManager factory = new ScriptEngineManager();
    ScriptEngine engine = factory.getEngineByName("JavaScript");

    engine.eval(script); //Bad things can happen here.
}</pre>
</p>

<p><b>Solution:</b></p>
<p>
Safe evaluation of JavaScript code using "Cloudbees Rhino Sandbox" library.<br/>
<pre>
public void runCustomTrigger(String script) {
    SandboxContextFactory contextFactory = new SandboxContextFactory();
    Context context = contextFactory.makeContext();
    contextFactory.enterContext(context);
    try {
        ScriptableObject prototype = context.initStandardObjects();
        prototype.setParentScope(null);
        Scriptable scope = context.newObject(prototype);
        scope.setPrototype(prototype);

        context.evaluateString(scope,script, null, -1, null);
    } finally {
        context.exit();
    }
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://github.com/cloudbees/rhino-sandbox">Cloudbees Rhino Sandbox</a>: Utility to create sandbox with Rhino (block access to all classes)<br/>
<a href="https://codeutopia.net/blog/2009/01/02/sandboxing-rhino-in-java/">CodeUtopia.net: Sandboxing Rhino in Java</a><br/>
<a href="https://blog.h3xstream.com/2014/11/remote-code-execution-by-design.html">Remote Code Execution .. by design</a>: Example of malicious payload. The samples given could be used to test sandboxing rules.<br/>
<a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a><br/>
<a href="https://cwe.mitre.org/data/definitions/95.html">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a><br/>
</p>

        <h2>
         <a name="COMMAND_INJECTION">COMMAND_INJECTION: Potential Command Injection</a>
      </h2>
            
<p>The highlighted API is used to execute a system command. If unfiltered input is passed to this API, it can lead to arbitrary command execution.</p>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>import java.lang.Runtime;

Runtime r = Runtime.getRuntime();
r.exec("/bin/sh -c some_tool" + input);</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Command_Injection">OWASP: Command Injection</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/78.html">CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</a>
</p>

        <h2>
         <a name="CRLF_INJECTION_LOGS">CRLF_INJECTION_LOGS: Potential CRLF Injection for logs</a>
      </h2>
            
<p>
    When data from an untrusted source is put into a logger and not neutralized correctly,
    an attacker could forge log entries or include malicious content.
    Inserted false entries could be used to skew statistics, distract the administrator
    or even to implicate another party in the commission of a malicious act.
    If the log file is processed automatically, the attacker can render the file unusable
    by corrupting the format of the file or injecting unexpected characters.
    An attacker may also inject code or other commands into the log file and take advantage
    of a vulnerability in the log processing utility (e.g. command injection or XSS).
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>String val = request.getParameter("user");
String metadata = request.getParameter("metadata");
[...]
if(authenticated) {
    log.info("User " + val + " (" + metadata + ") was authenticated successfully");
}
else {
    log.info("User " + val + " (" + metadata + ") was not authenticated");
}
</pre>

A malicious user could send the metadata parameter with the value: <code>"Firefox) was authenticated successfully\r\n[INFO] User bbb (Internet Explorer"</code>.
</p>

<b>Solution:</b><br/>
<p>
You can manually sanitize each parameter.
<pre>
log.info("User " + val.replaceAll("[\r\n]","") + " (" + userAgent.replaceAll("[\r\n]","") + ") was not authenticated");
</pre>
</p>

<p>
You can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack <a href="https://logback.qos.ch/manual/layouts.html#replace">using the <code>replace</code> function</a>.
<pre>
&lt;pattern&gt;%-5level - %replace(%msg){'[\r\n]', ''}%n&lt;/pattern&gt;
</pre>
</p>

<p>
Finally, you can use a logger implementation that replace new line by spaces.
The project <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a> has an implementation for Logback and Log4j.
</p>

<br/>
<p>
    <b>References</b><br/>
    <a href="https://cwe.mitre.org/data/definitions/117.html">CWE-117: Improper Output Neutralization for Logs</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://logback.qos.ch/manual/layouts.html#replace">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a><br/>
</p>


        <h2>
         <a name="DESERIALIZATION_GADGET">DESERIALIZATION_GADGET: This class could be used as deserialization gadget</a>
      </h2>
            
<p>
Deserialization gadget are class that could be used by an attacker to take advantage of a remote API using Native Serialization.
This class is either adding custom behavior to deserialization with the <code>readObject</code> method (Serializable) or can be called
 from a serialized object (InvocationHandler).
</p>
<p>
This detector is intended to be used mostly by researcher. The real issue is using deserialization for remote operation.
Removing gadget is a hardening practice to reduce the risk of being exploited.
</p>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/502.html">CWE-502: Deserialization of Untrusted Data</a><br/>
<a href="https://www.owasp.org/index.php/Deserialization_of_untrusted_data">Deserialization of untrusted data</a><br/>
<a href="https://www.oracle.com/technetwork/java/seccodeguide-139067.html#8">Serialization and Deserialization </a><br/>
<a href="https://github.com/frohoff/ysoserial">A tool for generating payloads that exploit unsafe Java object deserialization</a><br/>
[1] <a href="https://gist.github.com/coekie/a27cc406fc9f3dc7a70d">Example of Denial of Service using the class <code>java.util.HashSet</code></a><br/>
[2] <a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-2590">OpenJDK: Deserialization issue in ObjectInputStream.readSerialData() (CVE-2015-2590)</a><br/>
[3] <a href="https://www.rapid7.com/db/modules/exploit/multi/browser/java_calendar_deserialize">Rapid7: Sun Java Calendar Deserialization Privilege Escalation (CVE-2008-5353)</a>
</p>

        <h2>
         <a name="TEMPLATE_INJECTION_FREEMARKER">TEMPLATE_INJECTION_FREEMARKER: Potential template injection with Freemarker</a>
      </h2>
            
<p>
Freemarker template engine is powerful. It is possible to add logic including condition statements, loops and external calls.
It is not design to be sandbox to templating operations. A malicious user in control of a template can run malicious code
on the server-side. Freemarker templates should be seen as scripts.
</p>
<p>
    <b>Vulnerable Code:</b>
<pre>Template template = cfg.getTemplate(inputTemplate);
[...]
template.process(data, swOut);</pre>
</p>
<p>
    <b>Solution:</b>
<br/>
Avoid letting end users manipulate templates with Freemarker. If you need to expose template editing to your users,
prefer logic-less template engines such as Handlebars or Moustache (See references).
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://portswigger.net/research/server-side-template-injection">PortSwigger: Server-Side Template Injection</a><br/>
<a href="https://jknack.github.io/handlebars.java/">Handlebars.java</a><br/>
</p>
            
        <h2>
         <a name="GROOVY_SHELL">GROOVY_SHELL: Potential code injection when using GroovyShell</a>
      </h2>
            
<p>
    A expression is built with a dynamic value. The source of the value(s) should be verified to avoid
    that unfiltered values fall into this risky code evaluation.
</p>
<p><b>Code at risk:</b></p>
<p>
<pre>
public void evaluateScript(String script) {
  GroovyShell shell = new GroovyShell();
  shell.evaluate(script);
}
</pre>
</p>
<p><b>Solution:</b></p>
<p>
In general, method evaluating Groovy expression should not receive user input from low privilege users.
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="https://blog.orange.tw/2019/02/abusing-meta-programming-for-unauthenticated-rce.html">Hacking Jenkins Part 2 - Abusing Meta Programming for Unauthenticated RCE!</a> by Orange Tsai<br/>
    <a href="https://github.com/orangetw/awesome-jenkins-rce-2019">Jenkins RCE payloads</a> by Orange Tsai<br/>
    <a href="https://github.com/adamyordan/cve-2019-1003000-jenkins-rce-poc">POC for CVE-2019-1003001</a> by Adam Jordan<br/>
    <a href="https://github.com/welk1n/exploiting-groovy-in-Java/">Various payloads of exploiting Groovy code evaluation</a><br/>
</p>

        <h2>
         <a name="LDAP_INJECTION">LDAP_INJECTION: Potential LDAP Injection</a>
      </h2>
            
<p>
Just like SQL, all inputs passed to an LDAP query need to be passed in safely. Unfortunately, LDAP doesn't have prepared statement interfaces like SQL.
Therefore, the primary defense against LDAP injection is strong input validation of any untrusted data before including it in an LDAP query.
</p>
<p>
    <strong>Code at risk:</strong><br/>
    <pre>NamingEnumeration&lt;SearchResult&gt; answers = context.search("dc=People,dc=example,dc=com",
        "(uid=" + username + ")", ctrls);</pre>
</p>
<br/>
<p><strong>Solution:</strong></p>
<p>
Safe evaluation of Java code using "StringUtils" library.<br/>
<pre>if(StringUtils.isAlphanumeric(username)) {
    NamingEnumeration&lt;SearchResult&gt; answers = context.search("dc=People,dc=example,dc=com",
        "(uid=" + username + ")", ctrls);
}</pre>
</p>
<br/><p>
<strong>References</strong><br/>
<a href="https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html">LDAP Injection Prevention Cheat Sheet</a><br/>
<a href="https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection">OWASP: Top 10 A1:2017-Injection</a><br/>
<a href="http://projects.webappsec.org/w/page/13246947/LDAP%20Injection">WASC-29: LDAP Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/90.html">CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</a><br/>
</p>

        <h2>
         <a name="WEAK_MESSAGE_DIGEST_MD5">WEAK_MESSAGE_DIGEST_MD5: MD2, MD4 and MD5 are weak hash functions</a>
      </h2>
            
<p>The algorithms MD2, MD4 and MD5 are not a recommended MessageDigest. <b>PBKDF2</b> should be used to hash password for example.</p>

<blockquote>
    "The security of the MD5 hash function is severely compromised. A collision attack exists that can find collisions
    within seconds on a computer with a 2.6 GHz Pentium 4 processor (complexity of 2<sup>24.1</sup>).[1] Further, there is also a
    chosen-prefix collision attack that can produce a collision for two inputs with specified prefixes within hours, using
    off-the-shelf computing hardware (complexity 2<sup>39</sup>).[2]"<br/>
    - <a href="https://en.wikipedia.org/wiki/MD5#Security">Wikipedia: MD5 - Security</a>
</blockquote>

<blockquote>
    "<b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>
    The use of these hash functions is acceptable for all hash function applications."<br/>
    - <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>
</blockquote>
<blockquote>
    "The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time
    needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known
    iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try,
    it becomes harder to apply the dictionary or brute force attacks."<br/>
- <a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation  p.12</a>
</blockquote>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
    <pre>MessageDigest md5Digest = MessageDigest.getInstance("MD5");
    md5Digest.update(password.getBytes());
    byte[] hashValue = md5Digest.digest();</pre>
    <br/>
    <pre>byte[] hashValue = DigestUtils.getMd5Digest().digest(password.getBytes());</pre>
</p>
<br/>
<p>
    <b>Solution (Using bouncy castle):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
    gen.init(password.getBytes("UTF-8"), salt.getBytes(), 4096);
    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();
}</pre>
    <br/>
    <b>Solution (Java 8 and later):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);
    SecretKeyFactory f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
    return f.generateSecret(spec).getEncoded();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
[1] <a href="https://www.win.tue.nl/hashclash/On%20Collisions%20for%20MD5%20-%20M.M.J.%20Stevens.pdf">On Collisions for MD5</a>: Master Thesis by M.M.J. Stevens<br/>
[2] <a href="https://homepages.cwi.nl/~stevens/papers/stJOC%20-%20Chosen-Prefix%20Collisions%20for%20MD5%20and%20Applications.pdf">Chosen-prefix collisions for MD5 and applications</a>: Paper written by Marc Stevens<br/>
<a href="https://en.wikipedia.org/wiki/MD5">Wikipedia: MD5</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation</a><br/>
<a href="https://stackoverflow.com/q/22580853/89769">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java</a><br/>
<a href="https://cwe.mitre.org/data/definitions/327.html">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>
</p>

        <h2>
         <a name="OBJECT_DESERIALIZATION">OBJECT_DESERIALIZATION: Object deserialization is used in {1}</a>
      </h2>
            
<p>
    Object deserialization of untrusted data can lead to remote code execution, if there is a class in classpath that allows
    the trigger of malicious operation.
</p>
<p>
    Libraries developers tend to fix class that provided potential malicious trigger. There are still classes that are
    known to trigger Denial of Service<sup>[1]</sup>.
</p>
<p>
    Deserialization is a sensible operation that has a great history of vulnerabilities. The web application might
    become vulnerable as soon as a new vulnerability is found in the Java Virtual Machine<sup>[2] [3]</sup>.
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
public UserData deserializeObject(InputStream receivedFile) throws IOException, ClassNotFoundException {

    try (ObjectInputStream in = new ObjectInputStream(receivedFile)) {
        return (UserData) in.readObject();
    }
}
</pre>
</p>

<p>
<b>Solutions:</b><br/>
<p>
Avoid deserializing object provided by remote users.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/502.html">CWE-502: Deserialization of Untrusted Data</a><br/>
<a href="https://www.owasp.org/index.php/Deserialization_of_untrusted_data">Deserialization of untrusted data</a><br/>
<a href="https://www.oracle.com/technetwork/java/seccodeguide-139067.html#8">Serialization and Deserialization </a><br/>
<a href="https://github.com/frohoff/ysoserial">A tool for generating payloads that exploit unsafe Java object deserialization</a><br/>
[1] <a href="https://gist.github.com/coekie/a27cc406fc9f3dc7a70d">Example of Denial of Service using the class <code>java.util.HashSet</code></a><br/>
[2] <a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-2590">OpenJDK: Deserialization issue in ObjectInputStream.readSerialData() (CVE-2015-2590)</a><br/>
[3] <a href="https://www.rapid7.com/db/modules/exploit/multi/browser/java_calendar_deserialize">Rapid7: Sun Java Calendar Deserialization Privilege Escalation (CVE-2008-5353)</a>
</p>

        <h2>
         <a name="PREDICTABLE_RANDOM">PREDICTABLE_RANDOM: Predictable pseudorandom number generator</a>
      </h2>
            
<p>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:</p>
<ul>
<li>a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token</li>
<li>a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the "change password" form</li>
<li>any other secret value</li>
</ul>
<p>
A quick fix could be to replace the use of <code>java.util.Random</code> with something stronger, such as <code>java.security.SecureRandom</code>.
</p>
<p>
<b>Vulnerable Code:</b><br/>
<pre>String generateSecretToken() {
    Random r = new Random();
    return Long.toHexString(r.nextLong());
}</pre>
</p>
<p>
<b>Solution:</b>
<pre>import org.apache.commons.codec.binary.Hex;

String generateSecretToken() {
    SecureRandom secRandom = new SecureRandom();

    byte[] result = new byte[32];
    secRandom.nextBytes(result);
    return Hex.encodeHexString(result);
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://jazzy.id.au/2010/09/20/cracking_random_number_generators_part_1.html">Cracking Random Number Generators - Part 1 (https://jazzy.id.au)</a><br/>
<a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT: MSC02-J. Generate strong random numbers</a><br/>
<a href="https://cwe.mitre.org/data/definitions/330.html">CWE-330: Use of Insufficiently Random Values</a><br/>
<a href="https://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html">Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)</a>
</p>

        <h2>
         <a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
      </h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        <h2>
         <a name="REDOS">REDOS: Regex DOS (ReDOS)</a>
      </h2>
            
<p>
    Regular expressions (Regex) are frequently subject to Denial of Service (DOS) attacks (called ReDOS). This is due to the fact that regex engines
    may take a large amount of time when analyzing certain strings, depending on how the regex is defined.
<p>
    For example, for the regex: <code>^(a+)+$</code>, the input "<code>aaaaaaaaaaaaaaaaX</code>" will cause the regex engine to analyze 65536
different paths.<sup>[1] Example taken from OWASP references</sup></p>
<p>
Therefore, it is possible that a single request may cause a large amount of computation on the server side.
The problem with this regex, and others like it, is that there are two different ways the same input character can be accepted by the
Regex due to the <code>+</code> (or a <code>*</code>) inside the parenthesis, and the <code>+</code> (or a <code>*</code>) outside the parenthesis. The way this is written, either <code>+</code> could
consume the character 'a'. To fix this, the regex should be rewritten to eliminate the ambiguity. For example, this could simply be
rewritten as: <code>^a+$</code>, which is presumably what the author meant anyway (any number of a's). Assuming that's what the original
regex meant, this new regex can be evaluated quickly, and is not subject to ReDOS.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://sebastiankuebeck.wordpress.com/2011/03/01/detecting-and-preventing-redos-vulnerabilities/">Sebastian Kubeck's Weblog: Detecting and Preventing ReDoS Vulnerabilities</a><br/>
<sup>[1]</sup> <a href="https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS">OWASP: Regular expression Denial of Service</a><br/>
<a href="https://cwe.mitre.org/data/definitions/400.html">CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')</a>
</p>

        <h2>
         <a name="SQL_INJECTION_JDBC">SQL_INJECTION_JDBC: Potential JDBC Injection</a>
      </h2>
            
<p>
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
</p>

<p>
    <b>Vulnerable Code:</b><br/>
    <pre>Connection conn = [...];
Statement stmt = con.createStatement();
ResultSet rs = stmt.executeQuery("update COFFEES set SALES = "+nbSales+" where COF_NAME = '"+coffeeName+"'");</pre>
</p>
<p>
    <b>Solution:</b><br/>
    <pre>Connection conn = [...];
conn.prepareStatement("update COFFEES set SALES = ? where COF_NAME = ?");
updateSales.setInt(1, nbSales);
updateSales.setString(2, coffeeName);</pre>
</p>
<br/>

<b>References (JDBC)</b><br/>
<a href="https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html">Oracle Documentation: The Java Tutorials &gt; Prepared Statements</a><br/>
<b>References (SQL injection)</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a><br/>
<a href="https://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">OWASP: Query Parameterization Cheat Sheet</a><br/>
</p>

        <h2>
         <a name="SSL_CONTEXT">SSL_CONTEXT: Weak SSLContext</a>
      </h2>
            
<p>
    <b>Vulnerable Code:</b><br/>

    <pre>SSLContext.getInstance("SSL");</pre>
</p>
<p>
<p><b>Solution:</b><br/>

Upgrade your implementation to the following, and configure <code>https.protocols</code> JVM option to include TLSv1.2:</p>
<pre>SSLContext.getInstance("TLS");</pre>
<p>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://blogs.oracle.com/java-platform-group/entry/diagnosing_tls_ssl_and_https">Diagnosing TLS, SSL, and HTTPS</a>
</p>

        <h2>
         <a name="URLCONNECTION_SSRF_FD">URLCONNECTION_SSRF_FD: URLConnection Server-Side Request Forgery (SSRF) and File Disclosure</a>
      </h2>
            
<p>
    Server-Side Request Forgery occur when a web server executes a request to a user supplied destination
    parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services
    or to launch attacks from your web server.
</p>
<p>
    URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.
<p>
    <b>Vulnerable Code:</b>
<pre>
new URL(String url).openConnection()
</pre>

<pre>
new URL(String url).openStream()
</pre>

<pre>
new URL(String url).getContent()
</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept URL destinations from users</li>
        <li>Accept a destination key, and use it to look up the target destination associate with the key</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)</a><br/>
<a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery</a><br/>
<a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path</a><br/>
<a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads</a><br />
</p>
            <h2>
         <a name="UNSAFE_HASH_EQUALS">UNSAFE_HASH_EQUALS: Unsafe hash equals</a>
      </h2>
            
<p>
An attacker might be able to detect the value of the secret hash due to the exposure of comparison timing. When the
functions <code>Arrays.equals()</code> or <code>String.equals()</code> are called, they will exit earlier if fewer
bytes are matched.
</p>
<p>
<p><b>Vulnerable Code:</b><br/>

<pre>
String actualHash = ...

if(userInput.equals(actualHash)) {
    ...
}</pre>
</p>
<p><b>Solution:</b><br/>

<pre>
String actualHash = ...

if(MessageDigest.isEqual(userInput.getBytes(),actualHash.getBytes())) {
    ...
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/203.html">CWE-203: Information Exposure Through DiscrepancyKey</a><br/>
</p>

        <h2>
         <a name="WEAK_TRUST_MANAGER">WEAK_TRUST_MANAGER: TrustManager that accept any certificates</a>
      </h2>
            
<p>Empty TrustManager implementations are often used to connect easily to a host that is not signed by a root
<a href="https://en.wikipedia.org/wiki/Certificate_authority">certificate authority</a>. As a consequence, this is vulnerable to
<a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">Man-in-the-middle attacks</a>
since the client will trust any certificate.
</p>
<p>
A TrustManager allowing specific certificates (based on a TrustStore for example) should be built.
Detailed information for a proper implementation is available at:
<a href="https://stackoverflow.com/a/6378872/89769">[1]</a>
<a href="https://stackoverflow.com/a/5493452/89769">[2]</a>
</p>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>class TrustAllManager implements X509TrustManager {

    @Override
    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any client connecting (no certificate validation)
    }

    @Override
    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any remote server (no certificate validation)
    }

    @Override
    public X509Certificate[] getAcceptedIssuers() {
        return null;
    }
}</pre>
</p>
<br/>
<p>
    <b>Solution (TrustMangager based on a keystore):</b><br/>
<pre>KeyStore ks = //Load keystore containing the certificates trusted

SSLContext sc = SSLContext.getInstance("TLS");

TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
tmf.init(ks);

sc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);
</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="https://cwe.mitre.org/data/definitions/295.html">CWE-295: Improper Certificate Validation</a>
</p>

        <h2>
         <a name="XXE_DOCUMENT">XXE_DOCUMENT: XML parsing vulnerable to XXE (DocumentBuilder)</a>
      </h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ML <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();

Document doc = db.parse(input);</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one feature or both.
</p>

<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against Denial of Service attack and remote file access.
<pre>
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
DocumentBuilder db = dbf.newDocumentBuilder();

Document doc = db.parse(input);</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
By disabling DTD, almost all XXE attacks will be prevented.
<pre>
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
DocumentBuilder db = dbf.newDocumentBuilder();

Document doc = db.parse(input);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html">Identifying XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
<a href="http://xerces.apache.org/xerces2-j/features.html">Xerces2 complete features list</a>
</p>

        <h2>
         <a name="XXE_XMLSTREAMREADER">XXE_XMLSTREAMREADER: XML parsing vulnerable to XXE (XMLStreamReader)</a>
      </h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ML <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one property or both.
</p>

<p><b>Solution disabling External Entities:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html">Identifying XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
<a href="https://openjdk.java.net/jeps/185">JEP 185: Restrict Fetching of External XML Resources</a>
</p>

        <h2>
         <a name="XXE_DTD_TRANSFORM_FACTORY">XXE_DTD_TRANSFORM_FACTORY: XML parsing vulnerable to XXE (TransformerFactory)</a>
      </h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ML <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
Transformer transformer = TransformerFactory.newInstance().newTransformer();
transformer.transform(input, result);</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one feature or both.
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>

<p>An empty string denies all access to external references for both attributes.</p>

<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html">Identifying XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
</p>

        <h2>
         <a name="XXE_XSLT_TRANSFORM_FACTORY">XXE_XSLT_TRANSFORM_FACTORY: XSLT parsing vulnerable to XXE (TransformerFactory)</a>
      </h2>
            
<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XSLT External Entity (XXE) attacks can occur when an XSLT parser supports external entities while processing XSLT received
from an untrusted source.</p>
<p><b>Risk: Expose local file content (XXE: <u>X</u>ML E<u>x</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;
   &lt;xsl:template match=&quot;/&quot;&gt;
       &lt;xsl:value-of select=&quot;document(&apos;/etc/passwd&apos;)&quot;&gt;
   &lt;/xsl:value-of&gt;&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
Transformer transformer = TransformerFactory.newInstance().newTransformer();
transformer.transform(input, result);</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one feature or both.
</p>
<p><b>Solution disabling DTD:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>

<p>An empty string denies all access to external references for both attributes.</p>

<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against remote file access but not denial of service.
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");

transformer.transform(input, result);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="https://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="https://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html">Identifying XML External Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
</p>

        <h2>
         <a name="SPEL_INJECTION">SPEL_INJECTION: Potential code injection when using Spring Expression</a>
      </h2>
            
<p>
    A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid
    that unfiltered values fall into this risky code evaluation.
</p>
<p><b>Code at risk:</b></p>
<p>
<pre>
public void parseExpressionInterface(Person personObj,String property) {

        ExpressionParser parser = new SpelExpressionParser();

        //Unsafe if the input is control by the user..
        Expression exp = parser.parseExpression(property+" == 'Albert'");

        StandardEvaluationContext testContext = new StandardEvaluationContext(personObj);
        boolean result = exp.getValue(testContext, Boolean.class);
[...]</pre>
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/95.html">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a><br/>
    <a href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/expressions.html">Spring Expression Language (SpEL) - Official Documentation</a><br/>
    <a href="https://www.mindedsecurity.com/fileshare/ExpressionLanguageInjection.pdf">Minded Security: Expression Language Injection</a><br/>
    <a href="https://blog.h3xstream.com/2014/11/remote-code-execution-by-design.html">Remote Code Execution .. by design</a>: Example of malicious payload. The samples given could be used to test sandboxing rules.<br/>
    <a href="https://gosecure.net/2018/05/15/beware-of-the-magic-spell-part-1-cve-2018-1273/">Spring Data-Commons: (CVE-2018-1273)</a><br/>
    <a href="https://gosecure.net/2018/05/17/beware-of-the-magic-spell-part-2-cve-2018-1260/">Spring OAuth2: CVE-2018-1260</a>
</p>


        <h2>
         <a name="SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE">SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE: Nonconstant string passed to execute or addBatch method on an SQL statement</a>
      </h2>

  <p>The method invokes the execute or addBatch method on an SQL statement with a String that seems
to be dynamically generated. Consider using
a prepared statement instead. It is more efficient and less vulnerable to
SQL injection attacks.
</p>

    </body>
</html>
